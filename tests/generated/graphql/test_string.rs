#[allow(unused_imports)]
use rust_prettier::PrettyPrinterBuilder;
#[test]
fn test_description_graphql_format_1_d79cbaf0() {
    let pretty_printer = PrettyPrinterBuilder::default().build().unwrap();
    let formatted = pretty_printer . format ("\"\"\" Customer \"\"\"\ntype Person {name: String}\n\n\"\"\" Customer \"\"\"\ntype Person {name: String}\n\n\"\"\"\n\n    Customer\n\n\n\"\"\"\ntype Person {name: String}\n\n\"\"\"\"\"\"\ntype Person {name: String}\n\n\"\"\"    \"\"\"\ntype Person {name: String}\n\n\"\"\"\n    1\n  2\n\"\"\"\ntype Person {name: String}\n\n\n\"\"\"\n\n\nEmpty lines before\n\"\"\"\ntype Person {name: String}\n\n\"\"\"\nEmpty lines after\n\n\n\"\"\"\ntype Person {name: String}\n\n\"\"\"\n\n\nEmpty lines around\n\n\n\"\"\"\ntype Person {name: String}\n\n\"\"\"\nFirst line\n\nSecond Line\n\"\"\"\ntype Person {name: String}\n\n\"\"\"\n\n\nFirst line\n\nSecond Line\n\"\"\"\ntype Person {name: String}\n\n\"\"\"\nFirst line\n\nSecond Line\n\n\n\"\"\"\ntype Person {name: String}") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "\"\"\"\nCustomer\n\"\"\"\ntype Person {\n  name: String\n}\n\n\"\"\"\nCustomer\n\"\"\"\ntype Person {\n  name: String\n}\n\n\"\"\"\nCustomer\n\"\"\"\ntype Person {\n  name: String\n}\n\n\"\"\"\n\"\"\"\ntype Person {\n  name: String\n}\n\n\"\"\"\n\"\"\"\ntype Person {\n  name: String\n}\n\n\"\"\"\n  1\n2\n\"\"\"\ntype Person {\n  name: String\n}\n\n\"\"\"\nEmpty lines before\n\"\"\"\ntype Person {\n  name: String\n}\n\n\"\"\"\nEmpty lines after\n\"\"\"\ntype Person {\n  name: String\n}\n\n\"\"\"\nEmpty lines around\n\"\"\"\ntype Person {\n  name: String\n}\n\n\"\"\"\nFirst line\n\nSecond Line\n\"\"\"\ntype Person {\n  name: String\n}\n\n\"\"\"\nFirst line\n\nSecond Line\n\"\"\"\ntype Person {\n  name: String\n}\n\n\"\"\"\nFirst line\n\nSecond Line\n\"\"\"\ntype Person {\n  name: String\n}");
}
#[test]
fn test_string_graphql_format_1_77a47c2e() {
    let pretty_printer = PrettyPrinterBuilder::default().build().unwrap();
    let formatted = pretty_printer . format ("query X($a: Int) @relay(meta: \"{\\\\\"lowPri\\\\\": true}\") { a }\n\n\"\"\"abc\"\"\"\ntype T {\n  a: Int\n}\n\n\"\"\"\nabc\n\"\"\"\ntype T {\n  a: Int\n}\n\n\"\"\"\n  a\n    b\n      c\n         \"\"\"\ntype T { a: Int }\n\ntype Foo {\n\"\"\"\nThis is a description\nof the \\`one\\` field.\n\"\"\"\n  one: Type\n}\n\ntype Foo {\nq(\"docs\" field: String): Type\nq(\"A long string of description of the field parameter to make this break\" field: String): Type\nq(\"\"\"docs\"\"\" field: String): Type\n}\n\nenum Enum {\n\"\"\"\nDescription of \\`one\\`\n\"\"\"\none\n}\n\ninput Input {\n\"\"\"\nDescription of \\`one\\`\n\"\"\"\none: string\n}\n\n{\n  foo(input: {multiline: \"ab\\\\ncd\"}) { id }\n}\n\n{\n  foo(input: {multiline: \"\"\"    foo    \"\"\"}) { id }\n}\n\n{\n  foo(input: {multiline: \"\"\"    \"\"\"}) { id }\n}") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "query X($a: Int) @relay(meta: \"{\\\\\"lowPri\\\\\": true}\") {\n  a\n}\n\n\"\"\"\nabc\n\"\"\"\ntype T {\n  a: Int\n}\n\n\"\"\"\nabc\n\"\"\"\ntype T {\n  a: Int\n}\n\n\"\"\"\na\n  b\n    c\n\"\"\"\ntype T {\n  a: Int\n}\n\ntype Foo {\n  \"\"\"\n  This is a description\n  of the \\`one\\` field.\n  \"\"\"\n  one: Type\n}\n\ntype Foo {\n  q(\"docs\" field: String): Type\n  q(\n    \"A long string of description of the field parameter to make this break\"\n    field: String\n  ): Type\n  q(\n    \"\"\"\n    docs\n    \"\"\"\n    field: String\n  ): Type\n}\n\nenum Enum {\n  \"\"\"\n  Description of \\`one\\`\n  \"\"\"\n  one\n}\n\ninput Input {\n  \"\"\"\n  Description of \\`one\\`\n  \"\"\"\n  one: string\n}\n\n{\n  foo(input: { multiline: \"ab\\\\ncd\" }) {\n    id\n  }\n}\n\n{\n  foo(\n    input: {\n      multiline: \"\"\"\n      foo\n      \"\"\"\n    }\n  ) {\n    id\n  }\n}\n\n{\n  foo(\n    input: {\n      multiline: \"\"\"\n      \"\"\"\n    }\n  ) {\n    id\n  }\n}");
}
