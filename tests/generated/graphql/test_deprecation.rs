use pretty_assertions::assert_eq;
#[allow(unused_imports)]
use rust_prettier::PrettyPrinterBuilder;
#[allow(dead_code)]
static INFINITY: usize = usize::MAX;
#[test]
fn test_directives_graphql_format_1_455ef7ac() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("graphql")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("# https://github.com/graphql/graphql-js/pull/2733/files\n\ntype Query {\n  someField(\n    nonDeprecated: String\n    deprecated: String @deprecated(reason: \"Removed in 1.0\")\n    deprecatedWithEmptyReason: String @deprecated(reason: \"\")\n  ): String\n}\n\n\ntype Query {\n  someField(\n    nonDeprecated: String\n    deprecated: String @deprecated(reason: \"Removed in 1.0\")\n  ): String\n}\n\ninput SomeInputObject {\n  nonDeprecated: String\n  deprecated: String @deprecated(reason: \"Removed in 1.0\")\n  deprecatedWithEmptyReason: String @deprecated(reason: \"\")\n}\ntype Query {\n  someField(someArg: SomeInputObject): String\n}\n\ninput SomeInputObject {\n  nonDeprecated: String\n  deprecated: String @deprecated(reason: \"Removed in 1.0\")\n}\ntype Query {\n  someField(someArg: SomeInputObject): String\n}\n\ntype Query {\n  field(arg: SomeInputObject): String\n}\ninput SomeInputObject {\n  badField: String! @deprecated\n  optionalField: String @deprecated\n  anotherOptionalField: String! = \"\" @deprecated\n}\n\ndirective @BadDirective(\n  badArg: String! @deprecated\n  optionalArg: String @deprecated\n  anotherOptionalArg: String! = \"\" @deprecated\n) on FIELD\ntype Query {\n  test(\n    badArg: String! @deprecated\n    optionalArg: String @deprecated\n    anotherOptionalArg: String! = \"\" @deprecated\n  ): String\n}\n\ninput MyInput {\n  oldInput: String @deprecated\n  otherInput: String @deprecated(reason: \"Use newInput\")\n  newInput: String\n}\n\ntype Query {\n  field1: String @deprecated\n  field2: Int @deprecated(reason: \"Because I said so\")\n  enum: MyEnum\n  field3(oldArg: String @deprecated, arg: String): String\n  field4(oldArg: String @deprecated(reason: \"Why not?\"), arg: String): String\n  field5(arg: MyInput): String\n}") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "# https://github.com/graphql/graphql-js/pull/2733/files\n\ntype Query {\n  someField(\n    nonDeprecated: String\n    deprecated: String @deprecated(reason: \"Removed in 1.0\")\n    deprecatedWithEmptyReason: String @deprecated(reason: \"\")\n  ): String\n}\n\ntype Query {\n  someField(\n    nonDeprecated: String\n    deprecated: String @deprecated(reason: \"Removed in 1.0\")\n  ): String\n}\n\ninput SomeInputObject {\n  nonDeprecated: String\n  deprecated: String @deprecated(reason: \"Removed in 1.0\")\n  deprecatedWithEmptyReason: String @deprecated(reason: \"\")\n}\ntype Query {\n  someField(someArg: SomeInputObject): String\n}\n\ninput SomeInputObject {\n  nonDeprecated: String\n  deprecated: String @deprecated(reason: \"Removed in 1.0\")\n}\ntype Query {\n  someField(someArg: SomeInputObject): String\n}\n\ntype Query {\n  field(arg: SomeInputObject): String\n}\ninput SomeInputObject {\n  badField: String! @deprecated\n  optionalField: String @deprecated\n  anotherOptionalField: String! = \"\" @deprecated\n}\n\ndirective @BadDirective(\n  badArg: String! @deprecated\n  optionalArg: String @deprecated\n  anotherOptionalArg: String! = \"\" @deprecated\n) on FIELD\ntype Query {\n  test(\n    badArg: String! @deprecated\n    optionalArg: String @deprecated\n    anotherOptionalArg: String! = \"\" @deprecated\n  ): String\n}\n\ninput MyInput {\n  oldInput: String @deprecated\n  otherInput: String @deprecated(reason: \"Use newInput\")\n  newInput: String\n}\n\ntype Query {\n  field1: String @deprecated\n  field2: Int @deprecated(reason: \"Because I said so\")\n  enum: MyEnum\n  field3(oldArg: String @deprecated, arg: String): String\n  field4(oldArg: String @deprecated(reason: \"Why not?\"), arg: String): String\n  field5(arg: MyInput): String\n}");
}
