#[allow(unused_imports)]
use rust_prettier::PrettyPrinterBuilder;
#[test]
fn test_kitchen_sink_graphql_format_1_f51a47bb() {
    let pretty_printer = PrettyPrinterBuilder::default().build().unwrap();
    let formatted = pretty_printer . format ("# Copyright (c) 2015-present, Facebook, Inc.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\nquery queryName($foo: ComplexType, $site: Site = MOBILE) {\n  whoever123is: node(id: [123, 456]) {\n    id ,\n    ... on User @defer {\n      field2 {\n        id ,\n        alias: field1(first:10, after:$foo,) @include(if: $foo) {\n          id,\n          ...frag\n        }\n      }\n    }\n    ... @skip(unless: $foo) {\n      id\n    }\n    ... {\n      id\n    }\n  }\n}\n\nmutation likeStory {\n  like(story: 123) @defer {\n    story {\n      id\n    }\n  }\n}\n\nsubscription StoryLikeSubscription($input: StoryLikeSubscribeInput) {\n  storyLikeSubscribe(input: $input) {\n    story {\n      likers {\n        count\n      }\n      likeSentence {\n        text\n      }\n    }\n  }\n}\n\nfragment frag on Friend {\n  foo(size: $size, bar: $b, obj: {key: \"value\", block: \"\"\"\n      block string uses \\\\\"\"\"\n  \"\"\"})\n}\n\n{\n  unnamed(truthy: true, falsey: false, nullish: null),\n  query\n}") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "# Copyright (c) 2015-present, Facebook, Inc.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\nquery queryName($foo: ComplexType, $site: Site = MOBILE) {\n  whoever123is: node(id: [123, 456]) {\n    id\n    ... on User @defer {\n      field2 {\n        id\n        alias: field1(first: 10, after: $foo) @include(if: $foo) {\n          id\n          ...frag\n        }\n      }\n    }\n    ... @skip(unless: $foo) {\n      id\n    }\n    ... {\n      id\n    }\n  }\n}\n\nmutation likeStory {\n  like(story: 123) @defer {\n    story {\n      id\n    }\n  }\n}\n\nsubscription StoryLikeSubscription($input: StoryLikeSubscribeInput) {\n  storyLikeSubscribe(input: $input) {\n    story {\n      likers {\n        count\n      }\n      likeSentence {\n        text\n      }\n    }\n  }\n}\n\nfragment frag on Friend {\n  foo(\n    size: $size\n    bar: $b\n    obj: {\n      key: \"value\"\n      block: \"\"\"\n      block string uses \\\\\"\"\"\n      \"\"\"\n    }\n  )\n}\n\n{\n  unnamed(truthy: true, falsey: false, nullish: null)\n  query\n}");
}
#[test]
fn test_schema_kitchen_sink_graphql_format_1_2bdf666f() {
    let pretty_printer = PrettyPrinterBuilder::default().build().unwrap();
    let formatted = pretty_printer . format ("# Copyright (c) 2015-present, Facebook, Inc.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\nschema {\n  query: QueryType\n  mutation: MutationType\n}\n\nextend schema @directive {\n  subscription: Subscription\n}\n\n\"\"\"\nThis is a description\nof the \\`Foo\\` type.\n\"\"\"\ntype Foo implements Bar {\n  one: Type\n  two(argument: InputType!): Type\n  three(argument: InputType, other: String): Int\n  four(argument: String = \"string\"): String\n  five(argument: [String] = [\"string\", \"string\"]): String\n  six(argument: InputType = {key: \"value\"}): Type\n  seven(argument: Int = null): Type\n}\n\ntype AnnotatedObject @onObject(arg: \"value\") {\n  annotatedField(arg: Type = \"default\" @onArg): Type @onField\n}\n\ntype UndefinedType\n\nextend type Foo {\n  seven(argument: [String]): Type\n}\n\nextend type Foo @onType\n\n\"\"\"\nThis is a description\n\"\"\"\ninterface Bar {\n  one: Type\n  four(argument: String = \"string\"): String\n}\n\ninterface AnnotatedInterface @onInterface {\n  annotatedField(arg: Type @onArg): Type @onField\n}\n\ninterface UndefinedInterface\n\nextend interface Bar {\n  two(argument: InputType!): Type\n}\n\nextend interface Bar @onInterface\n\nunion Feed = Story | Article | Advert\n\nunion AnnotatedUnion @onUnion = A | B\n\nunion AnnotatedUnionTwo @onUnion = | A | B\n\nunion UndefinedUnion\n\nextend union Feed = Photo | Video\n\nextend union Feed @onUnion\n\nscalar CustomScalar\n\nscalar AnnotatedScalar @onScalar\n\nextend scalar CustomScalar @onScalar\n\nenum Site {\n  DESKTOP\n  MOBILE\n}\n\nenum AnnotatedEnum @onEnum {\n  ANNOTATED_VALUE @onEnumValue\n  OTHER_VALUE\n}\n\nenum UndefinedEnum\n\nextend enum Site {\n  VR\n}\n\nextend enum Site @onEnum\n\ninput InputType {\n  key: String!\n  answer: Int = 42\n}\n\ninput AnnotatedInput @onInputObject {\n  annotatedField: Type @onField\n}\n\ninput UndefinedInput\n\nextend input InputType {\n  other: Float = 1.23e4\n}\n\nextend input InputType @onInputObject\n\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ndirective @include(if: Boolean!)\n  on FIELD\n   | FRAGMENT_SPREAD\n   | INLINE_FRAGMENT\n\ndirective @include2(if: Boolean!) on\n  | FIELD\n  | FRAGMENT_SPREAD\n  | INLINE_FRAGMENT") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "# Copyright (c) 2015-present, Facebook, Inc.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\nschema {\n  query: QueryType\n  mutation: MutationType\n}\n\nextend schema @directive {\n  subscription: Subscription\n}\n\n\"\"\"\nThis is a description\nof the \\`Foo\\` type.\n\"\"\"\ntype Foo implements Bar {\n  one: Type\n  two(argument: InputType!): Type\n  three(argument: InputType, other: String): Int\n  four(argument: String = \"string\"): String\n  five(argument: [String] = [\"string\", \"string\"]): String\n  six(argument: InputType = { key: \"value\" }): Type\n  seven(argument: Int = null): Type\n}\n\ntype AnnotatedObject @onObject(arg: \"value\") {\n  annotatedField(arg: Type = \"default\" @onArg): Type @onField\n}\n\ntype UndefinedType\n\nextend type Foo {\n  seven(argument: [String]): Type\n}\n\nextend type Foo @onType\n\n\"\"\"\nThis is a description\n\"\"\"\ninterface Bar {\n  one: Type\n  four(argument: String = \"string\"): String\n}\n\ninterface AnnotatedInterface @onInterface {\n  annotatedField(arg: Type @onArg): Type @onField\n}\n\ninterface UndefinedInterface\n\nextend interface Bar {\n  two(argument: InputType!): Type\n}\n\nextend interface Bar @onInterface\n\nunion Feed = Story | Article | Advert\n\nunion AnnotatedUnion @onUnion = A | B\n\nunion AnnotatedUnionTwo @onUnion = A | B\n\nunion UndefinedUnion\n\nextend union Feed = Photo | Video\n\nextend union Feed @onUnion\n\nscalar CustomScalar\n\nscalar AnnotatedScalar @onScalar\n\nextend scalar CustomScalar @onScalar\n\nenum Site {\n  DESKTOP\n  MOBILE\n}\n\nenum AnnotatedEnum @onEnum {\n  ANNOTATED_VALUE @onEnumValue\n  OTHER_VALUE\n}\n\nenum UndefinedEnum\n\nextend enum Site {\n  VR\n}\n\nextend enum Site @onEnum\n\ninput InputType {\n  key: String!\n  answer: Int = 42\n}\n\ninput AnnotatedInput @onInputObject {\n  annotatedField: Type @onField\n}\n\ninput UndefinedInput\n\nextend input InputType {\n  other: Float = 1.23e4\n}\n\nextend input InputType @onInputObject\n\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ndirective @include2(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT");
}
