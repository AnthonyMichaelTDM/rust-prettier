#[allow(unused_imports)]
use rust_prettier::{Parsers, PrettyPrinterBuilder};
#[allow(dead_code)]
static INFINITY: usize = usize::MAX;
#[test]
fn test_grid_css_format_1_6e24988a() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("css")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("/* quotes */\ndiv {\n  grid-template-areas:\n       'header header'\n       'main sidebar'\n       'footer footer';\n}\n\n/* numbers */\ndiv {\n  grid-template-columns:\n      [full-start] minmax(1.50em, 1fr)\n      [main-start] minmax(.40ch, 75ch)\n      [main-end] minmax(1em, 1.000fr)\n      [full-end];\n}\n\n/* casing */\ndiv {\n  GRID:\n    [top] 1fr\n    [middle] 1fr\n    bottom;\n\n  grid-TEMPLATE:\n        \"a a a\" 200px\n        \"b b b\" 200px\n        / 200px 200px auto;\n}\n\n/* break before first line if there are any breaks */\ndiv {\n  grid-template-columns:\n      1fr 100px 3em;\n  grid: [wide-start] \"header header header\" 200px [wide-end]\n      \"footer footer footer\" 25px\n      / auto 50px auto;\n}\n\n/**\n * https://github.com/prettier/prettier/issues/2703#issuecomment-341188126\n */\n.container {\n  display: grid;\n\n  /* basic template rows/columns */\n  grid-template-columns: 1fr 100px 3em;\n  grid-template-rows: 1fr 100px 3em;\n  /* template rows/columns with named grid lines */\n  grid-template-columns:\n    [wide-start] 1fr\n    [main-start] 500px\n    [main-end] 1fr\n    [wide-end];\n  grid-template-rows:\n    [top] 1fr\n    [middle] 1fr\n    [bottom];\n  /* template rows/columns with functions */\n  grid-template-columns: minmax(1em, 1fr) minmax(1em, 80ch) minmax(1em, 1fr);\n  /* getting really busy with named lines + functions */\n  grid-template-columns:\n    [full-start] minmax(1em, 1fr)\n    [main-start] minmax(1em, 80ch)\n    [main-end] minmax(1em, 1fr)\n    [full-end];\n\n  grid-template-areas:\n    \"header header header\"\n    \"main   main   sidebar\"\n    \"main   main   sidebar2\"\n    \"footer footer footer\";\n\n  /* Shorthand for grid-template-rows, grid-template-columns, and grid-template\n     areas. In one. This can get really crazy. */\n  grid-template:\n    [row1-start] \"header header header\" 25px [row1-end]\n    [row2-start] \"footer footer footer\" 25px [row2-end]\n    / auto 50px auto;\n\n  /* The. Worst. This one is shorthand for like everything here smashed into one. But rarely will you actually specify EVERYTHING. */\n  grid:\n    [row1-start] \"header header header\" 25px [row1-end]\n    [row2-start] \"footer footer footer\" 25px [row2-end]\n    / auto 50px auto;\n  /* simpler use case: */\n  grid: 200px auto / 1fr auto 1fr;\n\n  /* Okay, the the worst of it. The simpler syntaxes: */\n\n  grid-row-gap: 2em;\n  grid-column-gap: 1em;\n  /* shorthand for grid-row-gap + grid-column-gap: */\n  grid-gap: 2em 1em;\n\n  grid-auto-columns: 1fr;\n  grid-auto-rows: 1fr;\n}\n\n.container > .item {\n  grid-column-start: 1;\n  grid-column-end: 2;\n  grid-row-start: -2;\n  grid-row-end: -1;\n\n  /* shorthands for the above: */\n  grid-column: 1 / 2;\n  grid-column: main;\n  grid-row: -2 / span 1;\n  grid-row: footer;\n\n  grid-area: main;\n  grid-area: 1 / main-start / 3 / main-end;\n}") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "/* quotes */\ndiv {\n  grid-template-areas:\n    \"header header\"\n    \"main sidebar\"\n    \"footer footer\";\n}\n\n/* numbers */\ndiv {\n  grid-template-columns:\n    [full-start] minmax(1.5em, 1fr)\n    [main-start] minmax(0.4ch, 75ch)\n    [main-end] minmax(1em, 1fr)\n    [full-end];\n}\n\n/* casing */\ndiv {\n  grid:\n    [top] 1fr\n    [middle] 1fr\n    bottom;\n\n  grid-template:\n    \"a a a\" 200px\n    \"b b b\" 200px\n    / 200px 200px auto;\n}\n\n/* break before first line if there are any breaks */\ndiv {\n  grid-template-columns: 1fr 100px 3em;\n  grid:\n    [wide-start] \"header header header\" 200px [wide-end]\n    \"footer footer footer\" 25px\n    / auto 50px auto;\n}\n\n/**\n * https://github.com/prettier/prettier/issues/2703#issuecomment-341188126\n */\n.container {\n  display: grid;\n\n  /* basic template rows/columns */\n  grid-template-columns: 1fr 100px 3em;\n  grid-template-rows: 1fr 100px 3em;\n  /* template rows/columns with named grid lines */\n  grid-template-columns:\n    [wide-start] 1fr\n    [main-start] 500px\n    [main-end] 1fr\n    [wide-end];\n  grid-template-rows:\n    [top] 1fr\n    [middle] 1fr\n    [bottom];\n  /* template rows/columns with functions */\n  grid-template-columns: minmax(1em, 1fr) minmax(1em, 80ch) minmax(1em, 1fr);\n  /* getting really busy with named lines + functions */\n  grid-template-columns:\n    [full-start] minmax(1em, 1fr)\n    [main-start] minmax(1em, 80ch)\n    [main-end] minmax(1em, 1fr)\n    [full-end];\n\n  grid-template-areas:\n    \"header header header\"\n    \"main   main   sidebar\"\n    \"main   main   sidebar2\"\n    \"footer footer footer\";\n\n  /* Shorthand for grid-template-rows, grid-template-columns, and grid-template\n     areas. In one. This can get really crazy. */\n  grid-template:\n    [row1-start] \"header header header\" 25px [row1-end]\n    [row2-start] \"footer footer footer\" 25px [row2-end]\n    / auto 50px auto;\n\n  /* The. Worst. This one is shorthand for like everything here smashed into one. But rarely will you actually specify EVERYTHING. */\n  grid:\n    [row1-start] \"header header header\" 25px [row1-end]\n    [row2-start] \"footer footer footer\" 25px [row2-end]\n    / auto 50px auto;\n  /* simpler use case: */\n  grid: 200px auto / 1fr auto 1fr;\n\n  /* Okay, the the worst of it. The simpler syntaxes: */\n\n  grid-row-gap: 2em;\n  grid-column-gap: 1em;\n  /* shorthand for grid-row-gap + grid-column-gap: */\n  grid-gap: 2em 1em;\n\n  grid-auto-columns: 1fr;\n  grid-auto-rows: 1fr;\n}\n\n.container > .item {\n  grid-column-start: 1;\n  grid-column-end: 2;\n  grid-row-start: -2;\n  grid-row-end: -1;\n\n  /* shorthands for the above: */\n  grid-column: 1 / 2;\n  grid-column: main;\n  grid-row: -2 / span 1;\n  grid-row: footer;\n\n  grid-area: main;\n  grid-area: 1 / main-start / 3 / main-end;\n}");
}
