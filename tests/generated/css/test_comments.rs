#[allow(unused_imports)]
use anyhow::Result;
#[allow(unused_imports)]
use pretty_assertions::assert_eq;
#[allow(unused_imports)]
use rust_prettier::PrettyPrinterBuilder;
#[allow(dead_code)]
static INFINITY: usize = usize::MAX;
#[test]
fn test_crlf_css_format_1_1ebcb736() -> Result<()> {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("css")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("/*\n * Comment 1\n */\n#header {\n    /*\n     * Comment 2\n     */\n    color: red;\n}\n\n@media only screen and (max-width: 600px) {\n    /*\n     * Comment 3\n     */\n    body {\n        background-color: lightblue; /* Comment 4 */\n        color: red; /* Comment 5 */\n    }\n}") ? ;
    assert_eq ! (formatted , "/*\n * Comment 1\n */\n#header {\n  /*\n     * Comment 2\n     */\n  color: red;\n}\n\n@media only screen and (max-width: 600px) {\n  /*\n     * Comment 3\n     */\n  body {\n    background-color: lightblue; /* Comment 4 */\n    color: red; /* Comment 5 */\n  }\n}");
    Ok(())
}
#[test]
fn test_at_rules_css_format_1_b7d1e4c3() -> Result<()> {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("css")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("@charset \"utf-8\"; /* comment 1 */\n\n@import /* comment 2 */ url(\"fineprint.css\") /* comment 3 */ print /* comment 4 */; /* comment 5 */\n@import /* comment 6 */ url(\"bluish.css\") /* comment 7 */ projection /* comment 8 */, /* comment 9 */ tv /* comment 10 */;\n/* comment 11 */ @import /* comment 12 */\n    /* comment 13 */ url(\"bluish.css\") /* comment 14 */\n    /* comment 15 */ projection /* comment 16 */,\n    /* comment 17 */ tv /* comment 18 */; /* comment 19 */\n/* comment 20 */\n@import/* comment 21 */url(\"bluish.css\")/* comment 22 */projection/* comment 23 */,/* comment 24 */tv/* comment 25 */;\n@import /* comment 26 */'custom.css'/* comment 27 */;/* comment 28 */\n@import /* comment 29 */ url('landscape.css') /* comment 30 */ screen /* comment 31 */ and /* comment 32 */ (/* comment 33 */orientation/* comment 34 */:/* comment 35 */landscape/* comment 36 */)/* comment 37 */;\n\n@namespace /* comment 38 */ url(http://www.w3.org/1999/xhtml) /* comment 39 */ ;\n@namespace /* comment 40 */ svg /* comment 41 */ url(http://www.w3.org/2000/svg) /* comment 42 */;\n\n@keyframes /* comment 43 */ slidein /* comment 44 */ {}\n\n/* comment 45 */ @font-feature-values /* comment 46 */ Font Two /* comment 47 */ { /* comment 48 */\n    /* comment 49 */ @styleset /* comment 50 */ { /* comment 51 */\n        nice-style: 4;\n    /* comment 52 */ } /* comment 53 */\n/* comment 54 */ }  /* comment 55 */\n\n/* comment 56 */ @counter-style /* comment 57 */ thumbs /* comment 58 */ {}\n\n/* comment 59 */ @viewport /* comment 60 */ {}\n\n@page /* comment 61 */ {}\n@page /* comment 62 */ :first /* comment 63 */ {}\n@page /* comment 64 */ vertical /* comment 65 */ {}\n\n/* comment 66 */ @media /* comment 67 */ print /* comment 68 */ {}\n@media /* comment 69 */ screen /* comment 70 */ , /* comment 71 */ print /* comment 72 */ {} /* comment 73 */\n@media /* comment 74 */ only /* comment 75 */ screen /* comment 76 */ and /* comment 77 */ ( /* comment 78 */ min-width /* comment 79 */ : /* comment 80 */ 320px /* comment 81 */ ) /* comment 82 */ and /* comment 83 */ ( /* comment 84 */ max-width /* comment 85 */ : /* comment 86 */ 480px /* comment 87 */ ) /* comment 88 */ and /* comment 89 */ ( /* comment 90 */ resolution /* comment 91 */ : /* comment 92 */ 150dpi /* comment 93 */ ) /* comment 94 */ {}\n@media/* comment 95 */only/* comment 96 */screen/* comment 97 */and/* comment 98 */(/* comment 99 */min-width/* comment 100 */:/* comment 101 */320px/* comment 102 */)/* comment 103 */and/* comment 104 */(/* comment 105 */max-width/* comment 106 */:/* comment 107 */480px/* comment 108 */)/* comment 109 */and/* comment 110 */(/* comment 111 */resolution/* comment 112 */:/* comment 113 */150dpi/* comment 114 */)/* comment 115 */{}\n/* comment 116 */@media/* comment 117 */\n    /* comment 118 */only/* comment 119 */\n    /* comment 120 */screen/* comment 121 */\n    /* comment 122 */and/* comment 123 */\n    /* comment 124 */(/* comment 125 */\n    /* comment 126 */min-width/* comment 127 */\n    /* comment 128 */:/* comment 129 */\n    /* comment 130 */320px/* comment 131 */\n    /* comment 132 */)/* comment 133 */\n    /* comment 134 */and/* comment 135 */\n    /* comment 136 */(/* comment 137 */\n    /* comment 138 */max-width/* comment 139 */\n    /* comment 140 */:/* comment 141 */\n    /* comment 142 */480px/* comment 143 */\n    /* comment 144 */)/* comment 145 */\n    /* comment 146 */and/* comment 147 */\n    /* comment 148 */(/* comment 149 */\n    /* comment 150 */resolution/* comment 151 */\n    /* comment 152 */:/* comment 153 */\n    /* comment 154 */150dpi/* comment 155 */\n    /* comment 156 */)/* comment 157 */\n    /* comment 158 */{}/* comment 159 */\n\n@supports /* comment 160 */ ( /* comment 161 */ display /* comment 162 */ : /* comment 163 */ flex /* comment 164 */ ) /* comment 165 */ {}\n@supports /* comment 166 */ not /* comment 167 */ ( /* comment 168 */ display /* comment 169 */ : /* comment 170 */ flex /* comment 171 */ ) /* comment 172 */ {}\n@supports /* comment 173 */ (/* comment 174 */ display /* comment 175 */ : /* comment 176 */ table-cell /* comment 177 */ ) /* comment 178 */ and /* comment 179 */ ( /* comment 180 */ display /* comment 181 */ : /* comment 182 */ list-item /* comment 183 */ ) /* comment 184 */ and /* comment 185 */ ( /* comment 186 */display /* comment 187 */ : /* comment 188 */ run-in /* comment 189 */ ) /* comment 190 */ {}\n@supports /* comment 191 */ (/* comment 192 */ --foo /* comment 193 */ : /* comment 194 */ green /* comment 195 */ ) /* comment 196 */ {}\n\n/* comment 197 */ @supports /* comment 198 */ ( /* comment 199 */ display /* comment 200 */ : /* comment 201 */ flex /* comment 202 */ ) /* comment 203 */ {\n    /* comment 204 */ @media /* comment 205 */ screen /* comment 206 */ and /* comment 207 */ ( /* comment 208 */ min-width /* comment 209 */ : /* comment 210 */ 900px /* comment 211 */ ) /* comment 212 */ {\n    /* comment 213 */ } /* comment 214 */\n/* comment 215 */ } /* comment 216 */\n") ? ;
    assert_eq ! (formatted , "@charset \"utf-8\"; /* comment 1 */\n\n@import /* comment 2 */ url(\"fineprint.css\") /* comment 3 */ print\n  /* comment 4 */; /* comment 5 */\n@import /* comment 6 */ url(\"bluish.css\") /* comment 7 */ projection\n    /* comment 8 */,\n  /* comment 9 */ tv /* comment 10 */;\n/* comment 11 */\n@import /* comment 12 */ /* comment 13 */ url(\"bluish.css\") /* comment 14 */\n    /* comment 15 */ projection /* comment 16 */,\n  /* comment 17 */ tv /* comment 18 */; /* comment 19 */\n/* comment 20 */\n@import /* comment 21 */ url(\"bluish.css\") /* comment 22 */ projection\n    /* comment 23 */,\n  /* comment 24 */ tv /* comment 25 */;\n@import /* comment 26 */ \"custom.css\" /* comment 27 */; /* comment 28 */\n@import /* comment 29 */ url(\"landscape.css\") /* comment 30 */ screen\n  /* comment 31 */ and /* comment 32 */\n  (\n    /* comment 33 */ orientation /* comment 34 */: /* comment 35 */ landscape\n      /* comment 36 */\n  )\n  /* comment 37 */;\n\n@namespace /* comment 38 */ url(http://www.w3.org/1999/xhtml) /* comment 39 */;\n@namespace /* comment 40 */ svg /* comment 41 */ url(http://www.w3.org/2000/svg) /* comment 42 */;\n\n@keyframes /* comment 43 */ slidein /* comment 44 */ {\n}\n\n/* comment 45 */\n@font-feature-values /* comment 46 */ Font Two /* comment 47 */ {\n  /* comment 48 */\n  /* comment 49 */\n  @styleset /* comment 50 */ {\n    /* comment 51 */\n    nice-style: 4;\n    /* comment 52 */\n  } /* comment 53 */\n  /* comment 54 */\n} /* comment 55 */\n\n/* comment 56 */\n@counter-style /* comment 57 */ thumbs /* comment 58 */ {\n}\n\n/* comment 59 */\n@viewport /* comment 60 */ {\n}\n\n@page /* comment 61 */ {\n}\n@page /* comment 62 */ :first /* comment 63 */ {\n}\n@page /* comment 64 */ vertical /* comment 65 */ {\n}\n\n/* comment 66 */\n@media /* comment 67 */ print /* comment 68 */ {\n}\n@media /* comment 69 */ screen /* comment 70 */,\n  /* comment 71 */ print /* comment 72 */ {\n} /* comment 73 */\n@media /* comment 74 */ only /* comment 75 */ screen /* comment 76 */ and /* comment 77 */ (/* comment 78 */ min-width /* comment 79 */: /* comment 80 */ 320px /* comment 81 */) /* comment 82 */ and /* comment 83 */ (/* comment 84 */ max-width /* comment 85 */: /* comment 86 */ 480px /* comment 87 */) /* comment 88 */ and /* comment 89 */ (/* comment 90 */ resolution /* comment 91 */: /* comment 92 */ 150dpi /* comment 93 */) /* comment 94 */ {\n}\n@media /* comment 95 */only/* comment 96 */screen/* comment 97 */and/* comment 98 */(/* comment 99 */min-width/* comment 100 */:/* comment 101 */320px/* comment 102 */) /* comment 103 */and/* comment 104 */(/* comment 105 */max-width/* comment 106 */:/* comment 107 */480px/* comment 108 */) /* comment 109 */and/* comment 110 */(/* comment 111 */resolution/* comment 112 */:/* comment 113 */150dpi/* comment 114 */) /* comment 115 */ {\n}\n/* comment 116 */\n@media /* comment 117 */ /* comment 118 */only/* comment 119 */ /* comment 120 */screen/* comment 121 */ /* comment 122 */and/* comment 123 */ /* comment 124 */(/* comment 125 */\n    /* comment 126 */min-width/* comment 127 */\n    /* comment 128 */:/* comment 129 */\n    /* comment 130 */320px/* comment 131 */\n    /* comment 132 */) /* comment 133 */ /* comment 134 */and/* comment 135 */ /* comment 136 */(/* comment 137 */\n    /* comment 138 */max-width/* comment 139 */\n    /* comment 140 */:/* comment 141 */\n    /* comment 142 */480px/* comment 143 */\n    /* comment 144 */) /* comment 145 */ /* comment 146 */and/* comment 147 */ /* comment 148 */(/* comment 149 */\n    /* comment 150 */resolution/* comment 151 */\n    /* comment 152 */:/* comment 153 */\n    /* comment 154 */150dpi/* comment 155 */\n    /* comment 156 */) /* comment 157 */ /* comment 158 */ {\n} /* comment 159 */\n\n@supports /* comment 160 */\n  (\n    /* comment 161 */ display /* comment 162 */: /* comment 163 */ flex\n      /* comment 164 */\n  )\n  /* comment 165 */ {\n}\n@supports /* comment 166 */ not /* comment 167 */\n  (\n    /* comment 168 */ display /* comment 169 */: /* comment 170 */ flex\n      /* comment 171 */\n  )\n  /* comment 172 */ {\n}\n@supports /* comment 173 */\n  (\n    /* comment 174 */ display /* comment 175 */: /* comment 176 */ table-cell\n      /* comment 177 */\n  )\n  /* comment 178 */ and /* comment 179 */\n  (\n    /* comment 180 */ display /* comment 181 */: /* comment 182 */ list-item\n      /* comment 183 */\n  )\n  /* comment 184 */ and /* comment 185 */\n  (\n    /* comment 186 */ display /* comment 187 */: /* comment 188 */ run-in\n      /* comment 189 */\n  )\n  /* comment 190 */ {\n}\n@supports /* comment 191 */\n  (\n    /* comment 192 */ --foo /* comment 193 */: /* comment 194 */ green\n      /* comment 195 */\n  )\n  /* comment 196 */ {\n}\n\n/* comment 197 */\n@supports /* comment 198 */\n  (\n    /* comment 199 */ display /* comment 200 */: /* comment 201 */ flex\n      /* comment 202 */\n  )\n  /* comment 203 */ {\n  /* comment 204 */\n  @media /* comment 205 */ screen /* comment 206 */ and /* comment 207 */ (/* comment 208 */ min-width /* comment 209 */: /* comment 210 */ 900px /* comment 211 */) /* comment 212 */ {\n    /* comment 213 */\n  } /* comment 214 */\n  /* comment 215 */\n} /* comment 216 */");
    Ok(())
}
#[test]
fn test_block_css_format_1_f658e26b() -> Result<()> {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("css")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer.format("/* Kikoo */\n/**\n * Kikoo\n */")?;
    assert_eq!(formatted, "/* Kikoo */\n/**\n * Kikoo\n */");
    Ok(())
}
#[test]
fn test_bug_css_format_1_7742b546() -> Result<()> {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("css")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer.format("/* Catchall baseclass */\n.glyphicon {\n}")?;
    assert_eq!(formatted, "/* Catchall baseclass */\n.glyphicon {\n}");
    Ok(())
}
#[test]
fn test_custom_properties_css_format_1_d9f48b0b() -> Result<()> {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("css")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("   /* comment 1 */\n       :root {\n  /* comment 2 */\n  --prop : {\n  /* comment 3 */\ncolor/* comment 4 */: /* comment 5 */#fff/* comment 6 */;/* comment 7 */\n  /* comment 8 */\nfont-size: 12px;\n  /* comment 9 */\n  };\n  /* comment 10 */\n}\n     /* comment 11 */") ? ;
    assert_eq ! (formatted , "/* comment 1 */\n:root {\n  /* comment 2 */\n  --prop: {\n    /* comment 3 */\n    color/* comment 4 */: /* comment 5 */ #fff /* comment 6 */; /* comment 7 */\n    /* comment 8 */\n    font-size: 12px;\n    /* comment 9 */\n  };\n  /* comment 10 */\n}\n/* comment 11 */");
    Ok(())
}
#[test]
fn test_declaration_css_format_1_3e51f647() -> Result<()> {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("css")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("a {\n    /* comment 1 */\n    /* comment 2 */ padding /* comment 3 */ : /* comment 4 */ 10px /* comment 5 */ 10px /* comment 6 */; /* comment 7 */\n    /* comment 8 */\n    transform: translate(/* comment 9 */ 10px /* comment 10 */);\n    color: /* comment 11 */ red /* comment 12 */ !important /* comment 13 */ ; /* comment 14 */\n    /* comment 15 */\n}\n\n@font-face {\n    font-family: \"Prettier\";\n    src: /* comment 16 */ local(/* comment 17 */ \"Prettier\" /* comment 18 */), /* comment 19 */\n        /* comment 20 */ url(\"http://prettier.com/font.woff\") /* comment 21 */ ; /* comment 22 */\n}\n\n.foo {/* comment 23 */color/* comment 24 */:/* comment 25 */blue/* comment 26 */;/* comment 27 */transform/* comment 28 */:/* comment 29 */translate(/* comment 30 */10px/* comment 31 */)/* comment 32 */;/* comment 33 */}\n.foo { /* comment 34 */ color /* comment 35 */ : /* comment 36 */ blue /* comment 37 */ ; /* comment 38 */ transform /* comment 39 */ : /* comment 40 */ translate( /* comment 41 */ 10px /* comment 42 */ ) /* comment 43 */ ; /* comment 44 */ }\n.foo {\n    /* comment 45 */\n    /* comment 46 */ color  /* comment 47 */\n    /* comment 48 */\n    /* comment 49 */ :  /* comment 50 */\n    /* comment 51 */\n    /* comment 52 */ blue  /* comment 53 */\n    /* comment 54 */\n    /* comment 55 */ ;  /* comment 56 */\n    /* comment 57 */\n    /* comment 58 */ transform  /* comment 59 */\n    /* comment 60 */\n    /* comment 61 */ : /* comment 62 */\n    /* comment 63 */\n    /* comment 64 */ translate(  /* comment 65 */\n        /* comment 66 */\n        /* comment 67 */ 10px  /* comment 68 */\n        /* comment 69 */\n    /* comment 70 */ ) /* comment 71 */\n    /* comment 72 */\n    /* comment 73 */ ;  /* comment 74 */\n    /* comment 75 */\n}\n\nbody {/* comment 76 */}\nbody { /* comment 77 */ }\nbody\n{\n    /* comment 78 */\n}\nbody\n{\n    /* comment 79 */\n}\nbody\n{\n\n    /* comment 80 */\n\n}\n\n.tab-bar {\n    .tab {} /* comment 81 */\n}\n\n.selector {\n    /* comment 82 */\n    position: absolute;\n\n    /* comment 83 */\n    display: inline-block;\n\n    /* comment 84 */\n    background: #000;\n}") ? ;
    assert_eq ! (formatted , "a {\n  /* comment 1 */\n  /* comment 2 */\n  padding/* comment 3 */ : /* comment 4 */ 10px /* comment 5 */ 10px\n    /* comment 6 */; /* comment 7 */\n  /* comment 8 */\n  transform: translate(/* comment 9 */ 10px /* comment 10 */);\n  color: /* comment 11 */ red /* comment 12 */ !important /* comment 13 */ ; /* comment 14 */\n  /* comment 15 */\n}\n\n@font-face {\n  font-family: \"Prettier\";\n  src: /* comment 16 */\n    local(/* comment 17 */ \"Prettier\" /* comment 18 */),\n    /* comment 19 */ /* comment 20 */ url(\"http://prettier.com/font.woff\")\n      /* comment 21 */; /* comment 22 */\n}\n\n.foo {\n  /* comment 23 */\n  color/* comment 24 */:/* comment 25 */ blue /* comment 26 */; /* comment 27 */\n  transform/* comment 28 */:/* comment 29 */ translate(\n      /* comment 30 */ 10px /* comment 31 */\n    )\n    /* comment 32 */; /* comment 33 */\n}\n.foo {\n  /* comment 34 */\n  color/* comment 35 */ : /* comment 36 */ blue /* comment 37 */; /* comment 38 */\n  transform/* comment 39 */ : /* comment 40 */ translate(\n      /* comment 41 */ 10px /* comment 42 */\n    )\n    /* comment 43 */; /* comment 44 */\n}\n.foo {\n  /* comment 45 */\n  /* comment 46 */\n  color/* comment 47 */\n    /* comment 48 */\n    /* comment 49 */ :  /* comment 50 */\n    /* comment 51 */\n    /* comment 52 */ blue\n    /* comment 53 */ /* comment 54 */ /* comment 55 */; /* comment 56 */\n  /* comment 57 */\n  /* comment 58 */\n  transform/* comment 59 */\n    /* comment 60 */\n    /* comment 61 */ : /* comment 62 */\n    /* comment 63 */\n    /* comment 64 */ translate(\n      /* comment 65 */ /* comment 66 */ /* comment 67 */ 10px /* comment 68 */\n        /* comment 69 */ /* comment 70 */\n    )\n    /* comment 71 */ /* comment 72 */ /* comment 73 */; /* comment 74 */\n  /* comment 75 */\n}\n\nbody {\n  /* comment 76 */\n}\nbody {\n  /* comment 77 */\n}\nbody {\n  /* comment 78 */\n}\nbody {\n  /* comment 79 */\n}\nbody {\n  /* comment 80 */\n}\n\n.tab-bar {\n  .tab {\n  } /* comment 81 */\n}\n\n.selector {\n  /* comment 82 */\n  position: absolute;\n\n  /* comment 83 */\n  display: inline-block;\n\n  /* comment 84 */\n  background: #000;\n}");
    Ok(())
}
#[test]
fn test_prettier_ignore_css_format_1_a4fd5ff7() -> Result<()> {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("css")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer
        .format("foo {\n  /* prettier-ignore */\n  thing:     foo;\n  -ms-thing: foo;\n}")?;
    assert_eq!(
        formatted,
        "foo {\n  /* prettier-ignore */\n  thing:     foo;\n  -ms-thing: foo;\n}"
    );
    Ok(())
}
#[test]
fn test_selectors_css_format_1_55476360() -> Result<()> {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("css")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format (".powerPathNavigator .helm button.pressedButton, /* comment 1 */\n.powerPathNavigator .helm button:active:not(.disabledButton),\n.powerPathNavigator table.powerPathInfo th:active,\n.powerPathNavigator table.powerPathInfo th:active + th:last-child {\n}\n\n/* comment 2 */\n.powerPathNavigator .helm button.pressedButton,\n.powerPathNavigator .helm button:active:not(.disabledButton) {\n}\n\n.foo,\n/* comment 3 */\n.bar {\n   display: block;\n}\n\n/* comment 4 */\n/* comment 5 */ .field /* comment 6 */\n/* comment 7 */\n/* comment 8 */ { /* comment 9 */\n    /* comment 10 */\n    background: green;\n    /* comment 11 */\n/* comment 12 */ } /* comment 13 */\n/* comment 14 */\n\n/* comment 15 */ .element /* comment 16 */ , /* comment 17 */ .element /* comment 18 */ {}\n/* comment 19 */\n.element\n/* comment 20 */\n,\n/* comment 21 */\n.element\n/* comment 22 */\n{}\n\n/* comment 23 */ .element /* comment 24 */ .element /* comment 25 */ {}\n/* comment 26 */\n.element\n/* comment 27 */\n.element\n/* comment 28 */\n{}\n\n/* comment 29 */ .element /* comment 30 */ > /* comment 31 */ .element /* comment 32 */ {}\n/* comment 33 */\n.element\n/* comment 34 */\n>\n/* comment 35 */\n.element\n/* comment 36 */\n{}\n\n/* comment 37 */ .element /* comment 38 */ + /* comment 39 */ .element /* comment 40 */ {}\n/* comment 41 */\n.element\n/* comment 42 */\n+\n/* comment 43 */\n.element\n/* comment 44 */\n{}\n\n/* comment 45 */ .element /* comment 46 */ ~ /* comment 47 */ .element /* comment 48 */ {}\n/* comment 49 */\n.element\n/* comment 50 */\n~\n/* comment 51 */\n.element\n/* comment 52 */\n{}\n\n/* comment 53 */ .element /* comment 54 */ >>> /* comment 55 */ .element /* comment 56 */ {}\n/* comment 57 */\n.element\n/* comment 58 */\n>>>\n/* comment 59 */\n.element\n/* comment 60 */\n{}\n\na[/* comment 61 */target/* comment 62 */] {}\na[/* comment 63 */target/* comment 64 */=/* comment 65 */\"_blank\"/* comment 66 */] {}\na[/* comment 67 */target/* comment 68 */~=/* comment 69 */\"_blank\"/* comment 70 */] {}\na[/* comment 71 */target/* comment 72 */|=/* comment 73 */\"_blank\"/* comment 74 */] {}\na[/* comment 75 */target/* comment 76 */^=/* comment 77 */\"_blank\"/* comment 78 */] {}\na[/* comment 79 */target/* comment 80 */$=/* comment 81 */\"_blank\"/* comment 82 */] {}\na[/* comment 83 */target/* comment 84 */*=/* comment 85 */\"_blank\"/* comment 86 */] {}\n\n[/* comment 87 */foo/* comment 88 */|/* comment 89 */att/* comment 90 */=/* comment 91 */val/* comment 92 */] {}\n[/* comment 93 */*/* comment 94 */|/* comment 95 */att/* comment 96 */] {}\n[/* comment 97 */|/* comment 98 */att/* comment 99 */] {}\n\na/* comment 100 */:/* comment 101 */active {}\n\na/* comment 102 */::/* comment 103 */after {}\n\np:lang(/* comment 104 */it/* comment 105 */) {}\n\nspan:nth-child(/* comment 106 */2n/* comment 107 */+/* comment 108 */1/* comment 109 */) {}\n\n/* comment 110 */::-webkit-progress-bar {}\n\n/* comment 111 */:matches(/* comment 112 */section/* comment 113 */,/* comment 114 */ article/* comment 115 */) /* comment 116 */ h1 {}\n\n/* comment 117 */*/* comment 118 */ {}\n\n/* comment 119 */#container/* comment 120 */{}\n\n/* comment 121 */.error/* comment 122 */{}\n\n/* comment 123 */a/* comment 124 */{}\n\ninput:not(/* comment 125 */[/* comment 126 */disabled/* comment 127 */]/* comment 128 */) {}\n\n/* comment 129 */h1/* comment 130 */, /* comment 131 */h2/* comment 132 */,/* comment 133 */ h3/* comment 134 */ {}\n\n/* comment 135 */.phone/* comment 136 */ { /* comment 137 */\n        /* comment 138 */&_title/* comment 139 */ { /* comment 140 */\n        width: 500px;\n        /* comment 141 */body.is_dark/* comment 142 */ & /* comment 143 */{ /* comment 144 */\n            color: white;\n        /* comment 145 */ } /* comment 146 */\n    /* comment 147 */ } /* comment 148 */\n\n    /* comment 149 */ img/* comment 150 */ { /* comment 151 */\n        display: block;\n    /* comment 152 */ } /* comment 153 */\n/* comment 154 */\n} /* comment 155 */\n\n@media (max-width: 500px) {\n    /* comment 156 */ a /* comment 157 */ { /* comment 158 */\n        /* comment 159 */b/* comment 160 */ {/* comment 161 */} /* comment 162 */\n    /* comment 163 */ } /* comment 164 */\n/* comment 165 */ } /* comment 166 */\n\n/* comment 167 */ article /* comment 168 */ :--heading /* comment 169 */ + /* comment 170 */ p /* comment 171 */ {}\n\n/* comment 172 */ .foo /* comment 173 */ :global /* comment 174 */.bar /* comment 175 */{}\n/* comment 176 */ .foo /* comment 177 */ :global(/* comment 178 */.bar/* comment 179 */) /* comment 180 */ .baz /* comment 181 */ {}\n\n/* comment 182 */ .foo /* comment 183 */ :local /* comment 184 */ .bar /* comment 185 */ {}\n/* comment 186 */ .foo /* comment 187 */ :local(/* comment 188 */.foo/* comment 189 */) /* comment 190 */ .bar /* comment 191 */ {}\n\n/* custom properties set & @apply rule */\n:root {\n    /* comments 192 */ --centered /* comments 193 */ : /* comments 194 */ {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    };\n}") ? ;
    assert_eq ! (formatted , ".powerPathNavigator .helm button.pressedButton, /* comment 1 */\n.powerPathNavigator .helm button:active:not(.disabledButton),\n.powerPathNavigator table.powerPathInfo th:active,\n.powerPathNavigator table.powerPathInfo th:active + th:last-child {\n}\n\n/* comment 2 */\n.powerPathNavigator .helm button.pressedButton,\n.powerPathNavigator .helm button:active:not(.disabledButton) {\n}\n\n.foo,\n/* comment 3 */\n.bar {\n  display: block;\n}\n\n/* comment 4 */\n/* comment 5 */\n.field /* comment 6 */\n/* comment 7 */\n/* comment 8 */ {\n  /* comment 9 */\n  /* comment 10 */\n  background: green;\n  /* comment 11 */\n  /* comment 12 */\n} /* comment 13 */\n/* comment 14 */\n\n/* comment 15 */\n.element /* comment 16 */ , /* comment 17 */ .element /* comment 18 */ {\n}\n/* comment 19 */\n.element\n/* comment 20 */\n,\n/* comment 21 */\n.element\n/* comment 22 */ {\n}\n\n/* comment 23 */\n.element /* comment 24 */ .element /* comment 25 */ {\n}\n/* comment 26 */\n.element\n/* comment 27 */\n.element\n/* comment 28 */ {\n}\n\n/* comment 29 */\n.element /* comment 30 */ > /* comment 31 */ .element /* comment 32 */ {\n}\n/* comment 33 */\n.element\n/* comment 34 */\n>\n/* comment 35 */\n.element\n/* comment 36 */ {\n}\n\n/* comment 37 */\n.element /* comment 38 */ + /* comment 39 */ .element /* comment 40 */ {\n}\n/* comment 41 */\n.element\n/* comment 42 */\n+\n/* comment 43 */\n.element\n/* comment 44 */ {\n}\n\n/* comment 45 */\n.element /* comment 46 */ ~ /* comment 47 */ .element /* comment 48 */ {\n}\n/* comment 49 */\n.element\n/* comment 50 */\n~\n/* comment 51 */\n.element\n/* comment 52 */ {\n}\n\n/* comment 53 */\n.element /* comment 54 */ >>> /* comment 55 */ .element /* comment 56 */ {\n}\n/* comment 57 */\n.element\n/* comment 58 */\n>>>\n/* comment 59 */\n.element\n/* comment 60 */ {\n}\n\na[/* comment 61 */target/* comment 62 */] {\n}\na[/* comment 63 */target/* comment 64 */=/* comment 65 */\"_blank\"/* comment 66 */] {\n}\na[/* comment 67 */target/* comment 68 */~=/* comment 69 */\"_blank\"/* comment 70 */] {\n}\na[/* comment 71 */target/* comment 72 */|=/* comment 73 */\"_blank\"/* comment 74 */] {\n}\na[/* comment 75 */target/* comment 76 */^=/* comment 77 */\"_blank\"/* comment 78 */] {\n}\na[/* comment 79 */target/* comment 80 */$=/* comment 81 */\"_blank\"/* comment 82 */] {\n}\na[/* comment 83 */target/* comment 84 */*=/* comment 85 */\"_blank\"/* comment 86 */] {\n}\n\n[/* comment 87 */foo/* comment 88 */|/* comment 89 */att/* comment 90 */=/* comment 91 */val/* comment 92 */] {\n}\n[/* comment 93 */*/* comment 94 */|/* comment 95 */att/* comment 96 */] {\n}\n[/* comment 97 */|/* comment 98 */att/* comment 99 */] {\n}\n\na/* comment 100 */:/* comment 101 */active {\n}\n\na/* comment 102 */::/* comment 103 */after {\n}\n\np:lang(/* comment 104 */it/* comment 105 */) {\n}\n\nspan:nth-child(/* comment 106 */2n/* comment 107 */+/* comment 108 */1/* comment 109 */) {\n}\n\n/* comment 110 */\n::-webkit-progress-bar {\n}\n\n/* comment 111 */\n:matches(/* comment 112 */section/* comment 113 */,/* comment 114 */ article/* comment 115 */) /* comment 116 */ h1 {\n}\n\n/* comment 117 */\n*/* comment 118 */ {\n}\n\n/* comment 119 */\n#container/* comment 120 */ {\n}\n\n/* comment 121 */\n.error/* comment 122 */ {\n}\n\n/* comment 123 */\na/* comment 124 */ {\n}\n\ninput:not(/* comment 125 */[/* comment 126 */disabled/* comment 127 */]/* comment 128 */) {\n}\n\n/* comment 129 */\nh1/* comment 130 */, /* comment 131 */h2/* comment 132 */,/* comment 133 */ h3/* comment 134 */ {\n}\n\n/* comment 135 */\n.phone/* comment 136 */ {\n  /* comment 137 */\n  /* comment 138 */\n  &_title/* comment 139 */ {\n    /* comment 140 */\n    width: 500px;\n    /* comment 141 */\n    body.is_dark/* comment 142 */ & /* comment 143 */ {\n      /* comment 144 */\n      color: white;\n      /* comment 145 */\n    } /* comment 146 */\n    /* comment 147 */\n  } /* comment 148 */\n\n  /* comment 149 */\n  img/* comment 150 */ {\n    /* comment 151 */\n    display: block;\n    /* comment 152 */\n  } /* comment 153 */\n  /* comment 154 */\n} /* comment 155 */\n\n@media (max-width: 500px) {\n  /* comment 156 */\n  a /* comment 157 */ {\n    /* comment 158 */\n    /* comment 159 */\n    b/* comment 160 */ {\n      /* comment 161 */\n    } /* comment 162 */\n    /* comment 163 */\n  } /* comment 164 */\n  /* comment 165 */\n} /* comment 166 */\n\n/* comment 167 */\narticle /* comment 168 */ :--heading /* comment 169 */ + /* comment 170 */ p /* comment 171 */ {\n}\n\n/* comment 172 */\n.foo /* comment 173 */ :global /* comment 174 */.bar /* comment 175 */ {\n}\n/* comment 176 */\n.foo /* comment 177 */ :global(/* comment 178 */.bar/* comment 179 */) /* comment 180 */ .baz /* comment 181 */ {\n}\n\n/* comment 182 */\n.foo /* comment 183 */ :local /* comment 184 */ .bar /* comment 185 */ {\n}\n/* comment 186 */\n.foo /* comment 187 */ :local(/* comment 188 */.foo/* comment 189 */) /* comment 190 */ .bar /* comment 191 */ {\n}\n\n/* custom properties set & @apply rule */\n:root {\n  /* comments 192 */\n  --centered/* comments 193 */ : /* comments 194 */ {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  };\n}");
    Ok(())
}
#[test]
fn test_source_map_css_format_1_0581a184() -> Result<()> {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("css")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer
        .format(".foo {\n    color: red;\n}\n\n/*# sourceMappingURL=file.css.map */")?;
    assert_eq!(
        formatted,
        ".foo {\n  color: red;\n}\n\n/*# sourceMappingURL=file.css.map */"
    );
    Ok(())
}
#[test]
fn test_types_css_format_1_475d0b05() -> Result<()> {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("css")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("/* This is a basic comment */\n\n/* ==========================================================================\n   This is a Section Comment\n   ========================================================================== */\n\n/*\n   This is a sub-section comment\n   ========================================================================== */\n\n/**\n * Short description using Doxygen-style comment format\n *\n * The first sentence of the long description starts here and continues on this\n * line for a while finally concluding here at the end of this paragraph.\n *\n * The long description is ideal for more detailed explanations and\n * documentation. It can include example HTML, URLs, or any other information\n * that is deemed necessary or useful.\n *\n * @tag This is a tag named 'tag'\n *\n * TODO: This is a todo statement that describes an atomic task to be completed\n *   at a later date. It wraps after 80 characters and following lines are\n *   indented by 2 spaces.\n */\n\n/**\n * TODO:\n *\n * => Write some code\n * => Make some lists\n *\n */\n\n/*\nspan {\n  color: blue;\n  font-size: 1.5em;\n}\n*/\n\n/*\n<small class=tooltip><span>Lorem ipsum dolor</span></small>\n*/") ? ;
    assert_eq ! (formatted , "/* This is a basic comment */\n\n/* ==========================================================================\n   This is a Section Comment\n   ========================================================================== */\n\n/*\n   This is a sub-section comment\n   ========================================================================== */\n\n/**\n * Short description using Doxygen-style comment format\n *\n * The first sentence of the long description starts here and continues on this\n * line for a while finally concluding here at the end of this paragraph.\n *\n * The long description is ideal for more detailed explanations and\n * documentation. It can include example HTML, URLs, or any other information\n * that is deemed necessary or useful.\n *\n * @tag This is a tag named 'tag'\n *\n * TODO: This is a todo statement that describes an atomic task to be completed\n *   at a later date. It wraps after 80 characters and following lines are\n *   indented by 2 spaces.\n */\n\n/**\n * TODO:\n *\n * => Write some code\n * => Make some lists\n *\n */\n\n/*\nspan {\n  color: blue;\n  font-size: 1.5em;\n}\n*/\n\n/*\n<small class=tooltip><span>Lorem ipsum dolor</span></small>\n*/");
    Ok(())
}
