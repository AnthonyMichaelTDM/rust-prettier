#[allow(unused_imports)]
use rust_prettier::PrettyPrinterBuilder;
#[allow(dead_code)]
static INFINITY: usize = usize::MAX;
#[test]
fn test_angularjs_html_bracket_spacingfalse_format_1_e80fcf32() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .bracket_spacing(false)
        .parser("html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div ng-if=\"$ctrl .shouldShowWarning&&!$ctrl.loading\">Warning!</div>\n\n<div\n\tclass=\"common--error-message\"\n\ttest-hook=\"upper-error-message\"\n\tng-if=\"!$ctrl.showsFormBelowPlain() && !!$ctrl.error.message && !($ctrl.error.kind === 'validator' && $ctrl.form.$valid && $ctrl.error.form === $ctrl.form)\"\n>\n\t<div ng-if=\"$ctrl.error.html\" ng-bind-html=\"$ctrl.error.message\"></div>\n\t<div ng-if=\"!$ctrl.error.html\" ng-bind=\"$ctrl.error.message\"></div>\n</div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div ng-if=\"$ctrl.shouldShowWarning && !$ctrl.loading\">Warning!</div>\n\n<div\n  class=\"common--error-message\"\n  test-hook=\"upper-error-message\"\n  ng-if=\"\n    !$ctrl.showsFormBelowPlain() &&\n    !!$ctrl.error.message &&\n    !(\n      $ctrl.error.kind === 'validator' &&\n      $ctrl.form.$valid &&\n      $ctrl.error.form === $ctrl.form\n    )\n  \"\n>\n  <div ng-if=\"$ctrl.error.html\" ng-bind-html=\"$ctrl.error.message\"></div>\n  <div ng-if=\"!$ctrl.error.html\" ng-bind=\"$ctrl.error.message\"></div>\n</div>");
}
#[test]
fn test_angularjs_html_html_whitespace_sensitivityignore_format_1_e80fcf32() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .html_whitespace_sensitivity("ignore")
        .parser("html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div ng-if=\"$ctrl .shouldShowWarning&&!$ctrl.loading\">Warning!</div>\n\n<div\n\tclass=\"common--error-message\"\n\ttest-hook=\"upper-error-message\"\n\tng-if=\"!$ctrl.showsFormBelowPlain() && !!$ctrl.error.message && !($ctrl.error.kind === 'validator' && $ctrl.form.$valid && $ctrl.error.form === $ctrl.form)\"\n>\n\t<div ng-if=\"$ctrl.error.html\" ng-bind-html=\"$ctrl.error.message\"></div>\n\t<div ng-if=\"!$ctrl.error.html\" ng-bind=\"$ctrl.error.message\"></div>\n</div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div ng-if=\"$ctrl.shouldShowWarning && !$ctrl.loading\">Warning!</div>\n\n<div\n  class=\"common--error-message\"\n  test-hook=\"upper-error-message\"\n  ng-if=\"\n    !$ctrl.showsFormBelowPlain() &&\n    !!$ctrl.error.message &&\n    !(\n      $ctrl.error.kind === 'validator' &&\n      $ctrl.form.$valid &&\n      $ctrl.error.form === $ctrl.form\n    )\n  \"\n>\n  <div ng-if=\"$ctrl.error.html\" ng-bind-html=\"$ctrl.error.message\"></div>\n  <div ng-if=\"!$ctrl.error.html\" ng-bind=\"$ctrl.error.message\"></div>\n</div>");
}
#[test]
fn test_angularjs_html_print_width_1_format_1_e80fcf32() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("html")
        .print_width(1)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div ng-if=\"$ctrl .shouldShowWarning&&!$ctrl.loading\">Warning!</div>\n\n<div\n\tclass=\"common--error-message\"\n\ttest-hook=\"upper-error-message\"\n\tng-if=\"!$ctrl.showsFormBelowPlain() && !!$ctrl.error.message && !($ctrl.error.kind === 'validator' && $ctrl.form.$valid && $ctrl.error.form === $ctrl.form)\"\n>\n\t<div ng-if=\"$ctrl.error.html\" ng-bind-html=\"$ctrl.error.message\"></div>\n\t<div ng-if=\"!$ctrl.error.html\" ng-bind=\"$ctrl.error.message\"></div>\n</div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div\n  ng-if=\"\n    $ctrl.shouldShowWarning &&\n    !$ctrl.loading\n  \"\n>\n  Warning!\n</div>\n\n<div\n  class=\"common--error-message\"\n  test-hook=\"upper-error-message\"\n  ng-if=\"\n    !$ctrl.showsFormBelowPlain() &&\n    !!$ctrl\n      .error\n      .message &&\n    !(\n      $ctrl\n        .error\n        .kind ===\n        'validator' &&\n      $ctrl\n        .form\n        .$valid &&\n      $ctrl\n        .error\n        .form ===\n        $ctrl.form\n    )\n  \"\n>\n  <div\n    ng-if=\"\n      $ctrl\n        .error\n        .html\n    \"\n    ng-bind-html=\"$ctrl.error.message\"\n  ></div>\n  <div\n    ng-if=\"\n      !$ctrl\n        .error\n        .html\n    \"\n    ng-bind=\"$ctrl.error.message\"\n  ></div>\n</div>");
}
#[test]
fn test_angularjs_html_trailing_commaes_5_format_1_e80fcf32() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("html")
        .print_width(80)
        .trailing_comma("es5")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div ng-if=\"$ctrl .shouldShowWarning&&!$ctrl.loading\">Warning!</div>\n\n<div\n\tclass=\"common--error-message\"\n\ttest-hook=\"upper-error-message\"\n\tng-if=\"!$ctrl.showsFormBelowPlain() && !!$ctrl.error.message && !($ctrl.error.kind === 'validator' && $ctrl.form.$valid && $ctrl.error.form === $ctrl.form)\"\n>\n\t<div ng-if=\"$ctrl.error.html\" ng-bind-html=\"$ctrl.error.message\"></div>\n\t<div ng-if=\"!$ctrl.error.html\" ng-bind=\"$ctrl.error.message\"></div>\n</div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div ng-if=\"$ctrl.shouldShowWarning && !$ctrl.loading\">Warning!</div>\n\n<div\n  class=\"common--error-message\"\n  test-hook=\"upper-error-message\"\n  ng-if=\"\n    !$ctrl.showsFormBelowPlain() &&\n    !!$ctrl.error.message &&\n    !(\n      $ctrl.error.kind === 'validator' &&\n      $ctrl.form.$valid &&\n      $ctrl.error.form === $ctrl.form\n    )\n  \"\n>\n  <div ng-if=\"$ctrl.error.html\" ng-bind-html=\"$ctrl.error.message\"></div>\n  <div ng-if=\"!$ctrl.error.html\" ng-bind=\"$ctrl.error.message\"></div>\n</div>");
}
#[test]
fn test_angularjs_html_trailing_commanone_format_1_e80fcf32() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("html")
        .print_width(80)
        .trailing_comma("none")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div ng-if=\"$ctrl .shouldShowWarning&&!$ctrl.loading\">Warning!</div>\n\n<div\n\tclass=\"common--error-message\"\n\ttest-hook=\"upper-error-message\"\n\tng-if=\"!$ctrl.showsFormBelowPlain() && !!$ctrl.error.message && !($ctrl.error.kind === 'validator' && $ctrl.form.$valid && $ctrl.error.form === $ctrl.form)\"\n>\n\t<div ng-if=\"$ctrl.error.html\" ng-bind-html=\"$ctrl.error.message\"></div>\n\t<div ng-if=\"!$ctrl.error.html\" ng-bind=\"$ctrl.error.message\"></div>\n</div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div ng-if=\"$ctrl.shouldShowWarning && !$ctrl.loading\">Warning!</div>\n\n<div\n  class=\"common--error-message\"\n  test-hook=\"upper-error-message\"\n  ng-if=\"\n    !$ctrl.showsFormBelowPlain() &&\n    !!$ctrl.error.message &&\n    !(\n      $ctrl.error.kind === 'validator' &&\n      $ctrl.form.$valid &&\n      $ctrl.error.form === $ctrl.form\n    )\n  \"\n>\n  <div ng-if=\"$ctrl.error.html\" ng-bind-html=\"$ctrl.error.message\"></div>\n  <div ng-if=\"!$ctrl.error.html\" ng-bind=\"$ctrl.error.message\"></div>\n</div>");
}
#[test]
fn test_attr_name_component_html_bracket_spacingfalse_format_1_6384c2da() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .bracket_spacing(false)
        .parser("component.html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer.format("<div someDirective itemType=\"x\"></div>");
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq!(formatted, "<div someDirective itemType=\"x\"></div>");
}
#[test]
fn test_attr_name_component_html_html_whitespace_sensitivityignore_format_1_6384c2da() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .html_whitespace_sensitivity("ignore")
        .parser("component.html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer.format("<div someDirective itemType=\"x\"></div>");
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq!(formatted, "<div someDirective itemType=\"x\"></div>");
}
#[test]
fn test_attr_name_component_html_print_width_1_format_1_6384c2da() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(1)
        .build()
        .unwrap();
    let formatted = pretty_printer.format("<div someDirective itemType=\"x\"></div>");
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq!(
        formatted,
        "<div\n  someDirective\n  itemType=\"x\"\n></div>"
    );
}
#[test]
fn test_attr_name_component_html_trailing_commaes_5_format_1_6384c2da() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(80)
        .trailing_comma("es5")
        .build()
        .unwrap();
    let formatted = pretty_printer.format("<div someDirective itemType=\"x\"></div>");
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq!(formatted, "<div someDirective itemType=\"x\"></div>");
}
#[test]
fn test_attr_name_component_html_trailing_commanone_format_1_6384c2da() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(80)
        .trailing_comma("none")
        .build()
        .unwrap();
    let formatted = pretty_printer.format("<div someDirective itemType=\"x\"></div>");
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq!(formatted, "<div someDirective itemType=\"x\"></div>");
}
#[test]
fn test_attributes_component_html_bracket_spacingfalse_format_1_32b37cb2() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .bracket_spacing(false)
        .parser("component.html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div\n    bindon-target=\" a | b : c:d :e \"\n    [(target)]=\" a | b : c:d :e \"\n    bind-target=\" a | b : c:d :e \"\n    [target]=\" a | b : c:d :e \"\n    [target]=\" a | pipe   \"\n    [target]=\" 0 - 1 \"\n    [target]=\" - 1 \"\n    [target]=\" a ? 1 : 2 \"\n    [target]=\" \"\n    [target]=\" a ( 1 ) ( 2 ) \"\n    [target]=\" a [ b ] \"\n    [target]=\" [ 1 ] \"\n    [target]=\" { 'a' : 1 } \"\n    [target]=\" { a : 1 } \"\n    [target]=\" {\n      trailingComma : 'notAllowed'\n    }\"\n    [target]=\" [\n      longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong\n    ]\"\n    [target]=\" true \"\n    [target]=\" undefined \"\n    [target]=\" null \"\n    [target]=\" ( 1 ) \"\n    [target]=\" 1 \"\n    [target]=\"  'hello' \"\n    [target]=\" a ( 1 , 2 ) \"\n    [target]=\" a . b ( 1 , 2 ) \"\n    [target]=\" x ! \"\n    [target]=\" ! x \"\n    [target]=\" ( ( a ) ) \"\n    [target]=\" a \"\n    [target]=\" a // hello \"\n    [target]=\" a . b \"\n    [target]=\" a ?. b \"\n    [target]=\" a ?. [b] \"\n    [target]=\" javascript : 'hello world' \"\n    [target]=\" a ?. b ( ) \"\n    [target]=\" a ?. b \"\n    [target]=\" this . a \"\n    on-target=\" a = 1 \"\n    (target)=\" a = 1 \"\n    (target)=\" a . b = 1 \"\n    (target)=\" a [ b ] = 1 \"\n    (target)=\" a // hello \"\n    (target)=\" a ; b \"\n    (event)=\"  0  \"\n    (event)=\"  a.b  \"\n    (event)=\"  a   ?.b  \"\n    (event)=\"  a?.[  b]  \"\n    (event)=\"  hello  \"\n    (event)=\"  hello()  \"\n    (event)=\"  a && b  \"\n    (event)=\"  a && b()  \"\n    (event)=\"  foo = $event  \"\n    (event)=\"  foo == $event  \"\n    *ngIf=\" something?true:false    \"\n    *ngIf=\" a | pipe   \"\n    *ngFor=\"  let     hero     of     heroes\"\n    *ngFor=\"  let    hero     of[1,2,3,666666666666666666666666666666666666]; let i=index\"\n    *ngFor=\"     let hero     of     heroes;     trackBy    :    trackByHeroes     \"\n    *ngFor=\" let     item   of   items   ;    index    as   i  ; trackBy  :     trackByFn\"\n    *ngFor=\"  let    hero     of heroes; let i  =  index\"\n    *ngFor=\"  let    hero     of heroes; value     myValue\"\n    *ngIf=\" condition  ;  else  elseBlock \"\n    *ngIf=\" condition  ;  then  thenBlock  else  elseBlock \"\n    *ngIf=\" condition  as  value  ;  else  elseBlock \"\n    *directive=\" let hero \"\n    *directive=\" let hero = hello \"\n    *directive=\" let hero of heroes \"\n    *directive=\" let hero ; of : heroes \"\n    *directive=\" a \"\n    *directive=\" a as b \"\n    *directive=\" a , b \"\n    *directive=\" a ; b \"\n    *directive=\" a ; b c \"\n    *directive=\" a ; b : c \"\n    *directive=\" a ; b : c as d \"\n    *directive=\" a ; b as c \"\n    *ngIf=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3\"\n    *ngIf=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3; else hello\"\n    (target)=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3\"\n    [target]=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3\"\n    [target]=\"{ longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true }\"\n    [error]=\"'We couldn\\\\\\\\\\\\'t find anything with that name.'\"\n    *ngIf=\"form.controls.details?.controls.amount?.errors.min\"\n    [ngClass]=\"\n    {'btn-success': (dialog$ | async).level === dialogLevelEnum.SUCCESS,\n      'btn-warning': (dialog$ | async).level === dialogLevelEnum.WARNING,\n      'btn-svg': (dialog$ | async).level === dialogLevelEnum.DANGER}\"\n    [stickout]=\"+toolAssembly.stickoutMm\"\n    test='{{ \"test\" | translate }}'\n    test='foo {{       invalid invalid       }} bar {{       valid       }} baz'\n    test='foo\n\n    {{       invalid\n             invalid       }}\n\n    bar\n\n          {{       valid       }}\n\n    baz'\n    i18n=\"Normal i18n text\"\n    i18n=\"This is a very long internationalization description text, exceeding the configured print width, but could easily be formatted\"\n    i18n-test=\"Attribute i18n text\"\n    i18n-test=\"This is a very long internationalization description text, exceeding the configured print width, but could easily be formatted\"\n    i18n=\"This is a very long internationalization description text, exceeding the configured print width, but could easily be formatted\" i18n=\"This is yet another very long internationalization description text, exceeding the configured print width, but could easily be formatted\"\n    i18n=\"@@customId\"\n    i18n=\"Some description@@customIdWithDescription\"\n    i18n=\"some meaning|Some description@@customIdWithDescription\"\n    i18n=\"some meaning|Some very long internationalization description text exceeding the configured print width@@customIdWithDescription\"\n></div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\"a | b: c : d : e\"\n  bind-target=\"a | b: c : d : e\"\n  [target]=\"a | b: c : d : e\"\n  [target]=\"a | pipe\"\n  [target]=\"0 - 1\"\n  [target]=\"-1\"\n  [target]=\"a ? 1 : 2\"\n  [target]=\"\"\n  [target]=\"a(1)(2)\"\n  [target]=\"a[b]\"\n  [target]=\"[1]\"\n  [target]=\"{a: 1}\"\n  [target]=\"{a: 1}\"\n  [target]=\"{\n    trailingComma: 'notAllowed'\n  }\"\n  [target]=\"[\n    longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong\n  ]\"\n  [target]=\"true\"\n  [target]=\"undefined\"\n  [target]=\"null\"\n  [target]=\"1\"\n  [target]=\"1\"\n  [target]=\"'hello'\"\n  [target]=\"a(1, 2)\"\n  [target]=\"a.b(1, 2)\"\n  [target]=\"x!\"\n  [target]=\"!x\"\n  [target]=\"a\"\n  [target]=\"a\"\n  [target]=\"a // hello\"\n  [target]=\"a.b\"\n  [target]=\"a?.b\"\n  [target]=\"a?.[b]\"\n  [target]=\" javascript : 'hello world' \"\n  [target]=\"a?.b()\"\n  [target]=\"a?.b\"\n  [target]=\"this.a\"\n  on-target=\"a = 1\"\n  (target)=\"a = 1\"\n  (target)=\"a.b = 1\"\n  (target)=\"a[b] = 1\"\n  (target)=\"(a) // hello\"\n  (target)=\"(a); (b)\"\n  (event)=\"(0)\"\n  (event)=\"(a.b)\"\n  (event)=\"(a?.b)\"\n  (event)=\"(a?.[b])\"\n  (event)=\"(hello)\"\n  (event)=\"hello()\"\n  (event)=\"(a && b)\"\n  (event)=\"a && b()\"\n  (event)=\"foo = $event\"\n  (event)=\"(foo == $event)\"\n  *ngIf=\"something ? true : false\"\n  *ngIf=\"a | pipe\"\n  *ngFor=\"let hero of heroes\"\n  *ngFor=\"\n    let hero of [1, 2, 3, 666666666666666666666666666666666666];\n    let i = index\n  \"\n  *ngFor=\"let hero of heroes; trackBy: trackByHeroes\"\n  *ngFor=\"let item of items; index as i; trackBy: trackByFn\"\n  *ngFor=\"let hero of heroes; let i = index\"\n  *ngFor=\"let hero of heroes; value: myValue\"\n  *ngIf=\"condition; else elseBlock\"\n  *ngIf=\"condition; then thenBlock; else elseBlock\"\n  *ngIf=\"condition as value; else elseBlock\"\n  *directive=\"let hero\"\n  *directive=\"let hero = hello\"\n  *directive=\"let hero of heroes\"\n  *directive=\"let hero of heroes\"\n  *directive=\"a\"\n  *directive=\"a as b\"\n  *directive=\"a; b\"\n  *directive=\"a; b\"\n  *directive=\"a; b: c\"\n  *directive=\"a; b: c\"\n  *directive=\"a; b: c as d\"\n  *directive=\"a; b as c\"\n  *ngIf=\"\n    listRow.NextScheduledSendStatus == 1 ||\n    listRow.NextScheduledSendStatus == 2 ||\n    listRow.NextScheduledSendStatus == 3\n  \"\n  *ngIf=\"\n    listRow.NextScheduledSendStatus == 1 ||\n      listRow.NextScheduledSendStatus == 2 ||\n      listRow.NextScheduledSendStatus == 3;\n    else hello\n  \"\n  (target)=\"\n    (listRow.NextScheduledSendStatus == 1 ||\n      listRow.NextScheduledSendStatus == 2 ||\n      listRow.NextScheduledSendStatus == 3)\n  \"\n  [target]=\"\n    listRow.NextScheduledSendStatus == 1 ||\n    listRow.NextScheduledSendStatus == 2 ||\n    listRow.NextScheduledSendStatus == 3\n  \"\n  [target]=\"{\n    longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true\n  }\"\n  [error]=\"'We couldn\\\\\\\\\\\\'t find anything with that name.'\"\n  *ngIf=\"form.controls.details?.controls.amount?.errors.min\"\n  [ngClass]=\"{\n    'btn-success': (dialog$ | async).level === dialogLevelEnum.SUCCESS,\n    'btn-warning': (dialog$ | async).level === dialogLevelEnum.WARNING,\n    'btn-svg': (dialog$ | async).level === dialogLevelEnum.DANGER\n  }\"\n  [stickout]=\"+toolAssembly.stickoutMm\"\n  test=\"{{ 'test' | translate }}\"\n  test=\"foo {{       invalid invalid       }} bar {{ valid }} baz\"\n  test=\"foo\n\n    {{       invalid\n             invalid       }}\n\n    bar\n\n          {{ valid }}\n\n    baz\"\n  i18n=\"Normal i18n text\"\n  i18n=\"\n    This is a very long internationalization description text, exceeding the\n    configured print width, but could easily be formatted\n  \"\n  i18n-test=\"Attribute i18n text\"\n  i18n-test=\"\n    This is a very long internationalization description text, exceeding the\n    configured print width, but could easily be formatted\n  \"\n  i18n=\"\n    This is a very long internationalization description text, exceeding the\n    configured print width, but could easily be formatted\n  \"\n  i18n=\"\n    This is yet another very long internationalization description text,\n    exceeding the configured print width, but could easily be formatted\n  \"\n  i18n=\"@@customId\"\n  i18n=\"Some description@@customIdWithDescription\"\n  i18n=\"some meaning|Some description@@customIdWithDescription\"\n  i18n=\"\n    some meaning|Some very long internationalization description text exceeding\n    the configured print width@@customIdWithDescription\"\n></div>");
}
#[test]
fn test_attributes_component_html_html_whitespace_sensitivityignore_format_1_32b37cb2() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .html_whitespace_sensitivity("ignore")
        .parser("component.html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div\n    bindon-target=\" a | b : c:d :e \"\n    [(target)]=\" a | b : c:d :e \"\n    bind-target=\" a | b : c:d :e \"\n    [target]=\" a | b : c:d :e \"\n    [target]=\" a | pipe   \"\n    [target]=\" 0 - 1 \"\n    [target]=\" - 1 \"\n    [target]=\" a ? 1 : 2 \"\n    [target]=\" \"\n    [target]=\" a ( 1 ) ( 2 ) \"\n    [target]=\" a [ b ] \"\n    [target]=\" [ 1 ] \"\n    [target]=\" { 'a' : 1 } \"\n    [target]=\" { a : 1 } \"\n    [target]=\" {\n      trailingComma : 'notAllowed'\n    }\"\n    [target]=\" [\n      longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong\n    ]\"\n    [target]=\" true \"\n    [target]=\" undefined \"\n    [target]=\" null \"\n    [target]=\" ( 1 ) \"\n    [target]=\" 1 \"\n    [target]=\"  'hello' \"\n    [target]=\" a ( 1 , 2 ) \"\n    [target]=\" a . b ( 1 , 2 ) \"\n    [target]=\" x ! \"\n    [target]=\" ! x \"\n    [target]=\" ( ( a ) ) \"\n    [target]=\" a \"\n    [target]=\" a // hello \"\n    [target]=\" a . b \"\n    [target]=\" a ?. b \"\n    [target]=\" a ?. [b] \"\n    [target]=\" javascript : 'hello world' \"\n    [target]=\" a ?. b ( ) \"\n    [target]=\" a ?. b \"\n    [target]=\" this . a \"\n    on-target=\" a = 1 \"\n    (target)=\" a = 1 \"\n    (target)=\" a . b = 1 \"\n    (target)=\" a [ b ] = 1 \"\n    (target)=\" a // hello \"\n    (target)=\" a ; b \"\n    (event)=\"  0  \"\n    (event)=\"  a.b  \"\n    (event)=\"  a   ?.b  \"\n    (event)=\"  a?.[  b]  \"\n    (event)=\"  hello  \"\n    (event)=\"  hello()  \"\n    (event)=\"  a && b  \"\n    (event)=\"  a && b()  \"\n    (event)=\"  foo = $event  \"\n    (event)=\"  foo == $event  \"\n    *ngIf=\" something?true:false    \"\n    *ngIf=\" a | pipe   \"\n    *ngFor=\"  let     hero     of     heroes\"\n    *ngFor=\"  let    hero     of[1,2,3,666666666666666666666666666666666666]; let i=index\"\n    *ngFor=\"     let hero     of     heroes;     trackBy    :    trackByHeroes     \"\n    *ngFor=\" let     item   of   items   ;    index    as   i  ; trackBy  :     trackByFn\"\n    *ngFor=\"  let    hero     of heroes; let i  =  index\"\n    *ngFor=\"  let    hero     of heroes; value     myValue\"\n    *ngIf=\" condition  ;  else  elseBlock \"\n    *ngIf=\" condition  ;  then  thenBlock  else  elseBlock \"\n    *ngIf=\" condition  as  value  ;  else  elseBlock \"\n    *directive=\" let hero \"\n    *directive=\" let hero = hello \"\n    *directive=\" let hero of heroes \"\n    *directive=\" let hero ; of : heroes \"\n    *directive=\" a \"\n    *directive=\" a as b \"\n    *directive=\" a , b \"\n    *directive=\" a ; b \"\n    *directive=\" a ; b c \"\n    *directive=\" a ; b : c \"\n    *directive=\" a ; b : c as d \"\n    *directive=\" a ; b as c \"\n    *ngIf=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3\"\n    *ngIf=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3; else hello\"\n    (target)=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3\"\n    [target]=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3\"\n    [target]=\"{ longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true }\"\n    [error]=\"'We couldn\\\\\\\\\\\\'t find anything with that name.'\"\n    *ngIf=\"form.controls.details?.controls.amount?.errors.min\"\n    [ngClass]=\"\n    {'btn-success': (dialog$ | async).level === dialogLevelEnum.SUCCESS,\n      'btn-warning': (dialog$ | async).level === dialogLevelEnum.WARNING,\n      'btn-svg': (dialog$ | async).level === dialogLevelEnum.DANGER}\"\n    [stickout]=\"+toolAssembly.stickoutMm\"\n    test='{{ \"test\" | translate }}'\n    test='foo {{       invalid invalid       }} bar {{       valid       }} baz'\n    test='foo\n\n    {{       invalid\n             invalid       }}\n\n    bar\n\n          {{       valid       }}\n\n    baz'\n    i18n=\"Normal i18n text\"\n    i18n=\"This is a very long internationalization description text, exceeding the configured print width, but could easily be formatted\"\n    i18n-test=\"Attribute i18n text\"\n    i18n-test=\"This is a very long internationalization description text, exceeding the configured print width, but could easily be formatted\"\n    i18n=\"This is a very long internationalization description text, exceeding the configured print width, but could easily be formatted\" i18n=\"This is yet another very long internationalization description text, exceeding the configured print width, but could easily be formatted\"\n    i18n=\"@@customId\"\n    i18n=\"Some description@@customIdWithDescription\"\n    i18n=\"some meaning|Some description@@customIdWithDescription\"\n    i18n=\"some meaning|Some very long internationalization description text exceeding the configured print width@@customIdWithDescription\"\n></div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\"a | b: c : d : e\"\n  bind-target=\"a | b: c : d : e\"\n  [target]=\"a | b: c : d : e\"\n  [target]=\"a | pipe\"\n  [target]=\"0 - 1\"\n  [target]=\"-1\"\n  [target]=\"a ? 1 : 2\"\n  [target]=\"\"\n  [target]=\"a(1)(2)\"\n  [target]=\"a[b]\"\n  [target]=\"[1]\"\n  [target]=\"{ a: 1 }\"\n  [target]=\"{ a: 1 }\"\n  [target]=\"{\n    trailingComma: 'notAllowed'\n  }\"\n  [target]=\"[\n    longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong\n  ]\"\n  [target]=\"true\"\n  [target]=\"undefined\"\n  [target]=\"null\"\n  [target]=\"1\"\n  [target]=\"1\"\n  [target]=\"'hello'\"\n  [target]=\"a(1, 2)\"\n  [target]=\"a.b(1, 2)\"\n  [target]=\"x!\"\n  [target]=\"!x\"\n  [target]=\"a\"\n  [target]=\"a\"\n  [target]=\"a // hello\"\n  [target]=\"a.b\"\n  [target]=\"a?.b\"\n  [target]=\"a?.[b]\"\n  [target]=\" javascript : 'hello world' \"\n  [target]=\"a?.b()\"\n  [target]=\"a?.b\"\n  [target]=\"this.a\"\n  on-target=\"a = 1\"\n  (target)=\"a = 1\"\n  (target)=\"a.b = 1\"\n  (target)=\"a[b] = 1\"\n  (target)=\"(a) // hello\"\n  (target)=\"(a); (b)\"\n  (event)=\"(0)\"\n  (event)=\"(a.b)\"\n  (event)=\"(a?.b)\"\n  (event)=\"(a?.[b])\"\n  (event)=\"(hello)\"\n  (event)=\"hello()\"\n  (event)=\"(a && b)\"\n  (event)=\"a && b()\"\n  (event)=\"foo = $event\"\n  (event)=\"(foo == $event)\"\n  *ngIf=\"something ? true : false\"\n  *ngIf=\"a | pipe\"\n  *ngFor=\"let hero of heroes\"\n  *ngFor=\"\n    let hero of [1, 2, 3, 666666666666666666666666666666666666];\n    let i = index\n  \"\n  *ngFor=\"let hero of heroes; trackBy: trackByHeroes\"\n  *ngFor=\"let item of items; index as i; trackBy: trackByFn\"\n  *ngFor=\"let hero of heroes; let i = index\"\n  *ngFor=\"let hero of heroes; value: myValue\"\n  *ngIf=\"condition; else elseBlock\"\n  *ngIf=\"condition; then thenBlock; else elseBlock\"\n  *ngIf=\"condition as value; else elseBlock\"\n  *directive=\"let hero\"\n  *directive=\"let hero = hello\"\n  *directive=\"let hero of heroes\"\n  *directive=\"let hero of heroes\"\n  *directive=\"a\"\n  *directive=\"a as b\"\n  *directive=\"a; b\"\n  *directive=\"a; b\"\n  *directive=\"a; b: c\"\n  *directive=\"a; b: c\"\n  *directive=\"a; b: c as d\"\n  *directive=\"a; b as c\"\n  *ngIf=\"\n    listRow.NextScheduledSendStatus == 1 ||\n    listRow.NextScheduledSendStatus == 2 ||\n    listRow.NextScheduledSendStatus == 3\n  \"\n  *ngIf=\"\n    listRow.NextScheduledSendStatus == 1 ||\n      listRow.NextScheduledSendStatus == 2 ||\n      listRow.NextScheduledSendStatus == 3;\n    else hello\n  \"\n  (target)=\"\n    (listRow.NextScheduledSendStatus == 1 ||\n      listRow.NextScheduledSendStatus == 2 ||\n      listRow.NextScheduledSendStatus == 3)\n  \"\n  [target]=\"\n    listRow.NextScheduledSendStatus == 1 ||\n    listRow.NextScheduledSendStatus == 2 ||\n    listRow.NextScheduledSendStatus == 3\n  \"\n  [target]=\"{\n    longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true\n  }\"\n  [error]=\"'We couldn\\\\\\\\\\\\'t find anything with that name.'\"\n  *ngIf=\"form.controls.details?.controls.amount?.errors.min\"\n  [ngClass]=\"{\n    'btn-success': (dialog$ | async).level === dialogLevelEnum.SUCCESS,\n    'btn-warning': (dialog$ | async).level === dialogLevelEnum.WARNING,\n    'btn-svg': (dialog$ | async).level === dialogLevelEnum.DANGER\n  }\"\n  [stickout]=\"+toolAssembly.stickoutMm\"\n  test=\"{{ 'test' | translate }}\"\n  test=\"foo {{       invalid invalid       }} bar {{ valid }} baz\"\n  test=\"foo\n\n    {{       invalid\n             invalid       }}\n\n    bar\n\n          {{ valid }}\n\n    baz\"\n  i18n=\"Normal i18n text\"\n  i18n=\"\n    This is a very long internationalization description text, exceeding the\n    configured print width, but could easily be formatted\n  \"\n  i18n-test=\"Attribute i18n text\"\n  i18n-test=\"\n    This is a very long internationalization description text, exceeding the\n    configured print width, but could easily be formatted\n  \"\n  i18n=\"\n    This is a very long internationalization description text, exceeding the\n    configured print width, but could easily be formatted\n  \"\n  i18n=\"\n    This is yet another very long internationalization description text,\n    exceeding the configured print width, but could easily be formatted\n  \"\n  i18n=\"@@customId\"\n  i18n=\"Some description@@customIdWithDescription\"\n  i18n=\"some meaning|Some description@@customIdWithDescription\"\n  i18n=\"\n    some meaning|Some very long internationalization description text exceeding\n    the configured print width@@customIdWithDescription\"\n></div>");
}
#[test]
fn test_attributes_component_html_print_width_1_format_1_32b37cb2() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(1)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div\n    bindon-target=\" a | b : c:d :e \"\n    [(target)]=\" a | b : c:d :e \"\n    bind-target=\" a | b : c:d :e \"\n    [target]=\" a | b : c:d :e \"\n    [target]=\" a | pipe   \"\n    [target]=\" 0 - 1 \"\n    [target]=\" - 1 \"\n    [target]=\" a ? 1 : 2 \"\n    [target]=\" \"\n    [target]=\" a ( 1 ) ( 2 ) \"\n    [target]=\" a [ b ] \"\n    [target]=\" [ 1 ] \"\n    [target]=\" { 'a' : 1 } \"\n    [target]=\" { a : 1 } \"\n    [target]=\" {\n      trailingComma : 'notAllowed'\n    }\"\n    [target]=\" [\n      longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong\n    ]\"\n    [target]=\" true \"\n    [target]=\" undefined \"\n    [target]=\" null \"\n    [target]=\" ( 1 ) \"\n    [target]=\" 1 \"\n    [target]=\"  'hello' \"\n    [target]=\" a ( 1 , 2 ) \"\n    [target]=\" a . b ( 1 , 2 ) \"\n    [target]=\" x ! \"\n    [target]=\" ! x \"\n    [target]=\" ( ( a ) ) \"\n    [target]=\" a \"\n    [target]=\" a // hello \"\n    [target]=\" a . b \"\n    [target]=\" a ?. b \"\n    [target]=\" a ?. [b] \"\n    [target]=\" javascript : 'hello world' \"\n    [target]=\" a ?. b ( ) \"\n    [target]=\" a ?. b \"\n    [target]=\" this . a \"\n    on-target=\" a = 1 \"\n    (target)=\" a = 1 \"\n    (target)=\" a . b = 1 \"\n    (target)=\" a [ b ] = 1 \"\n    (target)=\" a // hello \"\n    (target)=\" a ; b \"\n    (event)=\"  0  \"\n    (event)=\"  a.b  \"\n    (event)=\"  a   ?.b  \"\n    (event)=\"  a?.[  b]  \"\n    (event)=\"  hello  \"\n    (event)=\"  hello()  \"\n    (event)=\"  a && b  \"\n    (event)=\"  a && b()  \"\n    (event)=\"  foo = $event  \"\n    (event)=\"  foo == $event  \"\n    *ngIf=\" something?true:false    \"\n    *ngIf=\" a | pipe   \"\n    *ngFor=\"  let     hero     of     heroes\"\n    *ngFor=\"  let    hero     of[1,2,3,666666666666666666666666666666666666]; let i=index\"\n    *ngFor=\"     let hero     of     heroes;     trackBy    :    trackByHeroes     \"\n    *ngFor=\" let     item   of   items   ;    index    as   i  ; trackBy  :     trackByFn\"\n    *ngFor=\"  let    hero     of heroes; let i  =  index\"\n    *ngFor=\"  let    hero     of heroes; value     myValue\"\n    *ngIf=\" condition  ;  else  elseBlock \"\n    *ngIf=\" condition  ;  then  thenBlock  else  elseBlock \"\n    *ngIf=\" condition  as  value  ;  else  elseBlock \"\n    *directive=\" let hero \"\n    *directive=\" let hero = hello \"\n    *directive=\" let hero of heroes \"\n    *directive=\" let hero ; of : heroes \"\n    *directive=\" a \"\n    *directive=\" a as b \"\n    *directive=\" a , b \"\n    *directive=\" a ; b \"\n    *directive=\" a ; b c \"\n    *directive=\" a ; b : c \"\n    *directive=\" a ; b : c as d \"\n    *directive=\" a ; b as c \"\n    *ngIf=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3\"\n    *ngIf=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3; else hello\"\n    (target)=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3\"\n    [target]=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3\"\n    [target]=\"{ longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true }\"\n    [error]=\"'We couldn\\\\\\\\\\\\'t find anything with that name.'\"\n    *ngIf=\"form.controls.details?.controls.amount?.errors.min\"\n    [ngClass]=\"\n    {'btn-success': (dialog$ | async).level === dialogLevelEnum.SUCCESS,\n      'btn-warning': (dialog$ | async).level === dialogLevelEnum.WARNING,\n      'btn-svg': (dialog$ | async).level === dialogLevelEnum.DANGER}\"\n    [stickout]=\"+toolAssembly.stickoutMm\"\n    test='{{ \"test\" | translate }}'\n    test='foo {{       invalid invalid       }} bar {{       valid       }} baz'\n    test='foo\n\n    {{       invalid\n             invalid       }}\n\n    bar\n\n          {{       valid       }}\n\n    baz'\n    i18n=\"Normal i18n text\"\n    i18n=\"This is a very long internationalization description text, exceeding the configured print width, but could easily be formatted\"\n    i18n-test=\"Attribute i18n text\"\n    i18n-test=\"This is a very long internationalization description text, exceeding the configured print width, but could easily be formatted\"\n    i18n=\"This is a very long internationalization description text, exceeding the configured print width, but could easily be formatted\" i18n=\"This is yet another very long internationalization description text, exceeding the configured print width, but could easily be formatted\"\n    i18n=\"@@customId\"\n    i18n=\"Some description@@customIdWithDescription\"\n    i18n=\"some meaning|Some description@@customIdWithDescription\"\n    i18n=\"some meaning|Some very long internationalization description text exceeding the configured print width@@customIdWithDescription\"\n></div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div\n  bindon-target=\"\n    a\n      | b\n        : c\n        : d\n        : e\n  \"\n  [(target)]=\"\n    a\n      | b\n        : c\n        : d\n        : e\n  \"\n  bind-target=\"\n    a\n      | b\n        : c\n        : d\n        : e\n  \"\n  [target]=\"\n    a\n      | b\n        : c\n        : d\n        : e\n  \"\n  [target]=\"\n    a\n      | pipe\n  \"\n  [target]=\"\n    0 -\n    1\n  \"\n  [target]=\"\n    -1\n  \"\n  [target]=\"\n    a\n      ? 1\n      : 2\n  \"\n  [target]=\"\n\n  \"\n  [target]=\"\n    a(\n      1\n    )(\n      2\n    )\n  \"\n  [target]=\"\n    a[\n      b\n    ]\n  \"\n  [target]=\"[\n    1\n  ]\"\n  [target]=\"{\n    a: 1\n  }\"\n  [target]=\"{\n    a: 1\n  }\"\n  [target]=\"{\n    trailingComma:\n      'notAllowed'\n  }\"\n  [target]=\"[\n    longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong\n  ]\"\n  [target]=\"\n    true\n  \"\n  [target]=\"\n    undefined\n  \"\n  [target]=\"\n    null\n  \"\n  [target]=\"\n    1\n  \"\n  [target]=\"\n    1\n  \"\n  [target]=\"\n    'hello'\n  \"\n  [target]=\"\n    a(\n      1,\n      2\n    )\n  \"\n  [target]=\"\n    a.b(\n      1,\n      2\n    )\n  \"\n  [target]=\"\n    x!\n  \"\n  [target]=\"\n    !x\n  \"\n  [target]=\"\n    a\n  \"\n  [target]=\"\n    a\n  \"\n  [target]=\"\n    a // hello\n  \"\n  [target]=\"\n    a.b\n  \"\n  [target]=\"\n    a?.b\n  \"\n  [target]=\"\n    a?.[\n      b\n    ]\n  \"\n  [target]=\" javascript : 'hello world' \"\n  [target]=\"\n    a?.b()\n  \"\n  [target]=\"\n    a?.b\n  \"\n  [target]=\"\n    this\n      .a\n  \"\n  on-target=\"\n    a = 1\n  \"\n  (target)=\"\n    a = 1\n  \"\n  (target)=\"\n    a.b = 1\n  \"\n  (target)=\"\n    a[\n      b\n    ] =\n      1\n  \"\n  (target)=\"\n    (a) // hello\n  \"\n  (target)=\"\n    (a);\n    (b)\n  \"\n  (event)=\"\n    (0)\n  \"\n  (event)=\"\n    (a.b)\n  \"\n  (event)=\"\n    (a?.b)\n  \"\n  (event)=\"\n    (a?.[\n      b\n    ])\n  \"\n  (event)=\"\n    (hello)\n  \"\n  (event)=\"\n    hello()\n  \"\n  (event)=\"\n    (a &&\n      b)\n  \"\n  (event)=\"\n    a &&\n      b()\n  \"\n  (event)=\"\n    foo =\n      $event\n  \"\n  (event)=\"\n    (foo ==\n      $event)\n  \"\n  *ngIf=\"\n    something\n      ? true\n      : false\n  \"\n  *ngIf=\"\n    a\n      | pipe\n  \"\n  *ngFor=\"\n    let hero of heroes\n  \"\n  *ngFor=\"\n    let hero of [\n      1,\n      2,\n      3,\n      666666666666666666666666666666666666\n    ];\n    let i = index\n  \"\n  *ngFor=\"\n    let hero of heroes;\n    trackBy: trackByHeroes\n  \"\n  *ngFor=\"\n    let item of items;\n    index as i;\n    trackBy: trackByFn\n  \"\n  *ngFor=\"\n    let hero of heroes;\n    let i = index\n  \"\n  *ngFor=\"\n    let hero of heroes;\n    value: myValue\n  \"\n  *ngIf=\"\n    condition;\n    else elseBlock\n  \"\n  *ngIf=\"\n    condition;\n    then thenBlock;\n    else elseBlock\n  \"\n  *ngIf=\"\n    condition as value;\n    else elseBlock\n  \"\n  *directive=\"\n    let hero\n  \"\n  *directive=\"\n    let hero = hello\n  \"\n  *directive=\"\n    let hero of heroes\n  \"\n  *directive=\"\n    let hero of heroes\n  \"\n  *directive=\"\n    a\n  \"\n  *directive=\"\n    a as b\n  \"\n  *directive=\"\n    a;\n    b\n  \"\n  *directive=\"\n    a;\n    b\n  \"\n  *directive=\"\n    a;\n    b: c\n  \"\n  *directive=\"\n    a;\n    b: c\n  \"\n  *directive=\"\n    a;\n    b: c as d\n  \"\n  *directive=\"\n    a;\n    b as c\n  \"\n  *ngIf=\"\n    listRow.NextScheduledSendStatus ==\n      1 ||\n    listRow.NextScheduledSendStatus ==\n      2 ||\n    listRow.NextScheduledSendStatus ==\n      3\n  \"\n  *ngIf=\"\n    listRow.NextScheduledSendStatus ==\n      1 ||\n      listRow.NextScheduledSendStatus ==\n        2 ||\n      listRow.NextScheduledSendStatus ==\n        3;\n    else hello\n  \"\n  (target)=\"\n    (listRow.NextScheduledSendStatus ==\n      1 ||\n      listRow.NextScheduledSendStatus ==\n        2 ||\n      listRow.NextScheduledSendStatus ==\n        3)\n  \"\n  [target]=\"\n    listRow.NextScheduledSendStatus ==\n      1 ||\n    listRow.NextScheduledSendStatus ==\n      2 ||\n    listRow.NextScheduledSendStatus ==\n      3\n  \"\n  [target]=\"{\n    longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true\n  }\"\n  [error]=\"\n    'We couldn\\\\\\\\\\\\'t find anything with that name.'\n  \"\n  *ngIf=\"\n    form\n      .controls\n      .details\n      ?.controls\n      .amount\n      ?.errors\n      .min\n  \"\n  [ngClass]=\"{\n    'btn-success':\n      (\n        dialog$\n        | async\n      )\n        .level ===\n      dialogLevelEnum.SUCCESS,\n    'btn-warning':\n      (\n        dialog$\n        | async\n      )\n        .level ===\n      dialogLevelEnum.WARNING,\n    'btn-svg':\n      (\n        dialog$\n        | async\n      )\n        .level ===\n      dialogLevelEnum.DANGER\n  }\"\n  [stickout]=\"\n    +toolAssembly.stickoutMm\n  \"\n  test=\"{{\n    'test'\n      | translate\n  }}\"\n  test=\"foo {{       invalid invalid       }} bar {{\n    valid\n  }} baz\"\n  test=\"foo\n\n    {{       invalid\n             invalid       }}\n\n    bar\n\n          {{\n    valid\n  }}\n\n    baz\"\n  i18n=\"\n    Normal\n    i18n\n    text\n  \"\n  i18n=\"\n    This\n    is\n    a\n    very\n    long\n    internationalization\n    description\n    text,\n    exceeding\n    the\n    configured\n    print\n    width,\n    but\n    could\n    easily\n    be\n    formatted\n  \"\n  i18n-test=\"\n    Attribute\n    i18n\n    text\n  \"\n  i18n-test=\"\n    This\n    is\n    a\n    very\n    long\n    internationalization\n    description\n    text,\n    exceeding\n    the\n    configured\n    print\n    width,\n    but\n    could\n    easily\n    be\n    formatted\n  \"\n  i18n=\"\n    This\n    is\n    a\n    very\n    long\n    internationalization\n    description\n    text,\n    exceeding\n    the\n    configured\n    print\n    width,\n    but\n    could\n    easily\n    be\n    formatted\n  \"\n  i18n=\"\n    This\n    is\n    yet\n    another\n    very\n    long\n    internationalization\n    description\n    text,\n    exceeding\n    the\n    configured\n    print\n    width,\n    but\n    could\n    easily\n    be\n    formatted\n  \"\n  i18n=\"\n    @@customId\"\n  i18n=\"\n    Some\n    description@@customIdWithDescription\"\n  i18n=\"\n    some\n    meaning|Some\n    description@@customIdWithDescription\"\n  i18n=\"\n    some\n    meaning|Some\n    very\n    long\n    internationalization\n    description\n    text\n    exceeding\n    the\n    configured\n    print\n    width@@customIdWithDescription\"\n></div>");
}
#[test]
fn test_attributes_component_html_trailing_commaes_5_format_1_32b37cb2() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(80)
        .trailing_comma("es5")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div\n    bindon-target=\" a | b : c:d :e \"\n    [(target)]=\" a | b : c:d :e \"\n    bind-target=\" a | b : c:d :e \"\n    [target]=\" a | b : c:d :e \"\n    [target]=\" a | pipe   \"\n    [target]=\" 0 - 1 \"\n    [target]=\" - 1 \"\n    [target]=\" a ? 1 : 2 \"\n    [target]=\" \"\n    [target]=\" a ( 1 ) ( 2 ) \"\n    [target]=\" a [ b ] \"\n    [target]=\" [ 1 ] \"\n    [target]=\" { 'a' : 1 } \"\n    [target]=\" { a : 1 } \"\n    [target]=\" {\n      trailingComma : 'notAllowed'\n    }\"\n    [target]=\" [\n      longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong\n    ]\"\n    [target]=\" true \"\n    [target]=\" undefined \"\n    [target]=\" null \"\n    [target]=\" ( 1 ) \"\n    [target]=\" 1 \"\n    [target]=\"  'hello' \"\n    [target]=\" a ( 1 , 2 ) \"\n    [target]=\" a . b ( 1 , 2 ) \"\n    [target]=\" x ! \"\n    [target]=\" ! x \"\n    [target]=\" ( ( a ) ) \"\n    [target]=\" a \"\n    [target]=\" a // hello \"\n    [target]=\" a . b \"\n    [target]=\" a ?. b \"\n    [target]=\" a ?. [b] \"\n    [target]=\" javascript : 'hello world' \"\n    [target]=\" a ?. b ( ) \"\n    [target]=\" a ?. b \"\n    [target]=\" this . a \"\n    on-target=\" a = 1 \"\n    (target)=\" a = 1 \"\n    (target)=\" a . b = 1 \"\n    (target)=\" a [ b ] = 1 \"\n    (target)=\" a // hello \"\n    (target)=\" a ; b \"\n    (event)=\"  0  \"\n    (event)=\"  a.b  \"\n    (event)=\"  a   ?.b  \"\n    (event)=\"  a?.[  b]  \"\n    (event)=\"  hello  \"\n    (event)=\"  hello()  \"\n    (event)=\"  a && b  \"\n    (event)=\"  a && b()  \"\n    (event)=\"  foo = $event  \"\n    (event)=\"  foo == $event  \"\n    *ngIf=\" something?true:false    \"\n    *ngIf=\" a | pipe   \"\n    *ngFor=\"  let     hero     of     heroes\"\n    *ngFor=\"  let    hero     of[1,2,3,666666666666666666666666666666666666]; let i=index\"\n    *ngFor=\"     let hero     of     heroes;     trackBy    :    trackByHeroes     \"\n    *ngFor=\" let     item   of   items   ;    index    as   i  ; trackBy  :     trackByFn\"\n    *ngFor=\"  let    hero     of heroes; let i  =  index\"\n    *ngFor=\"  let    hero     of heroes; value     myValue\"\n    *ngIf=\" condition  ;  else  elseBlock \"\n    *ngIf=\" condition  ;  then  thenBlock  else  elseBlock \"\n    *ngIf=\" condition  as  value  ;  else  elseBlock \"\n    *directive=\" let hero \"\n    *directive=\" let hero = hello \"\n    *directive=\" let hero of heroes \"\n    *directive=\" let hero ; of : heroes \"\n    *directive=\" a \"\n    *directive=\" a as b \"\n    *directive=\" a , b \"\n    *directive=\" a ; b \"\n    *directive=\" a ; b c \"\n    *directive=\" a ; b : c \"\n    *directive=\" a ; b : c as d \"\n    *directive=\" a ; b as c \"\n    *ngIf=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3\"\n    *ngIf=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3; else hello\"\n    (target)=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3\"\n    [target]=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3\"\n    [target]=\"{ longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true }\"\n    [error]=\"'We couldn\\\\\\\\\\\\'t find anything with that name.'\"\n    *ngIf=\"form.controls.details?.controls.amount?.errors.min\"\n    [ngClass]=\"\n    {'btn-success': (dialog$ | async).level === dialogLevelEnum.SUCCESS,\n      'btn-warning': (dialog$ | async).level === dialogLevelEnum.WARNING,\n      'btn-svg': (dialog$ | async).level === dialogLevelEnum.DANGER}\"\n    [stickout]=\"+toolAssembly.stickoutMm\"\n    test='{{ \"test\" | translate }}'\n    test='foo {{       invalid invalid       }} bar {{       valid       }} baz'\n    test='foo\n\n    {{       invalid\n             invalid       }}\n\n    bar\n\n          {{       valid       }}\n\n    baz'\n    i18n=\"Normal i18n text\"\n    i18n=\"This is a very long internationalization description text, exceeding the configured print width, but could easily be formatted\"\n    i18n-test=\"Attribute i18n text\"\n    i18n-test=\"This is a very long internationalization description text, exceeding the configured print width, but could easily be formatted\"\n    i18n=\"This is a very long internationalization description text, exceeding the configured print width, but could easily be formatted\" i18n=\"This is yet another very long internationalization description text, exceeding the configured print width, but could easily be formatted\"\n    i18n=\"@@customId\"\n    i18n=\"Some description@@customIdWithDescription\"\n    i18n=\"some meaning|Some description@@customIdWithDescription\"\n    i18n=\"some meaning|Some very long internationalization description text exceeding the configured print width@@customIdWithDescription\"\n></div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\"a | b: c : d : e\"\n  bind-target=\"a | b: c : d : e\"\n  [target]=\"a | b: c : d : e\"\n  [target]=\"a | pipe\"\n  [target]=\"0 - 1\"\n  [target]=\"-1\"\n  [target]=\"a ? 1 : 2\"\n  [target]=\"\"\n  [target]=\"a(1)(2)\"\n  [target]=\"a[b]\"\n  [target]=\"[1]\"\n  [target]=\"{ a: 1 }\"\n  [target]=\"{ a: 1 }\"\n  [target]=\"{\n    trailingComma: 'notAllowed'\n  }\"\n  [target]=\"[\n    longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong\n  ]\"\n  [target]=\"true\"\n  [target]=\"undefined\"\n  [target]=\"null\"\n  [target]=\"1\"\n  [target]=\"1\"\n  [target]=\"'hello'\"\n  [target]=\"a(1, 2)\"\n  [target]=\"a.b(1, 2)\"\n  [target]=\"x!\"\n  [target]=\"!x\"\n  [target]=\"a\"\n  [target]=\"a\"\n  [target]=\"a // hello\"\n  [target]=\"a.b\"\n  [target]=\"a?.b\"\n  [target]=\"a?.[b]\"\n  [target]=\" javascript : 'hello world' \"\n  [target]=\"a?.b()\"\n  [target]=\"a?.b\"\n  [target]=\"this.a\"\n  on-target=\"a = 1\"\n  (target)=\"a = 1\"\n  (target)=\"a.b = 1\"\n  (target)=\"a[b] = 1\"\n  (target)=\"(a) // hello\"\n  (target)=\"(a); (b)\"\n  (event)=\"(0)\"\n  (event)=\"(a.b)\"\n  (event)=\"(a?.b)\"\n  (event)=\"(a?.[b])\"\n  (event)=\"(hello)\"\n  (event)=\"hello()\"\n  (event)=\"(a && b)\"\n  (event)=\"a && b()\"\n  (event)=\"foo = $event\"\n  (event)=\"(foo == $event)\"\n  *ngIf=\"something ? true : false\"\n  *ngIf=\"a | pipe\"\n  *ngFor=\"let hero of heroes\"\n  *ngFor=\"\n    let hero of [1, 2, 3, 666666666666666666666666666666666666];\n    let i = index\n  \"\n  *ngFor=\"let hero of heroes; trackBy: trackByHeroes\"\n  *ngFor=\"let item of items; index as i; trackBy: trackByFn\"\n  *ngFor=\"let hero of heroes; let i = index\"\n  *ngFor=\"let hero of heroes; value: myValue\"\n  *ngIf=\"condition; else elseBlock\"\n  *ngIf=\"condition; then thenBlock; else elseBlock\"\n  *ngIf=\"condition as value; else elseBlock\"\n  *directive=\"let hero\"\n  *directive=\"let hero = hello\"\n  *directive=\"let hero of heroes\"\n  *directive=\"let hero of heroes\"\n  *directive=\"a\"\n  *directive=\"a as b\"\n  *directive=\"a; b\"\n  *directive=\"a; b\"\n  *directive=\"a; b: c\"\n  *directive=\"a; b: c\"\n  *directive=\"a; b: c as d\"\n  *directive=\"a; b as c\"\n  *ngIf=\"\n    listRow.NextScheduledSendStatus == 1 ||\n    listRow.NextScheduledSendStatus == 2 ||\n    listRow.NextScheduledSendStatus == 3\n  \"\n  *ngIf=\"\n    listRow.NextScheduledSendStatus == 1 ||\n      listRow.NextScheduledSendStatus == 2 ||\n      listRow.NextScheduledSendStatus == 3;\n    else hello\n  \"\n  (target)=\"\n    (listRow.NextScheduledSendStatus == 1 ||\n      listRow.NextScheduledSendStatus == 2 ||\n      listRow.NextScheduledSendStatus == 3)\n  \"\n  [target]=\"\n    listRow.NextScheduledSendStatus == 1 ||\n    listRow.NextScheduledSendStatus == 2 ||\n    listRow.NextScheduledSendStatus == 3\n  \"\n  [target]=\"{\n    longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true\n  }\"\n  [error]=\"'We couldn\\\\\\\\\\\\'t find anything with that name.'\"\n  *ngIf=\"form.controls.details?.controls.amount?.errors.min\"\n  [ngClass]=\"{\n    'btn-success': (dialog$ | async).level === dialogLevelEnum.SUCCESS,\n    'btn-warning': (dialog$ | async).level === dialogLevelEnum.WARNING,\n    'btn-svg': (dialog$ | async).level === dialogLevelEnum.DANGER\n  }\"\n  [stickout]=\"+toolAssembly.stickoutMm\"\n  test=\"{{ 'test' | translate }}\"\n  test=\"foo {{       invalid invalid       }} bar {{ valid }} baz\"\n  test=\"foo\n\n    {{       invalid\n             invalid       }}\n\n    bar\n\n          {{ valid }}\n\n    baz\"\n  i18n=\"Normal i18n text\"\n  i18n=\"\n    This is a very long internationalization description text, exceeding the\n    configured print width, but could easily be formatted\n  \"\n  i18n-test=\"Attribute i18n text\"\n  i18n-test=\"\n    This is a very long internationalization description text, exceeding the\n    configured print width, but could easily be formatted\n  \"\n  i18n=\"\n    This is a very long internationalization description text, exceeding the\n    configured print width, but could easily be formatted\n  \"\n  i18n=\"\n    This is yet another very long internationalization description text,\n    exceeding the configured print width, but could easily be formatted\n  \"\n  i18n=\"@@customId\"\n  i18n=\"Some description@@customIdWithDescription\"\n  i18n=\"some meaning|Some description@@customIdWithDescription\"\n  i18n=\"\n    some meaning|Some very long internationalization description text exceeding\n    the configured print width@@customIdWithDescription\"\n></div>");
}
#[test]
fn test_attributes_component_html_trailing_commanone_format_1_32b37cb2() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(80)
        .trailing_comma("none")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div\n    bindon-target=\" a | b : c:d :e \"\n    [(target)]=\" a | b : c:d :e \"\n    bind-target=\" a | b : c:d :e \"\n    [target]=\" a | b : c:d :e \"\n    [target]=\" a | pipe   \"\n    [target]=\" 0 - 1 \"\n    [target]=\" - 1 \"\n    [target]=\" a ? 1 : 2 \"\n    [target]=\" \"\n    [target]=\" a ( 1 ) ( 2 ) \"\n    [target]=\" a [ b ] \"\n    [target]=\" [ 1 ] \"\n    [target]=\" { 'a' : 1 } \"\n    [target]=\" { a : 1 } \"\n    [target]=\" {\n      trailingComma : 'notAllowed'\n    }\"\n    [target]=\" [\n      longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong\n    ]\"\n    [target]=\" true \"\n    [target]=\" undefined \"\n    [target]=\" null \"\n    [target]=\" ( 1 ) \"\n    [target]=\" 1 \"\n    [target]=\"  'hello' \"\n    [target]=\" a ( 1 , 2 ) \"\n    [target]=\" a . b ( 1 , 2 ) \"\n    [target]=\" x ! \"\n    [target]=\" ! x \"\n    [target]=\" ( ( a ) ) \"\n    [target]=\" a \"\n    [target]=\" a // hello \"\n    [target]=\" a . b \"\n    [target]=\" a ?. b \"\n    [target]=\" a ?. [b] \"\n    [target]=\" javascript : 'hello world' \"\n    [target]=\" a ?. b ( ) \"\n    [target]=\" a ?. b \"\n    [target]=\" this . a \"\n    on-target=\" a = 1 \"\n    (target)=\" a = 1 \"\n    (target)=\" a . b = 1 \"\n    (target)=\" a [ b ] = 1 \"\n    (target)=\" a // hello \"\n    (target)=\" a ; b \"\n    (event)=\"  0  \"\n    (event)=\"  a.b  \"\n    (event)=\"  a   ?.b  \"\n    (event)=\"  a?.[  b]  \"\n    (event)=\"  hello  \"\n    (event)=\"  hello()  \"\n    (event)=\"  a && b  \"\n    (event)=\"  a && b()  \"\n    (event)=\"  foo = $event  \"\n    (event)=\"  foo == $event  \"\n    *ngIf=\" something?true:false    \"\n    *ngIf=\" a | pipe   \"\n    *ngFor=\"  let     hero     of     heroes\"\n    *ngFor=\"  let    hero     of[1,2,3,666666666666666666666666666666666666]; let i=index\"\n    *ngFor=\"     let hero     of     heroes;     trackBy    :    trackByHeroes     \"\n    *ngFor=\" let     item   of   items   ;    index    as   i  ; trackBy  :     trackByFn\"\n    *ngFor=\"  let    hero     of heroes; let i  =  index\"\n    *ngFor=\"  let    hero     of heroes; value     myValue\"\n    *ngIf=\" condition  ;  else  elseBlock \"\n    *ngIf=\" condition  ;  then  thenBlock  else  elseBlock \"\n    *ngIf=\" condition  as  value  ;  else  elseBlock \"\n    *directive=\" let hero \"\n    *directive=\" let hero = hello \"\n    *directive=\" let hero of heroes \"\n    *directive=\" let hero ; of : heroes \"\n    *directive=\" a \"\n    *directive=\" a as b \"\n    *directive=\" a , b \"\n    *directive=\" a ; b \"\n    *directive=\" a ; b c \"\n    *directive=\" a ; b : c \"\n    *directive=\" a ; b : c as d \"\n    *directive=\" a ; b as c \"\n    *ngIf=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3\"\n    *ngIf=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3; else hello\"\n    (target)=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3\"\n    [target]=\"listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3\"\n    [target]=\"{ longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true }\"\n    [error]=\"'We couldn\\\\\\\\\\\\'t find anything with that name.'\"\n    *ngIf=\"form.controls.details?.controls.amount?.errors.min\"\n    [ngClass]=\"\n    {'btn-success': (dialog$ | async).level === dialogLevelEnum.SUCCESS,\n      'btn-warning': (dialog$ | async).level === dialogLevelEnum.WARNING,\n      'btn-svg': (dialog$ | async).level === dialogLevelEnum.DANGER}\"\n    [stickout]=\"+toolAssembly.stickoutMm\"\n    test='{{ \"test\" | translate }}'\n    test='foo {{       invalid invalid       }} bar {{       valid       }} baz'\n    test='foo\n\n    {{       invalid\n             invalid       }}\n\n    bar\n\n          {{       valid       }}\n\n    baz'\n    i18n=\"Normal i18n text\"\n    i18n=\"This is a very long internationalization description text, exceeding the configured print width, but could easily be formatted\"\n    i18n-test=\"Attribute i18n text\"\n    i18n-test=\"This is a very long internationalization description text, exceeding the configured print width, but could easily be formatted\"\n    i18n=\"This is a very long internationalization description text, exceeding the configured print width, but could easily be formatted\" i18n=\"This is yet another very long internationalization description text, exceeding the configured print width, but could easily be formatted\"\n    i18n=\"@@customId\"\n    i18n=\"Some description@@customIdWithDescription\"\n    i18n=\"some meaning|Some description@@customIdWithDescription\"\n    i18n=\"some meaning|Some very long internationalization description text exceeding the configured print width@@customIdWithDescription\"\n></div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\"a | b: c : d : e\"\n  bind-target=\"a | b: c : d : e\"\n  [target]=\"a | b: c : d : e\"\n  [target]=\"a | pipe\"\n  [target]=\"0 - 1\"\n  [target]=\"-1\"\n  [target]=\"a ? 1 : 2\"\n  [target]=\"\"\n  [target]=\"a(1)(2)\"\n  [target]=\"a[b]\"\n  [target]=\"[1]\"\n  [target]=\"{ a: 1 }\"\n  [target]=\"{ a: 1 }\"\n  [target]=\"{\n    trailingComma: 'notAllowed'\n  }\"\n  [target]=\"[\n    longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong\n  ]\"\n  [target]=\"true\"\n  [target]=\"undefined\"\n  [target]=\"null\"\n  [target]=\"1\"\n  [target]=\"1\"\n  [target]=\"'hello'\"\n  [target]=\"a(1, 2)\"\n  [target]=\"a.b(1, 2)\"\n  [target]=\"x!\"\n  [target]=\"!x\"\n  [target]=\"a\"\n  [target]=\"a\"\n  [target]=\"a // hello\"\n  [target]=\"a.b\"\n  [target]=\"a?.b\"\n  [target]=\"a?.[b]\"\n  [target]=\" javascript : 'hello world' \"\n  [target]=\"a?.b()\"\n  [target]=\"a?.b\"\n  [target]=\"this.a\"\n  on-target=\"a = 1\"\n  (target)=\"a = 1\"\n  (target)=\"a.b = 1\"\n  (target)=\"a[b] = 1\"\n  (target)=\"(a) // hello\"\n  (target)=\"(a); (b)\"\n  (event)=\"(0)\"\n  (event)=\"(a.b)\"\n  (event)=\"(a?.b)\"\n  (event)=\"(a?.[b])\"\n  (event)=\"(hello)\"\n  (event)=\"hello()\"\n  (event)=\"(a && b)\"\n  (event)=\"a && b()\"\n  (event)=\"foo = $event\"\n  (event)=\"(foo == $event)\"\n  *ngIf=\"something ? true : false\"\n  *ngIf=\"a | pipe\"\n  *ngFor=\"let hero of heroes\"\n  *ngFor=\"\n    let hero of [1, 2, 3, 666666666666666666666666666666666666];\n    let i = index\n  \"\n  *ngFor=\"let hero of heroes; trackBy: trackByHeroes\"\n  *ngFor=\"let item of items; index as i; trackBy: trackByFn\"\n  *ngFor=\"let hero of heroes; let i = index\"\n  *ngFor=\"let hero of heroes; value: myValue\"\n  *ngIf=\"condition; else elseBlock\"\n  *ngIf=\"condition; then thenBlock; else elseBlock\"\n  *ngIf=\"condition as value; else elseBlock\"\n  *directive=\"let hero\"\n  *directive=\"let hero = hello\"\n  *directive=\"let hero of heroes\"\n  *directive=\"let hero of heroes\"\n  *directive=\"a\"\n  *directive=\"a as b\"\n  *directive=\"a; b\"\n  *directive=\"a; b\"\n  *directive=\"a; b: c\"\n  *directive=\"a; b: c\"\n  *directive=\"a; b: c as d\"\n  *directive=\"a; b as c\"\n  *ngIf=\"\n    listRow.NextScheduledSendStatus == 1 ||\n    listRow.NextScheduledSendStatus == 2 ||\n    listRow.NextScheduledSendStatus == 3\n  \"\n  *ngIf=\"\n    listRow.NextScheduledSendStatus == 1 ||\n      listRow.NextScheduledSendStatus == 2 ||\n      listRow.NextScheduledSendStatus == 3;\n    else hello\n  \"\n  (target)=\"\n    (listRow.NextScheduledSendStatus == 1 ||\n      listRow.NextScheduledSendStatus == 2 ||\n      listRow.NextScheduledSendStatus == 3)\n  \"\n  [target]=\"\n    listRow.NextScheduledSendStatus == 1 ||\n    listRow.NextScheduledSendStatus == 2 ||\n    listRow.NextScheduledSendStatus == 3\n  \"\n  [target]=\"{\n    longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true\n  }\"\n  [error]=\"'We couldn\\\\\\\\\\\\'t find anything with that name.'\"\n  *ngIf=\"form.controls.details?.controls.amount?.errors.min\"\n  [ngClass]=\"{\n    'btn-success': (dialog$ | async).level === dialogLevelEnum.SUCCESS,\n    'btn-warning': (dialog$ | async).level === dialogLevelEnum.WARNING,\n    'btn-svg': (dialog$ | async).level === dialogLevelEnum.DANGER\n  }\"\n  [stickout]=\"+toolAssembly.stickoutMm\"\n  test=\"{{ 'test' | translate }}\"\n  test=\"foo {{       invalid invalid       }} bar {{ valid }} baz\"\n  test=\"foo\n\n    {{       invalid\n             invalid       }}\n\n    bar\n\n          {{ valid }}\n\n    baz\"\n  i18n=\"Normal i18n text\"\n  i18n=\"\n    This is a very long internationalization description text, exceeding the\n    configured print width, but could easily be formatted\n  \"\n  i18n-test=\"Attribute i18n text\"\n  i18n-test=\"\n    This is a very long internationalization description text, exceeding the\n    configured print width, but could easily be formatted\n  \"\n  i18n=\"\n    This is a very long internationalization description text, exceeding the\n    configured print width, but could easily be formatted\n  \"\n  i18n=\"\n    This is yet another very long internationalization description text,\n    exceeding the configured print width, but could easily be formatted\n  \"\n  i18n=\"@@customId\"\n  i18n=\"Some description@@customIdWithDescription\"\n  i18n=\"some meaning|Some description@@customIdWithDescription\"\n  i18n=\"\n    some meaning|Some very long internationalization description text exceeding\n    the configured print width@@customIdWithDescription\"\n></div>");
}
#[test]
fn test_first_lf_component_html_bracket_spacingfalse_format_1_a16b8ced() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .bracket_spacing(false)
        .parser("component.html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<textarea>{{ generatedDiscountCodes }}</textarea>\n<textarea>\n{{ generatedDiscountCodes }}</textarea>\n<textarea>\n    {{ generatedDiscountCodes }}</textarea>\n<textarea>  \n{{ generatedDiscountCodes }}</textarea>\n<textarea>  \n    {{ generatedDiscountCodes }}</textarea>\n<textarea>{{ generatedDiscountCodes }}123</textarea>\n<textarea>\n{{ generatedDiscountCodes }}123</textarea>\n<textarea>\n    {{ generatedDiscountCodes }}123</textarea>\n<textarea>  \n{{ generatedDiscountCodes }}123</textarea>\n<textarea>  \n    {{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">\n{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">\n    {{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">  \n{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">  \n    {{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">\n{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">\n    {{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">  \n{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">  \n    {{ generatedDiscountCodes }}123</textarea>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<textarea>{{ generatedDiscountCodes }}</textarea>\n<textarea>{{ generatedDiscountCodes }}</textarea>\n<textarea>    {{ generatedDiscountCodes }}</textarea>\n<textarea>\n  \n{{ generatedDiscountCodes }}</textarea\n>\n<textarea>\n  \n    {{ generatedDiscountCodes }}</textarea\n>\n<textarea>{{ generatedDiscountCodes }}123</textarea>\n<textarea>{{ generatedDiscountCodes }}123</textarea>\n<textarea>    {{ generatedDiscountCodes }}123</textarea>\n<textarea>\n  \n{{ generatedDiscountCodes }}123</textarea\n>\n<textarea>\n  \n    {{ generatedDiscountCodes }}123</textarea\n>\n<textarea type=\"text\">{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">    {{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">\n  \n{{ generatedDiscountCodes }}</textarea\n>\n<textarea type=\"text\">\n  \n    {{ generatedDiscountCodes }}</textarea\n>\n<textarea type=\"text\">{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">    {{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">\n  \n{{ generatedDiscountCodes }}123</textarea\n>\n<textarea type=\"text\">\n  \n    {{ generatedDiscountCodes }}123</textarea\n>");
}
#[test]
fn test_first_lf_component_html_html_whitespace_sensitivityignore_format_1_a16b8ced() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .html_whitespace_sensitivity("ignore")
        .parser("component.html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<textarea>{{ generatedDiscountCodes }}</textarea>\n<textarea>\n{{ generatedDiscountCodes }}</textarea>\n<textarea>\n    {{ generatedDiscountCodes }}</textarea>\n<textarea>  \n{{ generatedDiscountCodes }}</textarea>\n<textarea>  \n    {{ generatedDiscountCodes }}</textarea>\n<textarea>{{ generatedDiscountCodes }}123</textarea>\n<textarea>\n{{ generatedDiscountCodes }}123</textarea>\n<textarea>\n    {{ generatedDiscountCodes }}123</textarea>\n<textarea>  \n{{ generatedDiscountCodes }}123</textarea>\n<textarea>  \n    {{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">\n{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">\n    {{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">  \n{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">  \n    {{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">\n{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">\n    {{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">  \n{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">  \n    {{ generatedDiscountCodes }}123</textarea>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<textarea>{{ generatedDiscountCodes }}</textarea>\n<textarea>{{ generatedDiscountCodes }}</textarea>\n<textarea>    {{ generatedDiscountCodes }}</textarea>\n<textarea>\n  \n{{ generatedDiscountCodes }}</textarea\n>\n<textarea>\n  \n    {{ generatedDiscountCodes }}</textarea\n>\n<textarea>{{ generatedDiscountCodes }}123</textarea>\n<textarea>{{ generatedDiscountCodes }}123</textarea>\n<textarea>    {{ generatedDiscountCodes }}123</textarea>\n<textarea>\n  \n{{ generatedDiscountCodes }}123</textarea\n>\n<textarea>\n  \n    {{ generatedDiscountCodes }}123</textarea\n>\n<textarea type=\"text\">{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">    {{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">\n  \n{{ generatedDiscountCodes }}</textarea\n>\n<textarea type=\"text\">\n  \n    {{ generatedDiscountCodes }}</textarea\n>\n<textarea type=\"text\">{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">    {{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">\n  \n{{ generatedDiscountCodes }}123</textarea\n>\n<textarea type=\"text\">\n  \n    {{ generatedDiscountCodes }}123</textarea\n>");
}
#[test]
fn test_first_lf_component_html_print_width_1_format_1_a16b8ced() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(1)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<textarea>{{ generatedDiscountCodes }}</textarea>\n<textarea>\n{{ generatedDiscountCodes }}</textarea>\n<textarea>\n    {{ generatedDiscountCodes }}</textarea>\n<textarea>  \n{{ generatedDiscountCodes }}</textarea>\n<textarea>  \n    {{ generatedDiscountCodes }}</textarea>\n<textarea>{{ generatedDiscountCodes }}123</textarea>\n<textarea>\n{{ generatedDiscountCodes }}123</textarea>\n<textarea>\n    {{ generatedDiscountCodes }}123</textarea>\n<textarea>  \n{{ generatedDiscountCodes }}123</textarea>\n<textarea>  \n    {{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">\n{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">\n    {{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">  \n{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">  \n    {{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">\n{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">\n    {{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">  \n{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">  \n    {{ generatedDiscountCodes }}123</textarea>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<textarea\n  >{{\n    generatedDiscountCodes\n  }}</textarea\n>\n<textarea\n  >{{\n    generatedDiscountCodes\n  }}</textarea\n>\n<textarea>\n    {{\n    generatedDiscountCodes\n  }}</textarea\n>\n<textarea>\n  \n{{\n    generatedDiscountCodes\n  }}</textarea\n>\n<textarea>\n  \n    {{\n    generatedDiscountCodes\n  }}</textarea\n>\n<textarea\n  >{{\n    generatedDiscountCodes\n  }}123</textarea\n>\n<textarea\n  >{{\n    generatedDiscountCodes\n  }}123</textarea\n>\n<textarea>\n    {{\n    generatedDiscountCodes\n  }}123</textarea\n>\n<textarea>\n  \n{{\n    generatedDiscountCodes\n  }}123</textarea\n>\n<textarea>\n  \n    {{\n    generatedDiscountCodes\n  }}123</textarea\n>\n<textarea\n  type=\"text\"\n  >{{\n    generatedDiscountCodes\n  }}</textarea\n>\n<textarea\n  type=\"text\"\n  >{{\n    generatedDiscountCodes\n  }}</textarea\n>\n<textarea\n  type=\"text\"\n>\n    {{\n    generatedDiscountCodes\n  }}</textarea\n>\n<textarea\n  type=\"text\"\n>\n  \n{{\n    generatedDiscountCodes\n  }}</textarea\n>\n<textarea\n  type=\"text\"\n>\n  \n    {{\n    generatedDiscountCodes\n  }}</textarea\n>\n<textarea\n  type=\"text\"\n  >{{\n    generatedDiscountCodes\n  }}123</textarea\n>\n<textarea\n  type=\"text\"\n  >{{\n    generatedDiscountCodes\n  }}123</textarea\n>\n<textarea\n  type=\"text\"\n>\n    {{\n    generatedDiscountCodes\n  }}123</textarea\n>\n<textarea\n  type=\"text\"\n>\n  \n{{\n    generatedDiscountCodes\n  }}123</textarea\n>\n<textarea\n  type=\"text\"\n>\n  \n    {{\n    generatedDiscountCodes\n  }}123</textarea\n>");
}
#[test]
fn test_first_lf_component_html_trailing_commaes_5_format_1_a16b8ced() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(80)
        .trailing_comma("es5")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<textarea>{{ generatedDiscountCodes }}</textarea>\n<textarea>\n{{ generatedDiscountCodes }}</textarea>\n<textarea>\n    {{ generatedDiscountCodes }}</textarea>\n<textarea>  \n{{ generatedDiscountCodes }}</textarea>\n<textarea>  \n    {{ generatedDiscountCodes }}</textarea>\n<textarea>{{ generatedDiscountCodes }}123</textarea>\n<textarea>\n{{ generatedDiscountCodes }}123</textarea>\n<textarea>\n    {{ generatedDiscountCodes }}123</textarea>\n<textarea>  \n{{ generatedDiscountCodes }}123</textarea>\n<textarea>  \n    {{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">\n{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">\n    {{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">  \n{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">  \n    {{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">\n{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">\n    {{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">  \n{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">  \n    {{ generatedDiscountCodes }}123</textarea>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<textarea>{{ generatedDiscountCodes }}</textarea>\n<textarea>{{ generatedDiscountCodes }}</textarea>\n<textarea>    {{ generatedDiscountCodes }}</textarea>\n<textarea>\n  \n{{ generatedDiscountCodes }}</textarea\n>\n<textarea>\n  \n    {{ generatedDiscountCodes }}</textarea\n>\n<textarea>{{ generatedDiscountCodes }}123</textarea>\n<textarea>{{ generatedDiscountCodes }}123</textarea>\n<textarea>    {{ generatedDiscountCodes }}123</textarea>\n<textarea>\n  \n{{ generatedDiscountCodes }}123</textarea\n>\n<textarea>\n  \n    {{ generatedDiscountCodes }}123</textarea\n>\n<textarea type=\"text\">{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">    {{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">\n  \n{{ generatedDiscountCodes }}</textarea\n>\n<textarea type=\"text\">\n  \n    {{ generatedDiscountCodes }}</textarea\n>\n<textarea type=\"text\">{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">    {{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">\n  \n{{ generatedDiscountCodes }}123</textarea\n>\n<textarea type=\"text\">\n  \n    {{ generatedDiscountCodes }}123</textarea\n>");
}
#[test]
fn test_first_lf_component_html_trailing_commanone_format_1_a16b8ced() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(80)
        .trailing_comma("none")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<textarea>{{ generatedDiscountCodes }}</textarea>\n<textarea>\n{{ generatedDiscountCodes }}</textarea>\n<textarea>\n    {{ generatedDiscountCodes }}</textarea>\n<textarea>  \n{{ generatedDiscountCodes }}</textarea>\n<textarea>  \n    {{ generatedDiscountCodes }}</textarea>\n<textarea>{{ generatedDiscountCodes }}123</textarea>\n<textarea>\n{{ generatedDiscountCodes }}123</textarea>\n<textarea>\n    {{ generatedDiscountCodes }}123</textarea>\n<textarea>  \n{{ generatedDiscountCodes }}123</textarea>\n<textarea>  \n    {{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">\n{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">\n    {{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">  \n{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">  \n    {{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">\n{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">\n    {{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">  \n{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">  \n    {{ generatedDiscountCodes }}123</textarea>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<textarea>{{ generatedDiscountCodes }}</textarea>\n<textarea>{{ generatedDiscountCodes }}</textarea>\n<textarea>    {{ generatedDiscountCodes }}</textarea>\n<textarea>\n  \n{{ generatedDiscountCodes }}</textarea\n>\n<textarea>\n  \n    {{ generatedDiscountCodes }}</textarea\n>\n<textarea>{{ generatedDiscountCodes }}123</textarea>\n<textarea>{{ generatedDiscountCodes }}123</textarea>\n<textarea>    {{ generatedDiscountCodes }}123</textarea>\n<textarea>\n  \n{{ generatedDiscountCodes }}123</textarea\n>\n<textarea>\n  \n    {{ generatedDiscountCodes }}123</textarea\n>\n<textarea type=\"text\">{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">    {{ generatedDiscountCodes }}</textarea>\n<textarea type=\"text\">\n  \n{{ generatedDiscountCodes }}</textarea\n>\n<textarea type=\"text\">\n  \n    {{ generatedDiscountCodes }}</textarea\n>\n<textarea type=\"text\">{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">{{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">    {{ generatedDiscountCodes }}123</textarea>\n<textarea type=\"text\">\n  \n{{ generatedDiscountCodes }}123</textarea\n>\n<textarea type=\"text\">\n  \n    {{ generatedDiscountCodes }}123</textarea\n>");
}
#[test]
fn test_ignore_attribute_component_html_bracket_spacingfalse_format_1_11d414cb() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .bracket_spacing(false)
        .parser("component.html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute bind-target -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute [(target)] bind-target -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\"a | b: c : d : e\"\n  bind-target=\"a | b: c : d : e\"\n></div>\n<!--  prettier-ignore-attribute -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute bind-target -->\n<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\"a | b: c : d : e\"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute [(target)] bind-target -->\n<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>");
}
#[test]
fn test_ignore_attribute_component_html_html_whitespace_sensitivityignore_format_1_11d414cb() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .html_whitespace_sensitivity("ignore")
        .parser("component.html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute bind-target -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute [(target)] bind-target -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\"a | b: c : d : e\"\n  bind-target=\"a | b: c : d : e\"\n></div>\n<!--  prettier-ignore-attribute -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute bind-target -->\n<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\"a | b: c : d : e\"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute [(target)] bind-target -->\n<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>");
}
#[test]
fn test_ignore_attribute_component_html_print_width_1_format_1_11d414cb() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(1)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute bind-target -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute [(target)] bind-target -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div\n  bindon-target=\"\n    a\n      | b\n        : c\n        : d\n        : e\n  \"\n  [(target)]=\"\n    a\n      | b\n        : c\n        : d\n        : e\n  \"\n  bind-target=\"\n    a\n      | b\n        : c\n        : d\n        : e\n  \"\n></div>\n<!--  prettier-ignore-attribute -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute bind-target -->\n<div\n  bindon-target=\"\n    a\n      | b\n        : c\n        : d\n        : e\n  \"\n  [(target)]=\"\n    a\n      | b\n        : c\n        : d\n        : e\n  \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute [(target)] bind-target -->\n<div\n  bindon-target=\"\n    a\n      | b\n        : c\n        : d\n        : e\n  \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>");
}
#[test]
fn test_ignore_attribute_component_html_trailing_commaes_5_format_1_11d414cb() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(80)
        .trailing_comma("es5")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute bind-target -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute [(target)] bind-target -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\"a | b: c : d : e\"\n  bind-target=\"a | b: c : d : e\"\n></div>\n<!--  prettier-ignore-attribute -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute bind-target -->\n<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\"a | b: c : d : e\"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute [(target)] bind-target -->\n<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>");
}
#[test]
fn test_ignore_attribute_component_html_trailing_commanone_format_1_11d414cb() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(80)
        .trailing_comma("none")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute bind-target -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute [(target)] bind-target -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\"a | b: c : d : e\"\n  bind-target=\"a | b: c : d : e\"\n></div>\n<!--  prettier-ignore-attribute -->\n<div\n  bindon-target=\" a | b : c:d :e \"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute bind-target -->\n<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\"a | b: c : d : e\"\n  bind-target=\" a | b : c:d :e \"\n></div>\n<!--  prettier-ignore-attribute [(target)] bind-target -->\n<div\n  bindon-target=\"a | b: c : d : e\"\n  [(target)]=\" a | b : c:d :e \"\n  bind-target=\" a | b : c:d :e \"\n></div>");
}
#[test]
fn test_interpolation_component_html_bracket_spacingfalse_format_1_afeae2c0() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .bracket_spacing(false)
        .parser("component.html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div>{{ a | b : c:d :e }}</div>\n<div>{{  a | pipe    }}</div>\n<div>{{ 0 - 1 }}</div>\n<div>{{ - 1 }}</div>\n<div>{{ a ? 1 : 2 }}</div>\n<div>{{ a ( 1 ) ( 2 ) }}</div>\n<div>{{ a [ b ] }}</div>\n<div>{{ [ 1 ] }}</div>\n<div>{{ { 'a' : 1 } }}</div>\n<div>{{ { a : 1 } }}</div>\n<div>{{ true }}</div>\n<div>{{ undefined }}</div>\n<div>{{ null }}</div>\n<div>{{ ( 1 ) }}</div>\n<div>{{ 1 }}</div>\n<div>{{  'hello' }}</div>\n<div>{{ a ( 1 , 2 ) }}</div>\n<div>{{ a . b ( 1 , 2 ) }}</div>\n<div>{{ x ! }}</div>\n<div>{{ ! x }}</div>\n<div>{{ ( ( a ) ) }}</div>\n<div>{{ a }}</div>\n<div>{{ a // hello }}</div>\n<div>{{ a . b }}</div>\n<div>{{ a ?. b ( ) }}</div>\n<div>{{ a ?. b }}</div>\n<div>{{  a // hello  }}</div>\n<label for=\"transmissionLayoutRadioButton\">{{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}}</label>\n<label for=\"transmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButton\">{{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}}</label>\n<label for=\"transmissionLayoutRadioButton\">{{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}} </label>\n<label for=\"transmissionLayoutRadioButton\"> {{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}}</label>\n<label for=\"transmissionLayoutRadioButton\"> {{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}} </label>\n<div class=\"Nemo possimus non voluptates dicta accusamus id quia\">{{copyTypes[options.copyType]}}</div>\n{{listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3}}\n<span\n><!--\n--><span\n  >{{a}}</span\n><!--\n--><span\n  >{{b}}</span\n><!--\n--></span>\n<span>\n  {{ aNormalValue | aPipe }}:\n  <strong>{{ aReallyReallySuperLongValue | andASuperLongPipeJustToBreakThis }}</strong>\n</span>\n<p>\n  {{\n      'delete'\n          | translate: {what: ('entities' | translate: {count: array.length})}\n  }}\n</p>\n<p>{{ {a:1+{} } }}</p>\n<p>{{ {a:a==={} } }}</p>\n<p>{{ {a:!{} } }}</p>\n<p>{{ {a:a?b:{} } }}</p>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div>{{ a | b: c : d : e }}</div>\n<div>{{ a | pipe }}</div>\n<div>{{ 0 - 1 }}</div>\n<div>{{ -1 }}</div>\n<div>{{ a ? 1 : 2 }}</div>\n<div>{{ a(1)(2) }}</div>\n<div>{{ a[b] }}</div>\n<div>{{ [1] }}</div>\n<div>{{ {a: 1} }}</div>\n<div>{{ {a: 1} }}</div>\n<div>{{ true }}</div>\n<div>{{ undefined }}</div>\n<div>{{ null }}</div>\n<div>{{ 1 }}</div>\n<div>{{ 1 }}</div>\n<div>{{ \"hello\" }}</div>\n<div>{{ a(1, 2) }}</div>\n<div>{{ a.b(1, 2) }}</div>\n<div>{{ x! }}</div>\n<div>{{ !x }}</div>\n<div>{{ a }}</div>\n<div>{{ a }}</div>\n<div>{{ a // hello }}</div>\n<div>{{ a.b }}</div>\n<div>{{ a?.b() }}</div>\n<div>{{ a?.b }}</div>\n<div>{{ a // hello }}</div>\n<label for=\"transmissionLayoutRadioButton\">{{\n  \"SearchSelection.transmissionLayoutRadioButton\"\n    | localize: localizationSection\n}}</label>\n<label\n  for=\"transmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButton\"\n  >{{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}</label\n>\n<label for=\"transmissionLayoutRadioButton\"\n  >{{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}\n</label>\n<label for=\"transmissionLayoutRadioButton\">\n  {{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}</label\n>\n<label for=\"transmissionLayoutRadioButton\">\n  {{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}\n</label>\n<div class=\"Nemo possimus non voluptates dicta accusamus id quia\">\n  {{ copyTypes[options.copyType] }}\n</div>\n{{\n  listRow.NextScheduledSendStatus == 1 ||\n    listRow.NextScheduledSendStatus == 2 ||\n    listRow.NextScheduledSendStatus == 3\n}}\n<span\n  ><!--\n--><span>{{ a }}</span\n  ><!--\n--><span>{{ b }}</span\n  ><!--\n--></span>\n<span>\n  {{ aNormalValue | aPipe }}:\n  <strong>{{\n    aReallyReallySuperLongValue | andASuperLongPipeJustToBreakThis\n  }}</strong>\n</span>\n<p>\n  {{\n    \"delete\"\n      | translate: {what: (\"entities\" | translate: ({count: array.length}))}\n  }}\n</p>\n<p>{{ {a: 1 + ({})} }}</p>\n<p>{{ {a: a === ({})} }}</p>\n<p>{{ {a: !({})} }}</p>\n<p>{{ {a: a ? b : ({})} }}</p>");
}
#[test]
fn test_interpolation_component_html_html_whitespace_sensitivityignore_format_1_afeae2c0() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .html_whitespace_sensitivity("ignore")
        .parser("component.html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div>{{ a | b : c:d :e }}</div>\n<div>{{  a | pipe    }}</div>\n<div>{{ 0 - 1 }}</div>\n<div>{{ - 1 }}</div>\n<div>{{ a ? 1 : 2 }}</div>\n<div>{{ a ( 1 ) ( 2 ) }}</div>\n<div>{{ a [ b ] }}</div>\n<div>{{ [ 1 ] }}</div>\n<div>{{ { 'a' : 1 } }}</div>\n<div>{{ { a : 1 } }}</div>\n<div>{{ true }}</div>\n<div>{{ undefined }}</div>\n<div>{{ null }}</div>\n<div>{{ ( 1 ) }}</div>\n<div>{{ 1 }}</div>\n<div>{{  'hello' }}</div>\n<div>{{ a ( 1 , 2 ) }}</div>\n<div>{{ a . b ( 1 , 2 ) }}</div>\n<div>{{ x ! }}</div>\n<div>{{ ! x }}</div>\n<div>{{ ( ( a ) ) }}</div>\n<div>{{ a }}</div>\n<div>{{ a // hello }}</div>\n<div>{{ a . b }}</div>\n<div>{{ a ?. b ( ) }}</div>\n<div>{{ a ?. b }}</div>\n<div>{{  a // hello  }}</div>\n<label for=\"transmissionLayoutRadioButton\">{{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}}</label>\n<label for=\"transmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButton\">{{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}}</label>\n<label for=\"transmissionLayoutRadioButton\">{{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}} </label>\n<label for=\"transmissionLayoutRadioButton\"> {{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}}</label>\n<label for=\"transmissionLayoutRadioButton\"> {{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}} </label>\n<div class=\"Nemo possimus non voluptates dicta accusamus id quia\">{{copyTypes[options.copyType]}}</div>\n{{listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3}}\n<span\n><!--\n--><span\n  >{{a}}</span\n><!--\n--><span\n  >{{b}}</span\n><!--\n--></span>\n<span>\n  {{ aNormalValue | aPipe }}:\n  <strong>{{ aReallyReallySuperLongValue | andASuperLongPipeJustToBreakThis }}</strong>\n</span>\n<p>\n  {{\n      'delete'\n          | translate: {what: ('entities' | translate: {count: array.length})}\n  }}\n</p>\n<p>{{ {a:1+{} } }}</p>\n<p>{{ {a:a==={} } }}</p>\n<p>{{ {a:!{} } }}</p>\n<p>{{ {a:a?b:{} } }}</p>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div>{{ a | b: c : d : e }}</div>\n<div>{{ a | pipe }}</div>\n<div>{{ 0 - 1 }}</div>\n<div>{{ -1 }}</div>\n<div>{{ a ? 1 : 2 }}</div>\n<div>{{ a(1)(2) }}</div>\n<div>{{ a[b] }}</div>\n<div>{{ [1] }}</div>\n<div>{{ { a: 1 } }}</div>\n<div>{{ { a: 1 } }}</div>\n<div>{{ true }}</div>\n<div>{{ undefined }}</div>\n<div>{{ null }}</div>\n<div>{{ 1 }}</div>\n<div>{{ 1 }}</div>\n<div>{{ \"hello\" }}</div>\n<div>{{ a(1, 2) }}</div>\n<div>{{ a.b(1, 2) }}</div>\n<div>{{ x! }}</div>\n<div>{{ !x }}</div>\n<div>{{ a }}</div>\n<div>{{ a }}</div>\n<div>{{ a // hello }}</div>\n<div>{{ a.b }}</div>\n<div>{{ a?.b() }}</div>\n<div>{{ a?.b }}</div>\n<div>{{ a // hello }}</div>\n<label for=\"transmissionLayoutRadioButton\">\n  {{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}\n</label>\n<label\n  for=\"transmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButton\"\n>\n  {{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}\n</label>\n<label for=\"transmissionLayoutRadioButton\">\n  {{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}\n</label>\n<label for=\"transmissionLayoutRadioButton\">\n  {{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}\n</label>\n<label for=\"transmissionLayoutRadioButton\">\n  {{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}\n</label>\n<div class=\"Nemo possimus non voluptates dicta accusamus id quia\">\n  {{ copyTypes[options.copyType] }}\n</div>\n{{\n  listRow.NextScheduledSendStatus == 1 ||\n    listRow.NextScheduledSendStatus == 2 ||\n    listRow.NextScheduledSendStatus == 3\n}}\n<span>\n  <!--\n-->\n  <span>{{ a }}</span>\n  <!--\n-->\n  <span>{{ b }}</span>\n  <!--\n--></span>\n<span>\n  {{ aNormalValue | aPipe }}:\n  <strong>\n    {{ aReallyReallySuperLongValue | andASuperLongPipeJustToBreakThis }}\n  </strong>\n</span>\n<p>\n  {{\n    \"delete\"\n      | translate: { what: (\"entities\" | translate: { count: array.length }) }\n  }}\n</p>\n<p>{{ { a: 1 + {} } }}</p>\n<p>{{ { a: a === {} } }}</p>\n<p>{{ { a: !{} } }}</p>\n<p>{{ { a: a ? b : {} } }}</p>");
}
#[test]
fn test_interpolation_component_html_print_width_1_format_1_afeae2c0() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(1)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div>{{ a | b : c:d :e }}</div>\n<div>{{  a | pipe    }}</div>\n<div>{{ 0 - 1 }}</div>\n<div>{{ - 1 }}</div>\n<div>{{ a ? 1 : 2 }}</div>\n<div>{{ a ( 1 ) ( 2 ) }}</div>\n<div>{{ a [ b ] }}</div>\n<div>{{ [ 1 ] }}</div>\n<div>{{ { 'a' : 1 } }}</div>\n<div>{{ { a : 1 } }}</div>\n<div>{{ true }}</div>\n<div>{{ undefined }}</div>\n<div>{{ null }}</div>\n<div>{{ ( 1 ) }}</div>\n<div>{{ 1 }}</div>\n<div>{{  'hello' }}</div>\n<div>{{ a ( 1 , 2 ) }}</div>\n<div>{{ a . b ( 1 , 2 ) }}</div>\n<div>{{ x ! }}</div>\n<div>{{ ! x }}</div>\n<div>{{ ( ( a ) ) }}</div>\n<div>{{ a }}</div>\n<div>{{ a // hello }}</div>\n<div>{{ a . b }}</div>\n<div>{{ a ?. b ( ) }}</div>\n<div>{{ a ?. b }}</div>\n<div>{{  a // hello  }}</div>\n<label for=\"transmissionLayoutRadioButton\">{{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}}</label>\n<label for=\"transmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButton\">{{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}}</label>\n<label for=\"transmissionLayoutRadioButton\">{{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}} </label>\n<label for=\"transmissionLayoutRadioButton\"> {{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}}</label>\n<label for=\"transmissionLayoutRadioButton\"> {{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}} </label>\n<div class=\"Nemo possimus non voluptates dicta accusamus id quia\">{{copyTypes[options.copyType]}}</div>\n{{listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3}}\n<span\n><!--\n--><span\n  >{{a}}</span\n><!--\n--><span\n  >{{b}}</span\n><!--\n--></span>\n<span>\n  {{ aNormalValue | aPipe }}:\n  <strong>{{ aReallyReallySuperLongValue | andASuperLongPipeJustToBreakThis }}</strong>\n</span>\n<p>\n  {{\n      'delete'\n          | translate: {what: ('entities' | translate: {count: array.length})}\n  }}\n</p>\n<p>{{ {a:1+{} } }}</p>\n<p>{{ {a:a==={} } }}</p>\n<p>{{ {a:!{} } }}</p>\n<p>{{ {a:a?b:{} } }}</p>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div>\n  {{\n    a\n      | b\n        : c\n        : d\n        : e\n  }}\n</div>\n<div>\n  {{\n    a\n      | pipe\n  }}\n</div>\n<div>\n  {{\n    0 -\n      1\n  }}\n</div>\n<div>\n  {{\n    -1\n  }}\n</div>\n<div>\n  {{\n    a\n      ? 1\n      : 2\n  }}\n</div>\n<div>\n  {{\n    a(\n      1\n    )(\n      2\n    )\n  }}\n</div>\n<div>\n  {{\n    a[\n      b\n    ]\n  }}\n</div>\n<div>\n  {{\n    [\n      1\n    ]\n  }}\n</div>\n<div>\n  {{\n    {\n      a: 1\n    }\n  }}\n</div>\n<div>\n  {{\n    {\n      a: 1\n    }\n  }}\n</div>\n<div>\n  {{\n    true\n  }}\n</div>\n<div>\n  {{\n    undefined\n  }}\n</div>\n<div>\n  {{\n    null\n  }}\n</div>\n<div>\n  {{\n    1\n  }}\n</div>\n<div>\n  {{\n    1\n  }}\n</div>\n<div>\n  {{\n    \"hello\"\n  }}\n</div>\n<div>\n  {{\n    a(\n      1,\n      2\n    )\n  }}\n</div>\n<div>\n  {{\n    a.b(\n      1,\n      2\n    )\n  }}\n</div>\n<div>\n  {{\n    x!\n  }}\n</div>\n<div>\n  {{\n    !x\n  }}\n</div>\n<div>\n  {{\n    a\n  }}\n</div>\n<div>\n  {{\n    a\n  }}\n</div>\n<div>\n  {{\n    a // hello\n  }}\n</div>\n<div>\n  {{\n    a.b\n  }}\n</div>\n<div>\n  {{\n    a?.b()\n  }}\n</div>\n<div>\n  {{\n    a?.b\n  }}\n</div>\n<div>\n  {{\n    a // hello\n  }}\n</div>\n<label\n  for=\"transmissionLayoutRadioButton\"\n  >{{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize\n        : localizationSection\n  }}</label\n>\n<label\n  for=\"transmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButton\"\n  >{{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize\n        : localizationSection\n  }}</label\n>\n<label\n  for=\"transmissionLayoutRadioButton\"\n  >{{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize\n        : localizationSection\n  }}\n</label>\n<label\n  for=\"transmissionLayoutRadioButton\"\n>\n  {{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize\n        : localizationSection\n  }}</label\n>\n<label\n  for=\"transmissionLayoutRadioButton\"\n>\n  {{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize\n        : localizationSection\n  }}\n</label>\n<div\n  class=\"Nemo possimus non voluptates dicta accusamus id quia\"\n>\n  {{\n    copyTypes[\n      options\n        .copyType\n    ]\n  }}\n</div>\n{{\n  listRow.NextScheduledSendStatus ==\n    1 ||\n    listRow.NextScheduledSendStatus ==\n      2 ||\n    listRow.NextScheduledSendStatus ==\n      3\n}}\n<span\n  ><!--\n--><span\n    >{{\n      a\n    }}</span\n  ><!--\n--><span\n    >{{\n      b\n    }}</span\n  ><!--\n--></span>\n<span>\n  {{\n    aNormalValue\n      | aPipe\n  }}:\n  <strong\n    >{{\n      aReallyReallySuperLongValue\n        | andASuperLongPipeJustToBreakThis\n    }}</strong\n  >\n</span>\n<p>\n  {{\n    \"delete\"\n      | translate\n        : {\n            what:\n              (\"entities\"\n              | translate\n                : {\n                    count:\n                      array.length\n                  })\n          }\n  }}\n</p>\n<p>\n  {{\n    {\n      a:\n        1 +\n        {}\n    }\n  }}\n</p>\n<p>\n  {{\n    {\n      a:\n        a ===\n        {}\n    }\n  }}\n</p>\n<p>\n  {{\n    {\n      a: !{}\n    }\n  }}\n</p>\n<p>\n  {{\n    {\n      a: a\n        ? b\n        : {}\n    }\n  }}\n</p>");
}
#[test]
fn test_interpolation_component_html_trailing_commaes_5_format_1_afeae2c0() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(80)
        .trailing_comma("es5")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div>{{ a | b : c:d :e }}</div>\n<div>{{  a | pipe    }}</div>\n<div>{{ 0 - 1 }}</div>\n<div>{{ - 1 }}</div>\n<div>{{ a ? 1 : 2 }}</div>\n<div>{{ a ( 1 ) ( 2 ) }}</div>\n<div>{{ a [ b ] }}</div>\n<div>{{ [ 1 ] }}</div>\n<div>{{ { 'a' : 1 } }}</div>\n<div>{{ { a : 1 } }}</div>\n<div>{{ true }}</div>\n<div>{{ undefined }}</div>\n<div>{{ null }}</div>\n<div>{{ ( 1 ) }}</div>\n<div>{{ 1 }}</div>\n<div>{{  'hello' }}</div>\n<div>{{ a ( 1 , 2 ) }}</div>\n<div>{{ a . b ( 1 , 2 ) }}</div>\n<div>{{ x ! }}</div>\n<div>{{ ! x }}</div>\n<div>{{ ( ( a ) ) }}</div>\n<div>{{ a }}</div>\n<div>{{ a // hello }}</div>\n<div>{{ a . b }}</div>\n<div>{{ a ?. b ( ) }}</div>\n<div>{{ a ?. b }}</div>\n<div>{{  a // hello  }}</div>\n<label for=\"transmissionLayoutRadioButton\">{{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}}</label>\n<label for=\"transmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButton\">{{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}}</label>\n<label for=\"transmissionLayoutRadioButton\">{{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}} </label>\n<label for=\"transmissionLayoutRadioButton\"> {{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}}</label>\n<label for=\"transmissionLayoutRadioButton\"> {{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}} </label>\n<div class=\"Nemo possimus non voluptates dicta accusamus id quia\">{{copyTypes[options.copyType]}}</div>\n{{listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3}}\n<span\n><!--\n--><span\n  >{{a}}</span\n><!--\n--><span\n  >{{b}}</span\n><!--\n--></span>\n<span>\n  {{ aNormalValue | aPipe }}:\n  <strong>{{ aReallyReallySuperLongValue | andASuperLongPipeJustToBreakThis }}</strong>\n</span>\n<p>\n  {{\n      'delete'\n          | translate: {what: ('entities' | translate: {count: array.length})}\n  }}\n</p>\n<p>{{ {a:1+{} } }}</p>\n<p>{{ {a:a==={} } }}</p>\n<p>{{ {a:!{} } }}</p>\n<p>{{ {a:a?b:{} } }}</p>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div>{{ a | b: c : d : e }}</div>\n<div>{{ a | pipe }}</div>\n<div>{{ 0 - 1 }}</div>\n<div>{{ -1 }}</div>\n<div>{{ a ? 1 : 2 }}</div>\n<div>{{ a(1)(2) }}</div>\n<div>{{ a[b] }}</div>\n<div>{{ [1] }}</div>\n<div>{{ { a: 1 } }}</div>\n<div>{{ { a: 1 } }}</div>\n<div>{{ true }}</div>\n<div>{{ undefined }}</div>\n<div>{{ null }}</div>\n<div>{{ 1 }}</div>\n<div>{{ 1 }}</div>\n<div>{{ \"hello\" }}</div>\n<div>{{ a(1, 2) }}</div>\n<div>{{ a.b(1, 2) }}</div>\n<div>{{ x! }}</div>\n<div>{{ !x }}</div>\n<div>{{ a }}</div>\n<div>{{ a }}</div>\n<div>{{ a // hello }}</div>\n<div>{{ a.b }}</div>\n<div>{{ a?.b() }}</div>\n<div>{{ a?.b }}</div>\n<div>{{ a // hello }}</div>\n<label for=\"transmissionLayoutRadioButton\">{{\n  \"SearchSelection.transmissionLayoutRadioButton\"\n    | localize: localizationSection\n}}</label>\n<label\n  for=\"transmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButton\"\n  >{{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}</label\n>\n<label for=\"transmissionLayoutRadioButton\"\n  >{{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}\n</label>\n<label for=\"transmissionLayoutRadioButton\">\n  {{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}</label\n>\n<label for=\"transmissionLayoutRadioButton\">\n  {{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}\n</label>\n<div class=\"Nemo possimus non voluptates dicta accusamus id quia\">\n  {{ copyTypes[options.copyType] }}\n</div>\n{{\n  listRow.NextScheduledSendStatus == 1 ||\n    listRow.NextScheduledSendStatus == 2 ||\n    listRow.NextScheduledSendStatus == 3\n}}\n<span\n  ><!--\n--><span>{{ a }}</span\n  ><!--\n--><span>{{ b }}</span\n  ><!--\n--></span>\n<span>\n  {{ aNormalValue | aPipe }}:\n  <strong>{{\n    aReallyReallySuperLongValue | andASuperLongPipeJustToBreakThis\n  }}</strong>\n</span>\n<p>\n  {{\n    \"delete\"\n      | translate: { what: (\"entities\" | translate: { count: array.length }) }\n  }}\n</p>\n<p>{{ { a: 1 + {} } }}</p>\n<p>{{ { a: a === {} } }}</p>\n<p>{{ { a: !{} } }}</p>\n<p>{{ { a: a ? b : {} } }}</p>");
}
#[test]
fn test_interpolation_component_html_trailing_commanone_format_1_afeae2c0() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(80)
        .trailing_comma("none")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<div>{{ a | b : c:d :e }}</div>\n<div>{{  a | pipe    }}</div>\n<div>{{ 0 - 1 }}</div>\n<div>{{ - 1 }}</div>\n<div>{{ a ? 1 : 2 }}</div>\n<div>{{ a ( 1 ) ( 2 ) }}</div>\n<div>{{ a [ b ] }}</div>\n<div>{{ [ 1 ] }}</div>\n<div>{{ { 'a' : 1 } }}</div>\n<div>{{ { a : 1 } }}</div>\n<div>{{ true }}</div>\n<div>{{ undefined }}</div>\n<div>{{ null }}</div>\n<div>{{ ( 1 ) }}</div>\n<div>{{ 1 }}</div>\n<div>{{  'hello' }}</div>\n<div>{{ a ( 1 , 2 ) }}</div>\n<div>{{ a . b ( 1 , 2 ) }}</div>\n<div>{{ x ! }}</div>\n<div>{{ ! x }}</div>\n<div>{{ ( ( a ) ) }}</div>\n<div>{{ a }}</div>\n<div>{{ a // hello }}</div>\n<div>{{ a . b }}</div>\n<div>{{ a ?. b ( ) }}</div>\n<div>{{ a ?. b }}</div>\n<div>{{  a // hello  }}</div>\n<label for=\"transmissionLayoutRadioButton\">{{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}}</label>\n<label for=\"transmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButton\">{{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}}</label>\n<label for=\"transmissionLayoutRadioButton\">{{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}} </label>\n<label for=\"transmissionLayoutRadioButton\"> {{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}}</label>\n<label for=\"transmissionLayoutRadioButton\"> {{\n\"SearchSelection.transmissionLayoutRadioButton\" | localize:localizationSection\n}} </label>\n<div class=\"Nemo possimus non voluptates dicta accusamus id quia\">{{copyTypes[options.copyType]}}</div>\n{{listRow.NextScheduledSendStatus == 1 || listRow.NextScheduledSendStatus == 2 || listRow.NextScheduledSendStatus == 3}}\n<span\n><!--\n--><span\n  >{{a}}</span\n><!--\n--><span\n  >{{b}}</span\n><!--\n--></span>\n<span>\n  {{ aNormalValue | aPipe }}:\n  <strong>{{ aReallyReallySuperLongValue | andASuperLongPipeJustToBreakThis }}</strong>\n</span>\n<p>\n  {{\n      'delete'\n          | translate: {what: ('entities' | translate: {count: array.length})}\n  }}\n</p>\n<p>{{ {a:1+{} } }}</p>\n<p>{{ {a:a==={} } }}</p>\n<p>{{ {a:!{} } }}</p>\n<p>{{ {a:a?b:{} } }}</p>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div>{{ a | b: c : d : e }}</div>\n<div>{{ a | pipe }}</div>\n<div>{{ 0 - 1 }}</div>\n<div>{{ -1 }}</div>\n<div>{{ a ? 1 : 2 }}</div>\n<div>{{ a(1)(2) }}</div>\n<div>{{ a[b] }}</div>\n<div>{{ [1] }}</div>\n<div>{{ { a: 1 } }}</div>\n<div>{{ { a: 1 } }}</div>\n<div>{{ true }}</div>\n<div>{{ undefined }}</div>\n<div>{{ null }}</div>\n<div>{{ 1 }}</div>\n<div>{{ 1 }}</div>\n<div>{{ \"hello\" }}</div>\n<div>{{ a(1, 2) }}</div>\n<div>{{ a.b(1, 2) }}</div>\n<div>{{ x! }}</div>\n<div>{{ !x }}</div>\n<div>{{ a }}</div>\n<div>{{ a }}</div>\n<div>{{ a // hello }}</div>\n<div>{{ a.b }}</div>\n<div>{{ a?.b() }}</div>\n<div>{{ a?.b }}</div>\n<div>{{ a // hello }}</div>\n<label for=\"transmissionLayoutRadioButton\">{{\n  \"SearchSelection.transmissionLayoutRadioButton\"\n    | localize: localizationSection\n}}</label>\n<label\n  for=\"transmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButtontransmissionLayoutRadioButton\"\n  >{{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}</label\n>\n<label for=\"transmissionLayoutRadioButton\"\n  >{{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}\n</label>\n<label for=\"transmissionLayoutRadioButton\">\n  {{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}</label\n>\n<label for=\"transmissionLayoutRadioButton\">\n  {{\n    \"SearchSelection.transmissionLayoutRadioButton\"\n      | localize: localizationSection\n  }}\n</label>\n<div class=\"Nemo possimus non voluptates dicta accusamus id quia\">\n  {{ copyTypes[options.copyType] }}\n</div>\n{{\n  listRow.NextScheduledSendStatus == 1 ||\n    listRow.NextScheduledSendStatus == 2 ||\n    listRow.NextScheduledSendStatus == 3\n}}\n<span\n  ><!--\n--><span>{{ a }}</span\n  ><!--\n--><span>{{ b }}</span\n  ><!--\n--></span>\n<span>\n  {{ aNormalValue | aPipe }}:\n  <strong>{{\n    aReallyReallySuperLongValue | andASuperLongPipeJustToBreakThis\n  }}</strong>\n</span>\n<p>\n  {{\n    \"delete\"\n      | translate: { what: (\"entities\" | translate: { count: array.length }) }\n  }}\n</p>\n<p>{{ { a: 1 + {} } }}</p>\n<p>{{ { a: a === {} } }}</p>\n<p>{{ { a: !{} } }}</p>\n<p>{{ { a: a ? b : {} } }}</p>");
}
#[test]
fn test_real_world_component_html_bracket_spacingfalse_format_1_52c0e328() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .bracket_spacing(false)
        .parser("component.html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<!-- copied from: https://stackblitz.com/angular/ymdjlgmlavo -->\n\n<a id=\"toc\"></a>\n<h1>Template Syntax</h1>\n<a href=\"#interpolation\">Interpolation</a><br>\n<a href=\"#expression-context\">Expression context</a><br>\n<a href=\"#statement-context\">Statement context</a><br>\n<a href=\"#mental-model\">Mental Model</a><br>\n<a href=\"#buttons\">Buttons</a><br>\n<a href=\"#prop-vs-attrib\">Properties vs. Attributes</a><br>\n<br>\n<a href=\"#property-binding\">Property Binding</a><br>\n<div style=\"margin-left:8px\">\n  <a href=\"#attribute-binding\">Attribute Binding</a><br>\n  <a href=\"#class-binding\">Class Binding</a><br>\n  <a href=\"#style-binding\">Style Binding</a><br>\n</div>\n<br>\n<a href=\"#event-binding\">Event Binding</a><br>\n<a href=\"#two-way\">Two-way Binding</a><br>\n<br>\n<div>Directives</div>\n<div style=\"margin-left:8px\">\n  <a href=\"#ngModel\">NgModel (two-way) Binding</a><br>\n  <a href=\"#ngClass\">NgClass Binding</a><br>\n  <a href=\"#ngStyle\">NgStyle Binding</a><br>\n  <a href=\"#ngIf\">NgIf</a><br>\n  <a href=\"#ngFor\">NgFor</a><br>\n  <div style=\"margin-left:8px\">\n    <a href=\"#ngFor-index\">NgFor with index</a><br>\n    <a href=\"#ngFor-trackBy\">NgFor with trackBy</a><br>\n  </div>\n  <a href=\"#ngSwitch\">NgSwitch</a><br>\n</div>\n<br>\n<a href=\"#ref-vars\">Template reference variables</a><br>\n<a href=\"#inputs-and-outputs\">Inputs and outputs</a><br>\n<a href=\"#pipes\">Pipes</a><br>\n<a href=\"#safe-navigation-operator\">Safe navigation operator <i>?.</i></a><br>\n<a href=\"#non-null-assertion-operator\">Non-null assertion operator <i>!.</i></a><br>\n<a href=\"#enums\">Enums</a><br>\n\n<!-- Interpolation and expressions -->\n<hr><h2 id=\"interpolation\">Interpolation</h2>\n\n<p>My current hero is {{currentHero.name}}</p>\n\n<h3>\n  {{title}}\n  <img src=\"{{heroImageUrl}}\" style=\"height:30px\">\n</h3>\n\n<!-- \"The sum of 1 + 1 is 2\" -->\n<p>The sum of 1 + 1 is {{1 + 1}}</p>\n\n<!-- \"The sum of 1 + 1 is not 4\" -->\n<p>The sum of 1 + 1 is not {{1 + 1 + getVal()}}</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"expression-context\">Expression context</h2>\n\n<p>Component expression context (&#123;&#123;title&#125;&#125;, [hidden]=\"isUnchanged\")</p>\n<div class=\"context\">\n  {{title}}\n  <span [hidden]=\"isUnchanged\">changed</span>\n</div>\n\n\n<p>Template input variable expression context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<ng-template>\n  <div *ngFor=\"let hero of heroes\">{{hero.name}}</div>\n</ng-template>\n\n<p>Template reference variable expression context (#heroInput)</p>\n<div (keyup)=\"0\" class=\"context\">\n  Type something:\n  <input #heroInput> {{heroInput.value}}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"statement-context\">Statement context</h2>\n\n<p>Component statement context ( (click)=\"onSave() )\n<div class=\"context\">\n  <button (click)=\"deleteHero()\">Delete hero</button>\n</div>\n\n<p>Template $event statement context</p>\n<div class=\"context\">\n  <button (click)=\"onSave($event)\">Save</button>\n</div>\n\n<p>Template input variable statement context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<div class=\"context\">\n  <button *ngFor=\"let hero of heroes\" (click)=\"deleteHero(hero)\">{{hero.name}}</button>\n</div>\n\n<p>Template reference variable statement context (#heroForm)</p>\n<div class=\"context\">\n  <form #heroForm (ngSubmit)=\"onSubmit(heroForm)\"> ... </form>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- New Mental Model -->\n<hr><h2 id=\"mental-model\">New Mental Model</h2>\n\n<!--<img src=\"http://www.wpclipart.com/cartoon/people/hero/hero_silhoutte_T.png\">-->\n<!-- Public Domain terms of use: http://www.wpclipart.com/terms.html -->\n<div class=\"special\">Mental Model</div>\n<img src=\"assets/images/hero.png\">\n<button disabled>Save</button>\n<br><br>\n\n<div>\n  <!-- Normal HTML -->\n  <div class=\"special\">Mental Model</div>\n  <!-- Wow! A new element! -->\n  <app-hero-detail></app-hero-detail>\n</div>\n<br><br>\n\n<div>\n  <!-- Bind button disabled state to \\`isUnchanged\\` property -->\n  <button [disabled]=\"isUnchanged\">Save</button>\n</div>\n<br><br>\n\n<div>\n  <img [src]=\"heroImageUrl\">\n  <app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n  <div [ngClass]=\"{'special': isSpecial}\"></div>\n</div>\n<br><br>\n\n<button (click)=\"onSave()\">Save</button>\n<app-hero-detail (deleteRequest)=\"deleteHero()\"></app-hero-detail>\n<div (myClick)=\"clicked=$event\" clickable>click me</div>\n{{clicked}}\n<br><br>\n\n<div>\n  Hero Name:\n  <input [(ngModel)]=\"name\">\n  {{name}}\n</div>\n<br><br>\n\n<button [attr.aria-label]=\"help\">help</button>\n<br><br>\n\n<div [class.special]=\"isSpecial\">Special</div>\n<br><br>\n\n<button [style.color]=\"isSpecial ? 'red' : 'green'\">\nbutton</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property vs. attribute -->\n<hr><h2 id=\"prop-vs-attrib\">Property vs. Attribute (img examples)</h2>\n<!-- examine the following <img> tag in the browser tools -->\n<img src=\"images/ng-logo.png\"\n    [src]=\"heroImageUrl\">\n\n<br><br>\n\n<img [src]=\"iconUrl\"/>\n<img bind-src=\"heroImageUrl\"/>\n<img [attr.src]=\"villainImageUrl\"/>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- buttons -->\n<hr><h2 id=\"buttons\">Buttons</h2>\n\n<button>Enabled (but does nothing)</button>\n<button disabled>Disabled</button>\n<button disabled=false>Still disabled</button>\n<br><br>\n<button disabled>disabled by attribute</button>\n<button [disabled]=\"isUnchanged\">disabled by property binding</button>\n<br><br>\n<button bind-disabled=\"isUnchanged\" on-click=\"onSave($event)\">Disabled Cancel</button>\n<button [disabled]=\"!canSave\" (click)=\"onSave($event)\">Enabled Save</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property binding -->\n<hr><h2 id=\"property-binding\">Property Binding</h2>\n\n<img [src]=\"heroImageUrl\">\n<button [disabled]=\"isUnchanged\">Cancel is disabled</button>\n<div [ngClass]=\"classes\">[ngClass] binding to the classes property</div>\n<app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n<img bind-src=\"heroImageUrl\">\n\n<!-- ERROR: HeroDetailComponent.hero expects a\n     Hero object, not the string \"currentHero\" -->\n<div *ngIf=\"false\">\n  <app-hero-detail hero=\"currentHero\"></app-hero-detail>\n</div>\n<app-hero-detail prefix=\"You are my\" [hero]=\"currentHero\"></app-hero-detail>\n\n<p><img src=\"{{heroImageUrl}}\"> is the <i>interpolated</i> image.</p>\n<p><img [src]=\"heroImageUrl\"> is the <i>property bound</i> image.</p>\n\n<p><span>\"{{title}}\" is the <i>interpolated</i> title.</span></p>\n<p>\"<span [innerHTML]=\"title\"></span>\" is the <i>property bound</i> title.</p>\n\n<!--\n  Angular generates warnings for these two lines as it sanitizes them\n  WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).\n -->\n<p><span>\"{{evilTitle}}\" is the <i>interpolated</i> evil title.</span></p>\n<p>\"<span [innerHTML]=\"evilTitle\"></span>\" is the <i>property bound</i> evil title.</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- attribute binding -->\n<hr><h2 id=\"attribute-binding\">Attribute Binding</h2>\n\n<!--  create and set a colspan attribute -->\n<table border=1>\n  <!--  expression calculates colspan=2 -->\n  <tr><td [attr.colspan]=\"1 + 1\">One-Two</td></tr>\n\n  <!-- ERROR: There is no \\`colspan\\` property to set!\n    <tr><td colspan=\"{{1 + 1}}\">Three-Four</td></tr>\n  -->\n\n  <tr><td>Five</td><td>Six</td></tr>\n</table>\n\n<br>\n<!-- create and set an aria attribute for assistive technology -->\n<button [attr.aria-label]=\"actionName\">{{actionName}} with Aria</button>\n<br><br>\n\n<!-- The following effects are not discussed in the chapter -->\n<div>\n  <!-- any use of [attr.disabled] creates the disabled attribute -->\n  <button [attr.disabled]=\"isUnchanged\">Disabled</button>\n\n  <button [attr.disabled]=\"!isUnchanged\">Disabled as well</button>\n\n  <!-- we'd have to remove it with property binding -->\n  <button disabled [disabled]=\"false\">Enabled (but inert)</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- class binding -->\n<hr><h2 id=\"class-binding\">Class Binding</h2>\n\n<!-- standard class attribute setting  -->\n<div class=\"bad curly special\">Bad curly special</div>\n\n<!-- reset/override all class names with a binding  -->\n<div class=\"bad curly special\"\n     [class]=\"badCurly\">Bad curly</div>\n\n<!-- toggle the \"special\" class on/off with a property -->\n<div [class.special]=\"isSpecial\">The class binding is special</div>\n\n<!-- binding to \\`class.special\\` trumps the class attribute -->\n<div class=\"special\"\n     [class.special]=\"!isSpecial\">This one is not so special</div>\n\n<div bind-class.special=\"isSpecial\">This class binding is special too</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!--style binding -->\n<hr><h2 id=\"style-binding\">Style Binding</h2>\n\n<button [style.color]=\"isSpecial ? 'red': 'green'\">Red</button>\n<button [style.background-color]=\"canSave ? 'cyan': 'grey'\" >Save</button>\n\n<button [style.font-size.em]=\"isSpecial ? 3 : 1\" >Big</button>\n<button [style.font-size.%]=\"!isSpecial ? 150 : 50\" >Small</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- event binding -->\n<hr><h2 id=\"event-binding\">Event Binding</h2>\n\n<button (click)=\"onSave()\">Save</button>\n\n<button on-click=\"onSave()\">On Save</button>\n\n<div>\n<!-- \\`myClick\\` is an event on the custom \\`ClickDirective\\` -->\n<div (myClick)=\"clickMessage=$event\" clickable>click with myClick</div>\n{{clickMessage}}\n</div>\n\n\n<!-- binding to a nested component -->\n<app-hero-detail (deleteRequest)=\"deleteHero($event)\" [hero]=\"currentHero\"></app-hero-detail>\n<br>\n\n<app-big-hero-detail\n    (deleteRequest)=\"deleteHero($event)\"\n    [hero]=\"currentHero\">\n</app-big-hero-detail>\n\n<div class=\"parent-div\" (click)=\"onClickMe($event)\" clickable>Click me\n  <div class=\"child-div\">Click me too!</div>\n</div>\n\n<!-- Will save only once -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave($event)\">Save, no propagation</button>\n</div>\n\n<!-- Will save twice -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave()\">Save w/ propagation</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"two-way\">Two-way Binding</h2>\n<div id=\"two-way-1\">\n  <app-sizer [(size)]=\"fontSizePx\"></app-sizer>\n  <div [style.font-size.px]=\"fontSizePx\">Resizable Text</div>\n  <label>FontSize (px): <input [(ngModel)]=\"fontSizePx\"></label>\n</div>\n<br>\n<div id=\"two-way-2\">\n  <h3>De-sugared two-way binding</h3>\n  <app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx=$event\"></app-sizer>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Two way data binding unwound;\n    passing the changed display value to the event handler via \\`$event\\` -->\n<hr><h2 id=\"ngModel\">NgModel (two-way) Binding</h2>\n\n<h3>Result: {{currentHero.name}}</h3>\n\n<input [value]=\"currentHero.name\"\n       (input)=\"currentHero.name=$event.target.value\" >\nwithout NgModel\n<br>\n<input [(ngModel)]=\"currentHero.name\">\n[(ngModel)]\n<br>\n<input bindon-ngModel=\"currentHero.name\">\nbindon-ngModel\n<br>\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"currentHero.name=$event\">\n(ngModelChange)=\"...name=$event\"\n<br>\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"setUppercaseName($event)\">\n(ngModelChange)=\"setUppercaseName($event)\"\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgClass binding -->\n<hr><h2 id=\"ngClass\">NgClass Binding</h2>\n\n<p>currentClasses is {{currentClasses | json}}</p>\n<div [ngClass]=\"currentClasses\">This div is initially saveable, unchanged, and special</div>\n\n<!-- not used in chapter -->\n<br>\n<label>saveable   <input type=\"checkbox\" [(ngModel)]=\"canSave\"></label> |\n<label>modified:  <input type=\"checkbox\" [value]=\"!isUnchanged\" (change)=\"isUnchanged=!isUnchanged\"></label> |\n<label>special:   <input type=\"checkbox\" [(ngModel)]=\"isSpecial\"></label>\n<button (click)=\"setCurrentClasses()\">Refresh currentClasses</button>\n<br><br>\n<div [ngClass]=\"currentClasses\">\n  This div should be {{ canSave ? \"\": \"not\"}} saveable,\n                  {{ isUnchanged ? \"unchanged\" : \"modified\" }} and,\n                  {{ isSpecial ? \"\": \"not\"}} special after clicking \"Refresh\".</div>\n<br><br>\n\n<div [ngClass]=\"isSpecial ? 'special' : ''\">This div is special</div>\n\n<div class=\"bad curly special\">Bad curly special</div>\n<div [ngClass]=\"{'bad':false, 'curly':true, 'special':true}\">Curly special</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgStyle binding -->\n<hr><h2 id=\"ngStyle\">NgStyle Binding</h2>\n\n<div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\" >\n  This div is x-large or smaller.\n</div>\n\n<h3>[ngStyle] binding to currentStyles - CSS property names</h3>\n<p>currentStyles is {{currentStyles | json}}</p>\n<div [ngStyle]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n</div>\n\n<!-- not used in chapter -->\n<br>\n<label>italic: <input type=\"checkbox\" [(ngModel)]=\"canSave\"></label> |\n<label>normal: <input type=\"checkbox\" [(ngModel)]=\"isUnchanged\"></label> |\n<label>xlarge: <input type=\"checkbox\" [(ngModel)]=\"isSpecial\"></label>\n<button (click)=\"setCurrentStyles()\">Refresh currentStyles</button>\n<br><br>\n<div [ngStyle]=\"currentStyles\">\n  This div should be {{ canSave ? \"italic\": \"plain\"}},\n                  {{ isUnchanged ? \"normal weight\" : \"bold\" }} and,\n                  {{ isSpecial ? \"extra large\": \"normal size\"}} after clicking \"Refresh\".</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgIf binding -->\n<hr><h2 id=\"ngIf\">NgIf Binding</h2>\n\n<app-hero-detail *ngIf=\"isActive\"></app-hero-detail>\n\n<div *ngIf=\"currentHero\">Hello, {{currentHero.name}}</div>\n<div *ngIf=\"nullHero\">Hello, {{nullHero.name}}</div>\n\n<!-- NgIf binding with template (no *) -->\n\n<ng-template [ngIf]=\"currentHero\">Add {{currentHero.name}} with template</ng-template>\n\n<!-- Does not show because isActive is false! -->\n<div>Hero Detail removed from DOM (via template) because isActive is false</div>\n<ng-template [ngIf]=\"isActive\">\n  <app-hero-detail></app-hero-detail>\n</ng-template>\n\n<!-- isSpecial is true -->\n<div [class.hidden]=\"!isSpecial\">Show with class</div>\n<div [class.hidden]=\"isSpecial\">Hide with class</div>\n\n<!-- HeroDetail is in the DOM but hidden -->\n<app-hero-detail [class.hidden]=\"isSpecial\"></app-hero-detail>\n\n<div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with style</div>\n<div [style.display]=\"isSpecial ? 'none'  : 'block'\">Hide with style</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgFor binding -->\n<hr><h2 id=\"ngFor\">NgFor Binding</h2>\n\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes\">{{hero.name}}</div>\n</div>\n<br>\n\n<div class=\"box\">\n  <!-- *ngFor w/ hero-detail Component -->\n  <app-hero-detail *ngFor=\"let hero of heroes\" [hero]=\"hero\"></app-hero-detail>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-index\">*ngFor with index</h4>\n<p>with <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; let i=index\">{{i + 1}} - {{hero.name}}</div>\n</div>\n\n<p>with <i>comma</i> separator</p>\n<div class=\"box\">\n  <!-- Ex: \"1 - Hercules\" -->\n  <div *ngFor=\"let hero of heroes, let i=index\">{{i + 1}} - {{hero.name}}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-trackBy\">*ngFor trackBy</h4>\n<button (click)=\"resetHeroes()\">Reset heroes</button>\n<button (click)=\"changeIds()\">Change ids</button>\n<button (click)=\"clearTrackByCounts()\">Clear counts</button>\n\n<p><i>without</i> trackBy</p>\n<div class=\"box\">\n  <div #noTrackBy *ngFor=\"let hero of heroes\">({{hero.id}}) {{hero.name}}</div>\n\n  <div id=\"noTrackByCnt\" *ngIf=\"heroesNoTrackByCount\" >\n    Hero DOM elements change #{{heroesNoTrackByCount}} without trackBy\n  </div>\n</div>\n\n<p>with trackBy</p>\n<div class=\"box\">\n  <div #withTrackBy *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n\n  <div id=\"withTrackByCnt\" *ngIf=\"heroesWithTrackByCount\">\n    Hero DOM elements change #{{heroesWithTrackByCount}} with trackBy\n  </div>\n</div>\n\n<br><br><br>\n\n<p>with trackBy and <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{hero.id}}) {{hero.name}}\n  </div>\n</div>\n\n<p>with trackBy and <i>comma</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes, trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<p>with trackBy and <i>space</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<p>with <i>generic</i> trackById function</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes, trackBy: trackById\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgSwitch binding -->\n<hr><h2 id=\"ngSwitch\">NgSwitch Binding</h2>\n\n<p>Pick your favorite hero</p>\n<div>\n  <label *ngFor=\"let h of heroes\">\n    <input type=\"radio\" name=\"heroes\" [(ngModel)]=\"currentHero\" [value]=\"h\">{{h.name}}\n  </label>\n</div>\n\n<div [ngSwitch]=\"currentHero.emotion\">\n  <app-happy-hero    *ngSwitchCase=\"'happy'\"    [hero]=\"currentHero\"></app-happy-hero>\n  <app-sad-hero      *ngSwitchCase=\"'sad'\"      [hero]=\"currentHero\"></app-sad-hero>\n  <app-confused-hero *ngSwitchCase=\"'confused'\" [hero]=\"currentHero\"></app-confused-hero>\n  <div *ngSwitchCase=\"'confused'\">Are you as confused as {{currentHero.name}}?</div>\n  <app-unknown-hero  *ngSwitchDefault           [hero]=\"currentHero\"></app-unknown-hero>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- template reference variable -->\n<hr><h2 id=\"ref-vars\">Template reference variables</h2>\n\n<input #phone placeholder=\"phone number\">\n\n<!-- lots of other elements -->\n\n<!-- phone refers to the input element; pass its \\`value\\` to an event handler -->\n<button (click)=\"callPhone(phone.value)\">Call</button>\n\n<input ref-fax placeholder=\"fax number\">\n<button (click)=\"callFax(fax.value)\">Fax</button>\n\n<!-- btn refers to the button element; show its disabled state -->\n<button #btn disabled [innerHTML]=\"'disabled by attribute: '+btn.disabled\"></button>\n\n<h4>Example Form</h4>\n<app-hero-form [hero]=\"currentHero\"></app-hero-form>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- inputs and output -->\n<hr><h2 id=\"inputs-and-outputs\">Inputs and Outputs</h2>\n\n<img [src]=\"iconUrl\"/>\n<button (click)=\"onSave()\">Save</button>\n\n<app-hero-detail [hero]=\"currentHero\" (deleteRequest)=\"deleteHero($event)\">\n</app-hero-detail>\n\n<div (myClick)=\"clickMessage2=$event\" clickable>myClick2</div>\n{{clickMessage2}}\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Pipes -->\n<hr><h2 id=\"pipes\">Pipes</h2>\n\n<div>Title through uppercase pipe: {{title | uppercase}}</div>\n\n<!-- Pipe chaining: convert title to uppercase, then to lowercase -->\n<div>\n  Title through a pipe chain:\n  {{title | uppercase | lowercase}}\n</div>\n\n<!-- pipe with configuration argument => \"February 25, 1970\" -->\n<div>Birthdate: {{currentHero?.birthdate | date:'longDate'}}</div>\n\n<div>{{currentHero | json}}</div>\n\n<div>Birthdate: {{(currentHero?.birthdate | date:'longDate') | uppercase}}</div>\n\n<div>\n  <!-- pipe price to USD and display the $ symbol -->\n  <label>Price: </label>{{product.price | currency:'USD':true}}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Null values and the safe navigation operator -->\n<hr><h2 id=\"safe-navigation-operator\">Safe navigation operator <i>?.</i></h2>\n\n<div>\n  The title is {{title}}\n</div>\n\n<div>\n  The current hero's name is {{currentHero?.name}}\n</div>\n\n<div>\n  The current hero's name is {{currentHero.name}}\n</div>\n\n\n<!--\nThe null hero's name is {{nullHero.name}}\n\nSee console log:\n  TypeError: Cannot read property 'name' of null in [null]\n-->\n\n<!--No hero, div not displayed, no error -->\n<div *ngIf=\"nullHero\">The null hero's name is {{nullHero.name}}</div>\n\n<div>\nThe null hero's name is {{nullHero && nullHero.name}}\n</div>\n\n<div>\n  <!-- No hero, no problem! -->\n  The null hero's name is {{nullHero?.name}}\n</div>\n\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr><h2 id=\"non-null-assertion-operator\">Non-null assertion operator <i>!.</i></h2>\n\n<div>\n  <!--No hero, no text -->\n  <div *ngIf=\"hero\">\n    The hero's name is {{hero!.name}}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr><h2 id=\"any-type-cast-function\">$any type cast function <i>$any( )</i>.</h2>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>\n    The hero's marker is {{$any(hero).marker}}\n  </div>\n</div>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>\n    Undeclared members is {{$any(this).member}}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- TODO: discuss this in the Style binding section -->\n<!-- enums in bindings -->\n<hr><h2 id=\"enums\">Enums in binding</h2>\n\n<p>\n  The name of the Color.Red enum is {{Color[Color.Red]}}.<br>\n  The current color is {{Color[color]}} and its number is {{color}}.<br>\n  <button [style.color]=\"Color[color]\" (click)=\"colorToggle()\">Enum Toggle</button>\n</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->\n\n<div id=\"heroForm\">\n  <form (ngSubmit)=\"onSubmit(heroForm)\" #heroForm=\"ngForm\">\n    <div class=\"form-group\">\n      <label for=\"name\">Name\n        <input class=\"form-control\" name=\"name\" required [(ngModel)]=\"hero.name\">\n      </label>\n    </div>\n    <button type=\"submit\" [disabled]=\"!heroForm.form.valid\">Submit</button>\n  </form>\n  <div [hidden]=\"!heroForm.form.valid\">\n    {{submitMessage}}\n  </div>\n</div>\n\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<!-- copied from: https://stackblitz.com/angular/ymdjlgmlavo -->\n\n<a id=\"toc\"></a>\n<h1>Template Syntax</h1>\n<a href=\"#interpolation\">Interpolation</a><br />\n<a href=\"#expression-context\">Expression context</a><br />\n<a href=\"#statement-context\">Statement context</a><br />\n<a href=\"#mental-model\">Mental Model</a><br />\n<a href=\"#buttons\">Buttons</a><br />\n<a href=\"#prop-vs-attrib\">Properties vs. Attributes</a><br />\n<br />\n<a href=\"#property-binding\">Property Binding</a><br />\n<div style=\"margin-left: 8px\">\n  <a href=\"#attribute-binding\">Attribute Binding</a><br />\n  <a href=\"#class-binding\">Class Binding</a><br />\n  <a href=\"#style-binding\">Style Binding</a><br />\n</div>\n<br />\n<a href=\"#event-binding\">Event Binding</a><br />\n<a href=\"#two-way\">Two-way Binding</a><br />\n<br />\n<div>Directives</div>\n<div style=\"margin-left: 8px\">\n  <a href=\"#ngModel\">NgModel (two-way) Binding</a><br />\n  <a href=\"#ngClass\">NgClass Binding</a><br />\n  <a href=\"#ngStyle\">NgStyle Binding</a><br />\n  <a href=\"#ngIf\">NgIf</a><br />\n  <a href=\"#ngFor\">NgFor</a><br />\n  <div style=\"margin-left: 8px\">\n    <a href=\"#ngFor-index\">NgFor with index</a><br />\n    <a href=\"#ngFor-trackBy\">NgFor with trackBy</a><br />\n  </div>\n  <a href=\"#ngSwitch\">NgSwitch</a><br />\n</div>\n<br />\n<a href=\"#ref-vars\">Template reference variables</a><br />\n<a href=\"#inputs-and-outputs\">Inputs and outputs</a><br />\n<a href=\"#pipes\">Pipes</a><br />\n<a href=\"#safe-navigation-operator\">Safe navigation operator <i>?.</i></a\n><br />\n<a href=\"#non-null-assertion-operator\">Non-null assertion operator <i>!.</i></a\n><br />\n<a href=\"#enums\">Enums</a><br />\n\n<!-- Interpolation and expressions -->\n<hr />\n<h2 id=\"interpolation\">Interpolation</h2>\n\n<p>My current hero is {{ currentHero.name }}</p>\n\n<h3>\n  {{ title }}\n  <img src=\"{{ heroImageUrl }}\" style=\"height: 30px\" />\n</h3>\n\n<!-- \"The sum of 1 + 1 is 2\" -->\n<p>The sum of 1 + 1 is {{ 1 + 1 }}</p>\n\n<!-- \"The sum of 1 + 1 is not 4\" -->\n<p>The sum of 1 + 1 is not {{ 1 + 1 + getVal() }}</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr />\n<h2 id=\"expression-context\">Expression context</h2>\n\n<p>\n  Component expression context (&#123;&#123;title&#125;&#125;,\n  [hidden]=\"isUnchanged\")\n</p>\n<div class=\"context\">\n  {{ title }}\n  <span [hidden]=\"isUnchanged\">changed</span>\n</div>\n\n<p>Template input variable expression context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<ng-template>\n  <div *ngFor=\"let hero of heroes\">{{ hero.name }}</div>\n</ng-template>\n\n<p>Template reference variable expression context (#heroInput)</p>\n<div (keyup)=\"(0)\" class=\"context\">\n  Type something:\n  <input #heroInput /> {{ heroInput.value }}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr />\n<h2 id=\"statement-context\">Statement context</h2>\n\n<p>Component statement context ( (click)=\"onSave() )</p>\n<div class=\"context\">\n  <button (click)=\"deleteHero()\">Delete hero</button>\n</div>\n\n<p>Template $event statement context</p>\n<div class=\"context\">\n  <button (click)=\"onSave($event)\">Save</button>\n</div>\n\n<p>Template input variable statement context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<div class=\"context\">\n  <button *ngFor=\"let hero of heroes\" (click)=\"deleteHero(hero)\">\n    {{ hero.name }}\n  </button>\n</div>\n\n<p>Template reference variable statement context (#heroForm)</p>\n<div class=\"context\">\n  <form #heroForm (ngSubmit)=\"onSubmit(heroForm)\">...</form>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- New Mental Model -->\n<hr />\n<h2 id=\"mental-model\">New Mental Model</h2>\n\n<!--<img src=\"http://www.wpclipart.com/cartoon/people/hero/hero_silhoutte_T.png\">-->\n<!-- Public Domain terms of use: http://www.wpclipart.com/terms.html -->\n<div class=\"special\">Mental Model</div>\n<img src=\"assets/images/hero.png\" />\n<button disabled>Save</button>\n<br /><br />\n\n<div>\n  <!-- Normal HTML -->\n  <div class=\"special\">Mental Model</div>\n  <!-- Wow! A new element! -->\n  <app-hero-detail></app-hero-detail>\n</div>\n<br /><br />\n\n<div>\n  <!-- Bind button disabled state to \\`isUnchanged\\` property -->\n  <button [disabled]=\"isUnchanged\">Save</button>\n</div>\n<br /><br />\n\n<div>\n  <img [src]=\"heroImageUrl\" />\n  <app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n  <div [ngClass]=\"{special: isSpecial}\"></div>\n</div>\n<br /><br />\n\n<button (click)=\"onSave()\">Save</button>\n<app-hero-detail (deleteRequest)=\"deleteHero()\"></app-hero-detail>\n<div (myClick)=\"clicked = $event\" clickable>click me</div>\n{{ clicked }}\n<br /><br />\n\n<div>\n  Hero Name:\n  <input [(ngModel)]=\"name\" />\n  {{ name }}\n</div>\n<br /><br />\n\n<button [attr.aria-label]=\"help\">help</button>\n<br /><br />\n\n<div [class.special]=\"isSpecial\">Special</div>\n<br /><br />\n\n<button [style.color]=\"isSpecial ? 'red' : 'green'\">button</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property vs. attribute -->\n<hr />\n<h2 id=\"prop-vs-attrib\">Property vs. Attribute (img examples)</h2>\n<!-- examine the following <img> tag in the browser tools -->\n<img src=\"images/ng-logo.png\" [src]=\"heroImageUrl\" />\n\n<br /><br />\n\n<img [src]=\"iconUrl\" />\n<img bind-src=\"heroImageUrl\" />\n<img [attr.src]=\"villainImageUrl\" />\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- buttons -->\n<hr />\n<h2 id=\"buttons\">Buttons</h2>\n\n<button>Enabled (but does nothing)</button>\n<button disabled>Disabled</button>\n<button disabled=\"false\">Still disabled</button>\n<br /><br />\n<button disabled>disabled by attribute</button>\n<button [disabled]=\"isUnchanged\">disabled by property binding</button>\n<br /><br />\n<button bind-disabled=\"isUnchanged\" on-click=\"onSave($event)\">\n  Disabled Cancel\n</button>\n<button [disabled]=\"!canSave\" (click)=\"onSave($event)\">Enabled Save</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property binding -->\n<hr />\n<h2 id=\"property-binding\">Property Binding</h2>\n\n<img [src]=\"heroImageUrl\" />\n<button [disabled]=\"isUnchanged\">Cancel is disabled</button>\n<div [ngClass]=\"classes\">[ngClass] binding to the classes property</div>\n<app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n<img bind-src=\"heroImageUrl\" />\n\n<!-- ERROR: HeroDetailComponent.hero expects a\n     Hero object, not the string \"currentHero\" -->\n<div *ngIf=\"false\">\n  <app-hero-detail hero=\"currentHero\"></app-hero-detail>\n</div>\n<app-hero-detail prefix=\"You are my\" [hero]=\"currentHero\"></app-hero-detail>\n\n<p><img src=\"{{ heroImageUrl }}\" /> is the <i>interpolated</i> image.</p>\n<p><img [src]=\"heroImageUrl\" /> is the <i>property bound</i> image.</p>\n\n<p>\n  <span>\"{{ title }}\" is the <i>interpolated</i> title.</span>\n</p>\n<p>\"<span [innerHTML]=\"title\"></span>\" is the <i>property bound</i> title.</p>\n\n<!--\n  Angular generates warnings for these two lines as it sanitizes them\n  WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).\n -->\n<p>\n  <span>\"{{ evilTitle }}\" is the <i>interpolated</i> evil title.</span>\n</p>\n<p>\n  \"<span [innerHTML]=\"evilTitle\"></span>\" is the <i>property bound</i> evil\n  title.\n</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- attribute binding -->\n<hr />\n<h2 id=\"attribute-binding\">Attribute Binding</h2>\n\n<!--  create and set a colspan attribute -->\n<table border=\"1\">\n  <!--  expression calculates colspan=2 -->\n  <tr>\n    <td [attr.colspan]=\"1 + 1\">One-Two</td>\n  </tr>\n\n  <!-- ERROR: There is no \\`colspan\\` property to set!\n    <tr><td colspan=\"{{1 + 1}}\">Three-Four</td></tr>\n  -->\n\n  <tr>\n    <td>Five</td>\n    <td>Six</td>\n  </tr>\n</table>\n\n<br />\n<!-- create and set an aria attribute for assistive technology -->\n<button [attr.aria-label]=\"actionName\">{{ actionName }} with Aria</button>\n<br /><br />\n\n<!-- The following effects are not discussed in the chapter -->\n<div>\n  <!-- any use of [attr.disabled] creates the disabled attribute -->\n  <button [attr.disabled]=\"isUnchanged\">Disabled</button>\n\n  <button [attr.disabled]=\"!isUnchanged\">Disabled as well</button>\n\n  <!-- we'd have to remove it with property binding -->\n  <button disabled [disabled]=\"false\">Enabled (but inert)</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- class binding -->\n<hr />\n<h2 id=\"class-binding\">Class Binding</h2>\n\n<!-- standard class attribute setting  -->\n<div class=\"bad curly special\">Bad curly special</div>\n\n<!-- reset/override all class names with a binding  -->\n<div class=\"bad curly special\" [class]=\"badCurly\">Bad curly</div>\n\n<!-- toggle the \"special\" class on/off with a property -->\n<div [class.special]=\"isSpecial\">The class binding is special</div>\n\n<!-- binding to \\`class.special\\` trumps the class attribute -->\n<div class=\"special\" [class.special]=\"!isSpecial\">\n  This one is not so special\n</div>\n\n<div bind-class.special=\"isSpecial\">This class binding is special too</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!--style binding -->\n<hr />\n<h2 id=\"style-binding\">Style Binding</h2>\n\n<button [style.color]=\"isSpecial ? 'red' : 'green'\">Red</button>\n<button [style.background-color]=\"canSave ? 'cyan' : 'grey'\">Save</button>\n\n<button [style.font-size.em]=\"isSpecial ? 3 : 1\">Big</button>\n<button [style.font-size.%]=\"!isSpecial ? 150 : 50\">Small</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- event binding -->\n<hr />\n<h2 id=\"event-binding\">Event Binding</h2>\n\n<button (click)=\"onSave()\">Save</button>\n\n<button on-click=\"onSave()\">On Save</button>\n\n<div>\n  <!-- \\`myClick\\` is an event on the custom \\`ClickDirective\\` -->\n  <div (myClick)=\"clickMessage = $event\" clickable>click with myClick</div>\n  {{ clickMessage }}\n</div>\n\n<!-- binding to a nested component -->\n<app-hero-detail\n  (deleteRequest)=\"deleteHero($event)\"\n  [hero]=\"currentHero\"\n></app-hero-detail>\n<br />\n\n<app-big-hero-detail (deleteRequest)=\"deleteHero($event)\" [hero]=\"currentHero\">\n</app-big-hero-detail>\n\n<div class=\"parent-div\" (click)=\"onClickMe($event)\" clickable>\n  Click me\n  <div class=\"child-div\">Click me too!</div>\n</div>\n\n<!-- Will save only once -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave($event)\">Save, no propagation</button>\n</div>\n\n<!-- Will save twice -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave()\">Save w/ propagation</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr />\n<h2 id=\"two-way\">Two-way Binding</h2>\n<div id=\"two-way-1\">\n  <app-sizer [(size)]=\"fontSizePx\"></app-sizer>\n  <div [style.font-size.px]=\"fontSizePx\">Resizable Text</div>\n  <label>FontSize (px): <input [(ngModel)]=\"fontSizePx\" /></label>\n</div>\n<br />\n<div id=\"two-way-2\">\n  <h3>De-sugared two-way binding</h3>\n  <app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx = $event\"></app-sizer>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Two way data binding unwound;\n    passing the changed display value to the event handler via \\`$event\\` -->\n<hr />\n<h2 id=\"ngModel\">NgModel (two-way) Binding</h2>\n\n<h3>Result: {{ currentHero.name }}</h3>\n\n<input\n  [value]=\"currentHero.name\"\n  (input)=\"currentHero.name = $event.target.value\"\n/>\nwithout NgModel\n<br />\n<input [(ngModel)]=\"currentHero.name\" />\n[(ngModel)]\n<br />\n<input bindon-ngModel=\"currentHero.name\" />\nbindon-ngModel\n<br />\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"currentHero.name = $event\"\n/>\n(ngModelChange)=\"...name=$event\"\n<br />\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"setUppercaseName($event)\"\n/>\n(ngModelChange)=\"setUppercaseName($event)\"\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgClass binding -->\n<hr />\n<h2 id=\"ngClass\">NgClass Binding</h2>\n\n<p>currentClasses is {{ currentClasses | json }}</p>\n<div [ngClass]=\"currentClasses\">\n  This div is initially saveable, unchanged, and special\n</div>\n\n<!-- not used in chapter -->\n<br />\n<label>saveable <input type=\"checkbox\" [(ngModel)]=\"canSave\" /></label> |\n<label\n  >modified:\n  <input\n    type=\"checkbox\"\n    [value]=\"!isUnchanged\"\n    (change)=\"isUnchanged = !isUnchanged\"\n/></label>\n|\n<label>special: <input type=\"checkbox\" [(ngModel)]=\"isSpecial\" /></label>\n<button (click)=\"setCurrentClasses()\">Refresh currentClasses</button>\n<br /><br />\n<div [ngClass]=\"currentClasses\">\n  This div should be {{ canSave ? \"\" : \"not\" }} saveable,\n  {{ isUnchanged ? \"unchanged\" : \"modified\" }} and,\n  {{ isSpecial ? \"\" : \"not\" }} special after clicking \"Refresh\".\n</div>\n<br /><br />\n\n<div [ngClass]=\"isSpecial ? 'special' : ''\">This div is special</div>\n\n<div class=\"bad curly special\">Bad curly special</div>\n<div [ngClass]=\"{bad: false, curly: true, special: true}\">Curly special</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgStyle binding -->\n<hr />\n<h2 id=\"ngStyle\">NgStyle Binding</h2>\n\n<div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\">\n  This div is x-large or smaller.\n</div>\n\n<h3>[ngStyle] binding to currentStyles - CSS property names</h3>\n<p>currentStyles is {{ currentStyles | json }}</p>\n<div [ngStyle]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n</div>\n\n<!-- not used in chapter -->\n<br />\n<label>italic: <input type=\"checkbox\" [(ngModel)]=\"canSave\" /></label> |\n<label>normal: <input type=\"checkbox\" [(ngModel)]=\"isUnchanged\" /></label> |\n<label>xlarge: <input type=\"checkbox\" [(ngModel)]=\"isSpecial\" /></label>\n<button (click)=\"setCurrentStyles()\">Refresh currentStyles</button>\n<br /><br />\n<div [ngStyle]=\"currentStyles\">\n  This div should be {{ canSave ? \"italic\" : \"plain\" }},\n  {{ isUnchanged ? \"normal weight\" : \"bold\" }} and,\n  {{ isSpecial ? \"extra large\" : \"normal size\" }} after clicking \"Refresh\".\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgIf binding -->\n<hr />\n<h2 id=\"ngIf\">NgIf Binding</h2>\n\n<app-hero-detail *ngIf=\"isActive\"></app-hero-detail>\n\n<div *ngIf=\"currentHero\">Hello, {{ currentHero.name }}</div>\n<div *ngIf=\"nullHero\">Hello, {{ nullHero.name }}</div>\n\n<!-- NgIf binding with template (no *) -->\n\n<ng-template [ngIf]=\"currentHero\"\n  >Add {{ currentHero.name }} with template</ng-template\n>\n\n<!-- Does not show because isActive is false! -->\n<div>Hero Detail removed from DOM (via template) because isActive is false</div>\n<ng-template [ngIf]=\"isActive\">\n  <app-hero-detail></app-hero-detail>\n</ng-template>\n\n<!-- isSpecial is true -->\n<div [class.hidden]=\"!isSpecial\">Show with class</div>\n<div [class.hidden]=\"isSpecial\">Hide with class</div>\n\n<!-- HeroDetail is in the DOM but hidden -->\n<app-hero-detail [class.hidden]=\"isSpecial\"></app-hero-detail>\n\n<div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with style</div>\n<div [style.display]=\"isSpecial ? 'none' : 'block'\">Hide with style</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgFor binding -->\n<hr />\n<h2 id=\"ngFor\">NgFor Binding</h2>\n\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes\">{{ hero.name }}</div>\n</div>\n<br />\n\n<div class=\"box\">\n  <!-- *ngFor w/ hero-detail Component -->\n  <app-hero-detail *ngFor=\"let hero of heroes\" [hero]=\"hero\"></app-hero-detail>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-index\">*ngFor with index</h4>\n<p>with <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; let i = index\">\n    {{ i + 1 }} - {{ hero.name }}\n  </div>\n</div>\n\n<p>with <i>comma</i> separator</p>\n<div class=\"box\">\n  <!-- Ex: \"1 - Hercules\" -->\n  <div *ngFor=\"let hero of heroes; let i = index\">\n    {{ i + 1 }} - {{ hero.name }}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-trackBy\">*ngFor trackBy</h4>\n<button (click)=\"resetHeroes()\">Reset heroes</button>\n<button (click)=\"changeIds()\">Change ids</button>\n<button (click)=\"clearTrackByCounts()\">Clear counts</button>\n\n<p><i>without</i> trackBy</p>\n<div class=\"box\">\n  <div #noTrackBy *ngFor=\"let hero of heroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n\n  <div id=\"noTrackByCnt\" *ngIf=\"heroesNoTrackByCount\">\n    Hero DOM elements change #{{ heroesNoTrackByCount }} without trackBy\n  </div>\n</div>\n\n<p>with trackBy</p>\n<div class=\"box\">\n  <div #withTrackBy *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n\n  <div id=\"withTrackByCnt\" *ngIf=\"heroesWithTrackByCount\">\n    Hero DOM elements change #{{ heroesWithTrackByCount }} with trackBy\n  </div>\n</div>\n\n<br /><br /><br />\n\n<p>with trackBy and <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<p>with trackBy and <i>comma</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<p>with trackBy and <i>space</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<p>with <i>generic</i> trackById function</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackById\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgSwitch binding -->\n<hr />\n<h2 id=\"ngSwitch\">NgSwitch Binding</h2>\n\n<p>Pick your favorite hero</p>\n<div>\n  <label *ngFor=\"let h of heroes\">\n    <input type=\"radio\" name=\"heroes\" [(ngModel)]=\"currentHero\" [value]=\"h\" />{{\n      h.name\n    }}\n  </label>\n</div>\n\n<div [ngSwitch]=\"currentHero.emotion\">\n  <app-happy-hero *ngSwitchCase=\"'happy'\" [hero]=\"currentHero\"></app-happy-hero>\n  <app-sad-hero *ngSwitchCase=\"'sad'\" [hero]=\"currentHero\"></app-sad-hero>\n  <app-confused-hero\n    *ngSwitchCase=\"'confused'\"\n    [hero]=\"currentHero\"\n  ></app-confused-hero>\n  <div *ngSwitchCase=\"'confused'\">\n    Are you as confused as {{ currentHero.name }}?\n  </div>\n  <app-unknown-hero *ngSwitchDefault [hero]=\"currentHero\"></app-unknown-hero>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- template reference variable -->\n<hr />\n<h2 id=\"ref-vars\">Template reference variables</h2>\n\n<input #phone placeholder=\"phone number\" />\n\n<!-- lots of other elements -->\n\n<!-- phone refers to the input element; pass its \\`value\\` to an event handler -->\n<button (click)=\"callPhone(phone.value)\">Call</button>\n\n<input ref-fax placeholder=\"fax number\" />\n<button (click)=\"callFax(fax.value)\">Fax</button>\n\n<!-- btn refers to the button element; show its disabled state -->\n<button\n  #btn\n  disabled\n  [innerHTML]=\"'disabled by attribute: ' + btn.disabled\"\n></button>\n\n<h4>Example Form</h4>\n<app-hero-form [hero]=\"currentHero\"></app-hero-form>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- inputs and output -->\n<hr />\n<h2 id=\"inputs-and-outputs\">Inputs and Outputs</h2>\n\n<img [src]=\"iconUrl\" />\n<button (click)=\"onSave()\">Save</button>\n\n<app-hero-detail [hero]=\"currentHero\" (deleteRequest)=\"deleteHero($event)\">\n</app-hero-detail>\n\n<div (myClick)=\"clickMessage2 = $event\" clickable>myClick2</div>\n{{ clickMessage2 }}\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Pipes -->\n<hr />\n<h2 id=\"pipes\">Pipes</h2>\n\n<div>Title through uppercase pipe: {{ title | uppercase }}</div>\n\n<!-- Pipe chaining: convert title to uppercase, then to lowercase -->\n<div>\n  Title through a pipe chain:\n  {{ title | uppercase | lowercase }}\n</div>\n\n<!-- pipe with configuration argument => \"February 25, 1970\" -->\n<div>Birthdate: {{ currentHero?.birthdate | date: \"longDate\" }}</div>\n\n<div>{{ currentHero | json }}</div>\n\n<div>\n  Birthdate: {{ currentHero?.birthdate | date: \"longDate\" | uppercase }}\n</div>\n\n<div>\n  <!-- pipe price to USD and display the $ symbol -->\n  <label>Price: </label>{{ product.price | currency: \"USD\" : true }}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Null values and the safe navigation operator -->\n<hr />\n<h2 id=\"safe-navigation-operator\">Safe navigation operator <i>?.</i></h2>\n\n<div>The title is {{ title }}</div>\n\n<div>The current hero's name is {{ currentHero?.name }}</div>\n\n<div>The current hero's name is {{ currentHero.name }}</div>\n\n<!--\nThe null hero's name is {{nullHero.name}}\n\nSee console log:\n  TypeError: Cannot read property 'name' of null in [null]\n-->\n\n<!--No hero, div not displayed, no error -->\n<div *ngIf=\"nullHero\">The null hero's name is {{ nullHero.name }}</div>\n\n<div>The null hero's name is {{ nullHero && nullHero.name }}</div>\n\n<div>\n  <!-- No hero, no problem! -->\n  The null hero's name is {{ nullHero?.name }}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr />\n<h2 id=\"non-null-assertion-operator\">Non-null assertion operator <i>!.</i></h2>\n\n<div>\n  <!--No hero, no text -->\n  <div *ngIf=\"hero\">The hero's name is {{ hero!.name }}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr />\n<h2 id=\"any-type-cast-function\">$any type cast function <i>$any( )</i>.</h2>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>The hero's marker is {{ $any(hero).marker }}</div>\n</div>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>Undeclared members is {{ $any(this).member }}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- TODO: discuss this in the Style binding section -->\n<!-- enums in bindings -->\n<hr />\n<h2 id=\"enums\">Enums in binding</h2>\n\n<p>\n  The name of the Color.Red enum is {{ Color[Color.Red] }}.<br />\n  The current color is {{ Color[color] }} and its number is {{ color }}.<br />\n  <button [style.color]=\"Color[color]\" (click)=\"colorToggle()\">\n    Enum Toggle\n  </button>\n</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->\n\n<div id=\"heroForm\">\n  <form (ngSubmit)=\"onSubmit(heroForm)\" #heroForm=\"ngForm\">\n    <div class=\"form-group\">\n      <label for=\"name\"\n        >Name\n        <input\n          class=\"form-control\"\n          name=\"name\"\n          required\n          [(ngModel)]=\"hero.name\"\n        />\n      </label>\n    </div>\n    <button type=\"submit\" [disabled]=\"!heroForm.form.valid\">Submit</button>\n  </form>\n  <div [hidden]=\"!heroForm.form.valid\">\n    {{ submitMessage }}\n  </div>\n</div>\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->");
}
#[test]
fn test_real_world_component_html_html_whitespace_sensitivityignore_format_1_52c0e328() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .html_whitespace_sensitivity("ignore")
        .parser("component.html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<!-- copied from: https://stackblitz.com/angular/ymdjlgmlavo -->\n\n<a id=\"toc\"></a>\n<h1>Template Syntax</h1>\n<a href=\"#interpolation\">Interpolation</a><br>\n<a href=\"#expression-context\">Expression context</a><br>\n<a href=\"#statement-context\">Statement context</a><br>\n<a href=\"#mental-model\">Mental Model</a><br>\n<a href=\"#buttons\">Buttons</a><br>\n<a href=\"#prop-vs-attrib\">Properties vs. Attributes</a><br>\n<br>\n<a href=\"#property-binding\">Property Binding</a><br>\n<div style=\"margin-left:8px\">\n  <a href=\"#attribute-binding\">Attribute Binding</a><br>\n  <a href=\"#class-binding\">Class Binding</a><br>\n  <a href=\"#style-binding\">Style Binding</a><br>\n</div>\n<br>\n<a href=\"#event-binding\">Event Binding</a><br>\n<a href=\"#two-way\">Two-way Binding</a><br>\n<br>\n<div>Directives</div>\n<div style=\"margin-left:8px\">\n  <a href=\"#ngModel\">NgModel (two-way) Binding</a><br>\n  <a href=\"#ngClass\">NgClass Binding</a><br>\n  <a href=\"#ngStyle\">NgStyle Binding</a><br>\n  <a href=\"#ngIf\">NgIf</a><br>\n  <a href=\"#ngFor\">NgFor</a><br>\n  <div style=\"margin-left:8px\">\n    <a href=\"#ngFor-index\">NgFor with index</a><br>\n    <a href=\"#ngFor-trackBy\">NgFor with trackBy</a><br>\n  </div>\n  <a href=\"#ngSwitch\">NgSwitch</a><br>\n</div>\n<br>\n<a href=\"#ref-vars\">Template reference variables</a><br>\n<a href=\"#inputs-and-outputs\">Inputs and outputs</a><br>\n<a href=\"#pipes\">Pipes</a><br>\n<a href=\"#safe-navigation-operator\">Safe navigation operator <i>?.</i></a><br>\n<a href=\"#non-null-assertion-operator\">Non-null assertion operator <i>!.</i></a><br>\n<a href=\"#enums\">Enums</a><br>\n\n<!-- Interpolation and expressions -->\n<hr><h2 id=\"interpolation\">Interpolation</h2>\n\n<p>My current hero is {{currentHero.name}}</p>\n\n<h3>\n  {{title}}\n  <img src=\"{{heroImageUrl}}\" style=\"height:30px\">\n</h3>\n\n<!-- \"The sum of 1 + 1 is 2\" -->\n<p>The sum of 1 + 1 is {{1 + 1}}</p>\n\n<!-- \"The sum of 1 + 1 is not 4\" -->\n<p>The sum of 1 + 1 is not {{1 + 1 + getVal()}}</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"expression-context\">Expression context</h2>\n\n<p>Component expression context (&#123;&#123;title&#125;&#125;, [hidden]=\"isUnchanged\")</p>\n<div class=\"context\">\n  {{title}}\n  <span [hidden]=\"isUnchanged\">changed</span>\n</div>\n\n\n<p>Template input variable expression context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<ng-template>\n  <div *ngFor=\"let hero of heroes\">{{hero.name}}</div>\n</ng-template>\n\n<p>Template reference variable expression context (#heroInput)</p>\n<div (keyup)=\"0\" class=\"context\">\n  Type something:\n  <input #heroInput> {{heroInput.value}}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"statement-context\">Statement context</h2>\n\n<p>Component statement context ( (click)=\"onSave() )\n<div class=\"context\">\n  <button (click)=\"deleteHero()\">Delete hero</button>\n</div>\n\n<p>Template $event statement context</p>\n<div class=\"context\">\n  <button (click)=\"onSave($event)\">Save</button>\n</div>\n\n<p>Template input variable statement context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<div class=\"context\">\n  <button *ngFor=\"let hero of heroes\" (click)=\"deleteHero(hero)\">{{hero.name}}</button>\n</div>\n\n<p>Template reference variable statement context (#heroForm)</p>\n<div class=\"context\">\n  <form #heroForm (ngSubmit)=\"onSubmit(heroForm)\"> ... </form>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- New Mental Model -->\n<hr><h2 id=\"mental-model\">New Mental Model</h2>\n\n<!--<img src=\"http://www.wpclipart.com/cartoon/people/hero/hero_silhoutte_T.png\">-->\n<!-- Public Domain terms of use: http://www.wpclipart.com/terms.html -->\n<div class=\"special\">Mental Model</div>\n<img src=\"assets/images/hero.png\">\n<button disabled>Save</button>\n<br><br>\n\n<div>\n  <!-- Normal HTML -->\n  <div class=\"special\">Mental Model</div>\n  <!-- Wow! A new element! -->\n  <app-hero-detail></app-hero-detail>\n</div>\n<br><br>\n\n<div>\n  <!-- Bind button disabled state to \\`isUnchanged\\` property -->\n  <button [disabled]=\"isUnchanged\">Save</button>\n</div>\n<br><br>\n\n<div>\n  <img [src]=\"heroImageUrl\">\n  <app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n  <div [ngClass]=\"{'special': isSpecial}\"></div>\n</div>\n<br><br>\n\n<button (click)=\"onSave()\">Save</button>\n<app-hero-detail (deleteRequest)=\"deleteHero()\"></app-hero-detail>\n<div (myClick)=\"clicked=$event\" clickable>click me</div>\n{{clicked}}\n<br><br>\n\n<div>\n  Hero Name:\n  <input [(ngModel)]=\"name\">\n  {{name}}\n</div>\n<br><br>\n\n<button [attr.aria-label]=\"help\">help</button>\n<br><br>\n\n<div [class.special]=\"isSpecial\">Special</div>\n<br><br>\n\n<button [style.color]=\"isSpecial ? 'red' : 'green'\">\nbutton</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property vs. attribute -->\n<hr><h2 id=\"prop-vs-attrib\">Property vs. Attribute (img examples)</h2>\n<!-- examine the following <img> tag in the browser tools -->\n<img src=\"images/ng-logo.png\"\n    [src]=\"heroImageUrl\">\n\n<br><br>\n\n<img [src]=\"iconUrl\"/>\n<img bind-src=\"heroImageUrl\"/>\n<img [attr.src]=\"villainImageUrl\"/>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- buttons -->\n<hr><h2 id=\"buttons\">Buttons</h2>\n\n<button>Enabled (but does nothing)</button>\n<button disabled>Disabled</button>\n<button disabled=false>Still disabled</button>\n<br><br>\n<button disabled>disabled by attribute</button>\n<button [disabled]=\"isUnchanged\">disabled by property binding</button>\n<br><br>\n<button bind-disabled=\"isUnchanged\" on-click=\"onSave($event)\">Disabled Cancel</button>\n<button [disabled]=\"!canSave\" (click)=\"onSave($event)\">Enabled Save</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property binding -->\n<hr><h2 id=\"property-binding\">Property Binding</h2>\n\n<img [src]=\"heroImageUrl\">\n<button [disabled]=\"isUnchanged\">Cancel is disabled</button>\n<div [ngClass]=\"classes\">[ngClass] binding to the classes property</div>\n<app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n<img bind-src=\"heroImageUrl\">\n\n<!-- ERROR: HeroDetailComponent.hero expects a\n     Hero object, not the string \"currentHero\" -->\n<div *ngIf=\"false\">\n  <app-hero-detail hero=\"currentHero\"></app-hero-detail>\n</div>\n<app-hero-detail prefix=\"You are my\" [hero]=\"currentHero\"></app-hero-detail>\n\n<p><img src=\"{{heroImageUrl}}\"> is the <i>interpolated</i> image.</p>\n<p><img [src]=\"heroImageUrl\"> is the <i>property bound</i> image.</p>\n\n<p><span>\"{{title}}\" is the <i>interpolated</i> title.</span></p>\n<p>\"<span [innerHTML]=\"title\"></span>\" is the <i>property bound</i> title.</p>\n\n<!--\n  Angular generates warnings for these two lines as it sanitizes them\n  WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).\n -->\n<p><span>\"{{evilTitle}}\" is the <i>interpolated</i> evil title.</span></p>\n<p>\"<span [innerHTML]=\"evilTitle\"></span>\" is the <i>property bound</i> evil title.</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- attribute binding -->\n<hr><h2 id=\"attribute-binding\">Attribute Binding</h2>\n\n<!--  create and set a colspan attribute -->\n<table border=1>\n  <!--  expression calculates colspan=2 -->\n  <tr><td [attr.colspan]=\"1 + 1\">One-Two</td></tr>\n\n  <!-- ERROR: There is no \\`colspan\\` property to set!\n    <tr><td colspan=\"{{1 + 1}}\">Three-Four</td></tr>\n  -->\n\n  <tr><td>Five</td><td>Six</td></tr>\n</table>\n\n<br>\n<!-- create and set an aria attribute for assistive technology -->\n<button [attr.aria-label]=\"actionName\">{{actionName}} with Aria</button>\n<br><br>\n\n<!-- The following effects are not discussed in the chapter -->\n<div>\n  <!-- any use of [attr.disabled] creates the disabled attribute -->\n  <button [attr.disabled]=\"isUnchanged\">Disabled</button>\n\n  <button [attr.disabled]=\"!isUnchanged\">Disabled as well</button>\n\n  <!-- we'd have to remove it with property binding -->\n  <button disabled [disabled]=\"false\">Enabled (but inert)</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- class binding -->\n<hr><h2 id=\"class-binding\">Class Binding</h2>\n\n<!-- standard class attribute setting  -->\n<div class=\"bad curly special\">Bad curly special</div>\n\n<!-- reset/override all class names with a binding  -->\n<div class=\"bad curly special\"\n     [class]=\"badCurly\">Bad curly</div>\n\n<!-- toggle the \"special\" class on/off with a property -->\n<div [class.special]=\"isSpecial\">The class binding is special</div>\n\n<!-- binding to \\`class.special\\` trumps the class attribute -->\n<div class=\"special\"\n     [class.special]=\"!isSpecial\">This one is not so special</div>\n\n<div bind-class.special=\"isSpecial\">This class binding is special too</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!--style binding -->\n<hr><h2 id=\"style-binding\">Style Binding</h2>\n\n<button [style.color]=\"isSpecial ? 'red': 'green'\">Red</button>\n<button [style.background-color]=\"canSave ? 'cyan': 'grey'\" >Save</button>\n\n<button [style.font-size.em]=\"isSpecial ? 3 : 1\" >Big</button>\n<button [style.font-size.%]=\"!isSpecial ? 150 : 50\" >Small</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- event binding -->\n<hr><h2 id=\"event-binding\">Event Binding</h2>\n\n<button (click)=\"onSave()\">Save</button>\n\n<button on-click=\"onSave()\">On Save</button>\n\n<div>\n<!-- \\`myClick\\` is an event on the custom \\`ClickDirective\\` -->\n<div (myClick)=\"clickMessage=$event\" clickable>click with myClick</div>\n{{clickMessage}}\n</div>\n\n\n<!-- binding to a nested component -->\n<app-hero-detail (deleteRequest)=\"deleteHero($event)\" [hero]=\"currentHero\"></app-hero-detail>\n<br>\n\n<app-big-hero-detail\n    (deleteRequest)=\"deleteHero($event)\"\n    [hero]=\"currentHero\">\n</app-big-hero-detail>\n\n<div class=\"parent-div\" (click)=\"onClickMe($event)\" clickable>Click me\n  <div class=\"child-div\">Click me too!</div>\n</div>\n\n<!-- Will save only once -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave($event)\">Save, no propagation</button>\n</div>\n\n<!-- Will save twice -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave()\">Save w/ propagation</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"two-way\">Two-way Binding</h2>\n<div id=\"two-way-1\">\n  <app-sizer [(size)]=\"fontSizePx\"></app-sizer>\n  <div [style.font-size.px]=\"fontSizePx\">Resizable Text</div>\n  <label>FontSize (px): <input [(ngModel)]=\"fontSizePx\"></label>\n</div>\n<br>\n<div id=\"two-way-2\">\n  <h3>De-sugared two-way binding</h3>\n  <app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx=$event\"></app-sizer>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Two way data binding unwound;\n    passing the changed display value to the event handler via \\`$event\\` -->\n<hr><h2 id=\"ngModel\">NgModel (two-way) Binding</h2>\n\n<h3>Result: {{currentHero.name}}</h3>\n\n<input [value]=\"currentHero.name\"\n       (input)=\"currentHero.name=$event.target.value\" >\nwithout NgModel\n<br>\n<input [(ngModel)]=\"currentHero.name\">\n[(ngModel)]\n<br>\n<input bindon-ngModel=\"currentHero.name\">\nbindon-ngModel\n<br>\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"currentHero.name=$event\">\n(ngModelChange)=\"...name=$event\"\n<br>\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"setUppercaseName($event)\">\n(ngModelChange)=\"setUppercaseName($event)\"\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgClass binding -->\n<hr><h2 id=\"ngClass\">NgClass Binding</h2>\n\n<p>currentClasses is {{currentClasses | json}}</p>\n<div [ngClass]=\"currentClasses\">This div is initially saveable, unchanged, and special</div>\n\n<!-- not used in chapter -->\n<br>\n<label>saveable   <input type=\"checkbox\" [(ngModel)]=\"canSave\"></label> |\n<label>modified:  <input type=\"checkbox\" [value]=\"!isUnchanged\" (change)=\"isUnchanged=!isUnchanged\"></label> |\n<label>special:   <input type=\"checkbox\" [(ngModel)]=\"isSpecial\"></label>\n<button (click)=\"setCurrentClasses()\">Refresh currentClasses</button>\n<br><br>\n<div [ngClass]=\"currentClasses\">\n  This div should be {{ canSave ? \"\": \"not\"}} saveable,\n                  {{ isUnchanged ? \"unchanged\" : \"modified\" }} and,\n                  {{ isSpecial ? \"\": \"not\"}} special after clicking \"Refresh\".</div>\n<br><br>\n\n<div [ngClass]=\"isSpecial ? 'special' : ''\">This div is special</div>\n\n<div class=\"bad curly special\">Bad curly special</div>\n<div [ngClass]=\"{'bad':false, 'curly':true, 'special':true}\">Curly special</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgStyle binding -->\n<hr><h2 id=\"ngStyle\">NgStyle Binding</h2>\n\n<div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\" >\n  This div is x-large or smaller.\n</div>\n\n<h3>[ngStyle] binding to currentStyles - CSS property names</h3>\n<p>currentStyles is {{currentStyles | json}}</p>\n<div [ngStyle]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n</div>\n\n<!-- not used in chapter -->\n<br>\n<label>italic: <input type=\"checkbox\" [(ngModel)]=\"canSave\"></label> |\n<label>normal: <input type=\"checkbox\" [(ngModel)]=\"isUnchanged\"></label> |\n<label>xlarge: <input type=\"checkbox\" [(ngModel)]=\"isSpecial\"></label>\n<button (click)=\"setCurrentStyles()\">Refresh currentStyles</button>\n<br><br>\n<div [ngStyle]=\"currentStyles\">\n  This div should be {{ canSave ? \"italic\": \"plain\"}},\n                  {{ isUnchanged ? \"normal weight\" : \"bold\" }} and,\n                  {{ isSpecial ? \"extra large\": \"normal size\"}} after clicking \"Refresh\".</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgIf binding -->\n<hr><h2 id=\"ngIf\">NgIf Binding</h2>\n\n<app-hero-detail *ngIf=\"isActive\"></app-hero-detail>\n\n<div *ngIf=\"currentHero\">Hello, {{currentHero.name}}</div>\n<div *ngIf=\"nullHero\">Hello, {{nullHero.name}}</div>\n\n<!-- NgIf binding with template (no *) -->\n\n<ng-template [ngIf]=\"currentHero\">Add {{currentHero.name}} with template</ng-template>\n\n<!-- Does not show because isActive is false! -->\n<div>Hero Detail removed from DOM (via template) because isActive is false</div>\n<ng-template [ngIf]=\"isActive\">\n  <app-hero-detail></app-hero-detail>\n</ng-template>\n\n<!-- isSpecial is true -->\n<div [class.hidden]=\"!isSpecial\">Show with class</div>\n<div [class.hidden]=\"isSpecial\">Hide with class</div>\n\n<!-- HeroDetail is in the DOM but hidden -->\n<app-hero-detail [class.hidden]=\"isSpecial\"></app-hero-detail>\n\n<div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with style</div>\n<div [style.display]=\"isSpecial ? 'none'  : 'block'\">Hide with style</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgFor binding -->\n<hr><h2 id=\"ngFor\">NgFor Binding</h2>\n\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes\">{{hero.name}}</div>\n</div>\n<br>\n\n<div class=\"box\">\n  <!-- *ngFor w/ hero-detail Component -->\n  <app-hero-detail *ngFor=\"let hero of heroes\" [hero]=\"hero\"></app-hero-detail>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-index\">*ngFor with index</h4>\n<p>with <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; let i=index\">{{i + 1}} - {{hero.name}}</div>\n</div>\n\n<p>with <i>comma</i> separator</p>\n<div class=\"box\">\n  <!-- Ex: \"1 - Hercules\" -->\n  <div *ngFor=\"let hero of heroes, let i=index\">{{i + 1}} - {{hero.name}}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-trackBy\">*ngFor trackBy</h4>\n<button (click)=\"resetHeroes()\">Reset heroes</button>\n<button (click)=\"changeIds()\">Change ids</button>\n<button (click)=\"clearTrackByCounts()\">Clear counts</button>\n\n<p><i>without</i> trackBy</p>\n<div class=\"box\">\n  <div #noTrackBy *ngFor=\"let hero of heroes\">({{hero.id}}) {{hero.name}}</div>\n\n  <div id=\"noTrackByCnt\" *ngIf=\"heroesNoTrackByCount\" >\n    Hero DOM elements change #{{heroesNoTrackByCount}} without trackBy\n  </div>\n</div>\n\n<p>with trackBy</p>\n<div class=\"box\">\n  <div #withTrackBy *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n\n  <div id=\"withTrackByCnt\" *ngIf=\"heroesWithTrackByCount\">\n    Hero DOM elements change #{{heroesWithTrackByCount}} with trackBy\n  </div>\n</div>\n\n<br><br><br>\n\n<p>with trackBy and <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{hero.id}}) {{hero.name}}\n  </div>\n</div>\n\n<p>with trackBy and <i>comma</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes, trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<p>with trackBy and <i>space</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<p>with <i>generic</i> trackById function</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes, trackBy: trackById\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgSwitch binding -->\n<hr><h2 id=\"ngSwitch\">NgSwitch Binding</h2>\n\n<p>Pick your favorite hero</p>\n<div>\n  <label *ngFor=\"let h of heroes\">\n    <input type=\"radio\" name=\"heroes\" [(ngModel)]=\"currentHero\" [value]=\"h\">{{h.name}}\n  </label>\n</div>\n\n<div [ngSwitch]=\"currentHero.emotion\">\n  <app-happy-hero    *ngSwitchCase=\"'happy'\"    [hero]=\"currentHero\"></app-happy-hero>\n  <app-sad-hero      *ngSwitchCase=\"'sad'\"      [hero]=\"currentHero\"></app-sad-hero>\n  <app-confused-hero *ngSwitchCase=\"'confused'\" [hero]=\"currentHero\"></app-confused-hero>\n  <div *ngSwitchCase=\"'confused'\">Are you as confused as {{currentHero.name}}?</div>\n  <app-unknown-hero  *ngSwitchDefault           [hero]=\"currentHero\"></app-unknown-hero>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- template reference variable -->\n<hr><h2 id=\"ref-vars\">Template reference variables</h2>\n\n<input #phone placeholder=\"phone number\">\n\n<!-- lots of other elements -->\n\n<!-- phone refers to the input element; pass its \\`value\\` to an event handler -->\n<button (click)=\"callPhone(phone.value)\">Call</button>\n\n<input ref-fax placeholder=\"fax number\">\n<button (click)=\"callFax(fax.value)\">Fax</button>\n\n<!-- btn refers to the button element; show its disabled state -->\n<button #btn disabled [innerHTML]=\"'disabled by attribute: '+btn.disabled\"></button>\n\n<h4>Example Form</h4>\n<app-hero-form [hero]=\"currentHero\"></app-hero-form>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- inputs and output -->\n<hr><h2 id=\"inputs-and-outputs\">Inputs and Outputs</h2>\n\n<img [src]=\"iconUrl\"/>\n<button (click)=\"onSave()\">Save</button>\n\n<app-hero-detail [hero]=\"currentHero\" (deleteRequest)=\"deleteHero($event)\">\n</app-hero-detail>\n\n<div (myClick)=\"clickMessage2=$event\" clickable>myClick2</div>\n{{clickMessage2}}\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Pipes -->\n<hr><h2 id=\"pipes\">Pipes</h2>\n\n<div>Title through uppercase pipe: {{title | uppercase}}</div>\n\n<!-- Pipe chaining: convert title to uppercase, then to lowercase -->\n<div>\n  Title through a pipe chain:\n  {{title | uppercase | lowercase}}\n</div>\n\n<!-- pipe with configuration argument => \"February 25, 1970\" -->\n<div>Birthdate: {{currentHero?.birthdate | date:'longDate'}}</div>\n\n<div>{{currentHero | json}}</div>\n\n<div>Birthdate: {{(currentHero?.birthdate | date:'longDate') | uppercase}}</div>\n\n<div>\n  <!-- pipe price to USD and display the $ symbol -->\n  <label>Price: </label>{{product.price | currency:'USD':true}}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Null values and the safe navigation operator -->\n<hr><h2 id=\"safe-navigation-operator\">Safe navigation operator <i>?.</i></h2>\n\n<div>\n  The title is {{title}}\n</div>\n\n<div>\n  The current hero's name is {{currentHero?.name}}\n</div>\n\n<div>\n  The current hero's name is {{currentHero.name}}\n</div>\n\n\n<!--\nThe null hero's name is {{nullHero.name}}\n\nSee console log:\n  TypeError: Cannot read property 'name' of null in [null]\n-->\n\n<!--No hero, div not displayed, no error -->\n<div *ngIf=\"nullHero\">The null hero's name is {{nullHero.name}}</div>\n\n<div>\nThe null hero's name is {{nullHero && nullHero.name}}\n</div>\n\n<div>\n  <!-- No hero, no problem! -->\n  The null hero's name is {{nullHero?.name}}\n</div>\n\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr><h2 id=\"non-null-assertion-operator\">Non-null assertion operator <i>!.</i></h2>\n\n<div>\n  <!--No hero, no text -->\n  <div *ngIf=\"hero\">\n    The hero's name is {{hero!.name}}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr><h2 id=\"any-type-cast-function\">$any type cast function <i>$any( )</i>.</h2>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>\n    The hero's marker is {{$any(hero).marker}}\n  </div>\n</div>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>\n    Undeclared members is {{$any(this).member}}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- TODO: discuss this in the Style binding section -->\n<!-- enums in bindings -->\n<hr><h2 id=\"enums\">Enums in binding</h2>\n\n<p>\n  The name of the Color.Red enum is {{Color[Color.Red]}}.<br>\n  The current color is {{Color[color]}} and its number is {{color}}.<br>\n  <button [style.color]=\"Color[color]\" (click)=\"colorToggle()\">Enum Toggle</button>\n</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->\n\n<div id=\"heroForm\">\n  <form (ngSubmit)=\"onSubmit(heroForm)\" #heroForm=\"ngForm\">\n    <div class=\"form-group\">\n      <label for=\"name\">Name\n        <input class=\"form-control\" name=\"name\" required [(ngModel)]=\"hero.name\">\n      </label>\n    </div>\n    <button type=\"submit\" [disabled]=\"!heroForm.form.valid\">Submit</button>\n  </form>\n  <div [hidden]=\"!heroForm.form.valid\">\n    {{submitMessage}}\n  </div>\n</div>\n\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<!-- copied from: https://stackblitz.com/angular/ymdjlgmlavo -->\n\n<a id=\"toc\"></a>\n<h1>Template Syntax</h1>\n<a href=\"#interpolation\">Interpolation</a>\n<br />\n<a href=\"#expression-context\">Expression context</a>\n<br />\n<a href=\"#statement-context\">Statement context</a>\n<br />\n<a href=\"#mental-model\">Mental Model</a>\n<br />\n<a href=\"#buttons\">Buttons</a>\n<br />\n<a href=\"#prop-vs-attrib\">Properties vs. Attributes</a>\n<br />\n<br />\n<a href=\"#property-binding\">Property Binding</a>\n<br />\n<div style=\"margin-left: 8px\">\n  <a href=\"#attribute-binding\">Attribute Binding</a>\n  <br />\n  <a href=\"#class-binding\">Class Binding</a>\n  <br />\n  <a href=\"#style-binding\">Style Binding</a>\n  <br />\n</div>\n<br />\n<a href=\"#event-binding\">Event Binding</a>\n<br />\n<a href=\"#two-way\">Two-way Binding</a>\n<br />\n<br />\n<div>Directives</div>\n<div style=\"margin-left: 8px\">\n  <a href=\"#ngModel\">NgModel (two-way) Binding</a>\n  <br />\n  <a href=\"#ngClass\">NgClass Binding</a>\n  <br />\n  <a href=\"#ngStyle\">NgStyle Binding</a>\n  <br />\n  <a href=\"#ngIf\">NgIf</a>\n  <br />\n  <a href=\"#ngFor\">NgFor</a>\n  <br />\n  <div style=\"margin-left: 8px\">\n    <a href=\"#ngFor-index\">NgFor with index</a>\n    <br />\n    <a href=\"#ngFor-trackBy\">NgFor with trackBy</a>\n    <br />\n  </div>\n  <a href=\"#ngSwitch\">NgSwitch</a>\n  <br />\n</div>\n<br />\n<a href=\"#ref-vars\">Template reference variables</a>\n<br />\n<a href=\"#inputs-and-outputs\">Inputs and outputs</a>\n<br />\n<a href=\"#pipes\">Pipes</a>\n<br />\n<a href=\"#safe-navigation-operator\">\n  Safe navigation operator\n  <i>?.</i>\n</a>\n<br />\n<a href=\"#non-null-assertion-operator\">\n  Non-null assertion operator\n  <i>!.</i>\n</a>\n<br />\n<a href=\"#enums\">Enums</a>\n<br />\n\n<!-- Interpolation and expressions -->\n<hr />\n<h2 id=\"interpolation\">Interpolation</h2>\n\n<p>My current hero is {{ currentHero.name }}</p>\n\n<h3>\n  {{ title }}\n  <img src=\"{{ heroImageUrl }}\" style=\"height: 30px\" />\n</h3>\n\n<!-- \"The sum of 1 + 1 is 2\" -->\n<p>The sum of 1 + 1 is {{ 1 + 1 }}</p>\n\n<!-- \"The sum of 1 + 1 is not 4\" -->\n<p>The sum of 1 + 1 is not {{ 1 + 1 + getVal() }}</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr />\n<h2 id=\"expression-context\">Expression context</h2>\n\n<p>\n  Component expression context (&#123;&#123;title&#125;&#125;,\n  [hidden]=\"isUnchanged\")\n</p>\n<div class=\"context\">\n  {{ title }}\n  <span [hidden]=\"isUnchanged\">changed</span>\n</div>\n\n<p>Template input variable expression context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<ng-template>\n  <div *ngFor=\"let hero of heroes\">{{ hero.name }}</div>\n</ng-template>\n\n<p>Template reference variable expression context (#heroInput)</p>\n<div (keyup)=\"(0)\" class=\"context\">\n  Type something:\n  <input #heroInput />\n  {{ heroInput.value }}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr />\n<h2 id=\"statement-context\">Statement context</h2>\n\n<p>Component statement context ( (click)=\"onSave() )</p>\n<div class=\"context\">\n  <button (click)=\"deleteHero()\">Delete hero</button>\n</div>\n\n<p>Template $event statement context</p>\n<div class=\"context\">\n  <button (click)=\"onSave($event)\">Save</button>\n</div>\n\n<p>Template input variable statement context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<div class=\"context\">\n  <button *ngFor=\"let hero of heroes\" (click)=\"deleteHero(hero)\">\n    {{ hero.name }}\n  </button>\n</div>\n\n<p>Template reference variable statement context (#heroForm)</p>\n<div class=\"context\">\n  <form #heroForm (ngSubmit)=\"onSubmit(heroForm)\">...</form>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- New Mental Model -->\n<hr />\n<h2 id=\"mental-model\">New Mental Model</h2>\n\n<!--<img src=\"http://www.wpclipart.com/cartoon/people/hero/hero_silhoutte_T.png\">-->\n<!-- Public Domain terms of use: http://www.wpclipart.com/terms.html -->\n<div class=\"special\">Mental Model</div>\n<img src=\"assets/images/hero.png\" />\n<button disabled>Save</button>\n<br />\n<br />\n\n<div>\n  <!-- Normal HTML -->\n  <div class=\"special\">Mental Model</div>\n  <!-- Wow! A new element! -->\n  <app-hero-detail></app-hero-detail>\n</div>\n<br />\n<br />\n\n<div>\n  <!-- Bind button disabled state to \\`isUnchanged\\` property -->\n  <button [disabled]=\"isUnchanged\">Save</button>\n</div>\n<br />\n<br />\n\n<div>\n  <img [src]=\"heroImageUrl\" />\n  <app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n  <div [ngClass]=\"{ special: isSpecial }\"></div>\n</div>\n<br />\n<br />\n\n<button (click)=\"onSave()\">Save</button>\n<app-hero-detail (deleteRequest)=\"deleteHero()\"></app-hero-detail>\n<div (myClick)=\"clicked = $event\" clickable>click me</div>\n{{ clicked }}\n<br />\n<br />\n\n<div>\n  Hero Name:\n  <input [(ngModel)]=\"name\" />\n  {{ name }}\n</div>\n<br />\n<br />\n\n<button [attr.aria-label]=\"help\">help</button>\n<br />\n<br />\n\n<div [class.special]=\"isSpecial\">Special</div>\n<br />\n<br />\n\n<button [style.color]=\"isSpecial ? 'red' : 'green'\">button</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property vs. attribute -->\n<hr />\n<h2 id=\"prop-vs-attrib\">Property vs. Attribute (img examples)</h2>\n<!-- examine the following <img> tag in the browser tools -->\n<img src=\"images/ng-logo.png\" [src]=\"heroImageUrl\" />\n\n<br />\n<br />\n\n<img [src]=\"iconUrl\" />\n<img bind-src=\"heroImageUrl\" />\n<img [attr.src]=\"villainImageUrl\" />\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- buttons -->\n<hr />\n<h2 id=\"buttons\">Buttons</h2>\n\n<button>Enabled (but does nothing)</button>\n<button disabled>Disabled</button>\n<button disabled=\"false\">Still disabled</button>\n<br />\n<br />\n<button disabled>disabled by attribute</button>\n<button [disabled]=\"isUnchanged\">disabled by property binding</button>\n<br />\n<br />\n<button bind-disabled=\"isUnchanged\" on-click=\"onSave($event)\">\n  Disabled Cancel\n</button>\n<button [disabled]=\"!canSave\" (click)=\"onSave($event)\">Enabled Save</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property binding -->\n<hr />\n<h2 id=\"property-binding\">Property Binding</h2>\n\n<img [src]=\"heroImageUrl\" />\n<button [disabled]=\"isUnchanged\">Cancel is disabled</button>\n<div [ngClass]=\"classes\">[ngClass] binding to the classes property</div>\n<app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n<img bind-src=\"heroImageUrl\" />\n\n<!-- ERROR: HeroDetailComponent.hero expects a\n     Hero object, not the string \"currentHero\" -->\n<div *ngIf=\"false\">\n  <app-hero-detail hero=\"currentHero\"></app-hero-detail>\n</div>\n<app-hero-detail prefix=\"You are my\" [hero]=\"currentHero\"></app-hero-detail>\n\n<p>\n  <img src=\"{{ heroImageUrl }}\" />\n  is the\n  <i>interpolated</i>\n  image.\n</p>\n<p>\n  <img [src]=\"heroImageUrl\" />\n  is the\n  <i>property bound</i>\n  image.\n</p>\n\n<p>\n  <span>\n    \"{{ title }}\" is the\n    <i>interpolated</i>\n    title.\n  </span>\n</p>\n<p>\n  \"\n  <span [innerHTML]=\"title\"></span>\n  \" is the\n  <i>property bound</i>\n  title.\n</p>\n\n<!--\n  Angular generates warnings for these two lines as it sanitizes them\n  WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).\n -->\n<p>\n  <span>\n    \"{{ evilTitle }}\" is the\n    <i>interpolated</i>\n    evil title.\n  </span>\n</p>\n<p>\n  \"\n  <span [innerHTML]=\"evilTitle\"></span>\n  \" is the\n  <i>property bound</i>\n  evil title.\n</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- attribute binding -->\n<hr />\n<h2 id=\"attribute-binding\">Attribute Binding</h2>\n\n<!--  create and set a colspan attribute -->\n<table border=\"1\">\n  <!--  expression calculates colspan=2 -->\n  <tr><td [attr.colspan]=\"1 + 1\">One-Two</td></tr>\n\n  <!-- ERROR: There is no \\`colspan\\` property to set!\n    <tr><td colspan=\"{{1 + 1}}\">Three-Four</td></tr>\n  -->\n\n  <tr>\n    <td>Five</td>\n    <td>Six</td>\n  </tr>\n</table>\n\n<br />\n<!-- create and set an aria attribute for assistive technology -->\n<button [attr.aria-label]=\"actionName\">{{ actionName }} with Aria</button>\n<br />\n<br />\n\n<!-- The following effects are not discussed in the chapter -->\n<div>\n  <!-- any use of [attr.disabled] creates the disabled attribute -->\n  <button [attr.disabled]=\"isUnchanged\">Disabled</button>\n\n  <button [attr.disabled]=\"!isUnchanged\">Disabled as well</button>\n\n  <!-- we'd have to remove it with property binding -->\n  <button disabled [disabled]=\"false\">Enabled (but inert)</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- class binding -->\n<hr />\n<h2 id=\"class-binding\">Class Binding</h2>\n\n<!-- standard class attribute setting  -->\n<div class=\"bad curly special\">Bad curly special</div>\n\n<!-- reset/override all class names with a binding  -->\n<div class=\"bad curly special\" [class]=\"badCurly\">Bad curly</div>\n\n<!-- toggle the \"special\" class on/off with a property -->\n<div [class.special]=\"isSpecial\">The class binding is special</div>\n\n<!-- binding to \\`class.special\\` trumps the class attribute -->\n<div class=\"special\" [class.special]=\"!isSpecial\">\n  This one is not so special\n</div>\n\n<div bind-class.special=\"isSpecial\">This class binding is special too</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!--style binding -->\n<hr />\n<h2 id=\"style-binding\">Style Binding</h2>\n\n<button [style.color]=\"isSpecial ? 'red' : 'green'\">Red</button>\n<button [style.background-color]=\"canSave ? 'cyan' : 'grey'\">Save</button>\n\n<button [style.font-size.em]=\"isSpecial ? 3 : 1\">Big</button>\n<button [style.font-size.%]=\"!isSpecial ? 150 : 50\">Small</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- event binding -->\n<hr />\n<h2 id=\"event-binding\">Event Binding</h2>\n\n<button (click)=\"onSave()\">Save</button>\n\n<button on-click=\"onSave()\">On Save</button>\n\n<div>\n  <!-- \\`myClick\\` is an event on the custom \\`ClickDirective\\` -->\n  <div (myClick)=\"clickMessage = $event\" clickable>click with myClick</div>\n  {{ clickMessage }}\n</div>\n\n<!-- binding to a nested component -->\n<app-hero-detail\n  (deleteRequest)=\"deleteHero($event)\"\n  [hero]=\"currentHero\"\n></app-hero-detail>\n<br />\n\n<app-big-hero-detail\n  (deleteRequest)=\"deleteHero($event)\"\n  [hero]=\"currentHero\"\n></app-big-hero-detail>\n\n<div class=\"parent-div\" (click)=\"onClickMe($event)\" clickable>\n  Click me\n  <div class=\"child-div\">Click me too!</div>\n</div>\n\n<!-- Will save only once -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave($event)\">Save, no propagation</button>\n</div>\n\n<!-- Will save twice -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave()\">Save w/ propagation</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr />\n<h2 id=\"two-way\">Two-way Binding</h2>\n<div id=\"two-way-1\">\n  <app-sizer [(size)]=\"fontSizePx\"></app-sizer>\n  <div [style.font-size.px]=\"fontSizePx\">Resizable Text</div>\n  <label>\n    FontSize (px):\n    <input [(ngModel)]=\"fontSizePx\" />\n  </label>\n</div>\n<br />\n<div id=\"two-way-2\">\n  <h3>De-sugared two-way binding</h3>\n  <app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx = $event\"></app-sizer>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Two way data binding unwound;\n    passing the changed display value to the event handler via \\`$event\\` -->\n<hr />\n<h2 id=\"ngModel\">NgModel (two-way) Binding</h2>\n\n<h3>Result: {{ currentHero.name }}</h3>\n\n<input\n  [value]=\"currentHero.name\"\n  (input)=\"currentHero.name = $event.target.value\"\n/>\nwithout NgModel\n<br />\n<input [(ngModel)]=\"currentHero.name\" />\n[(ngModel)]\n<br />\n<input bindon-ngModel=\"currentHero.name\" />\nbindon-ngModel\n<br />\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"currentHero.name = $event\"\n/>\n(ngModelChange)=\"...name=$event\"\n<br />\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"setUppercaseName($event)\"\n/>\n(ngModelChange)=\"setUppercaseName($event)\"\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgClass binding -->\n<hr />\n<h2 id=\"ngClass\">NgClass Binding</h2>\n\n<p>currentClasses is {{ currentClasses | json }}</p>\n<div [ngClass]=\"currentClasses\">\n  This div is initially saveable, unchanged, and special\n</div>\n\n<!-- not used in chapter -->\n<br />\n<label>\n  saveable\n  <input type=\"checkbox\" [(ngModel)]=\"canSave\" />\n</label>\n|\n<label>\n  modified:\n  <input\n    type=\"checkbox\"\n    [value]=\"!isUnchanged\"\n    (change)=\"isUnchanged = !isUnchanged\"\n  />\n</label>\n|\n<label>\n  special:\n  <input type=\"checkbox\" [(ngModel)]=\"isSpecial\" />\n</label>\n<button (click)=\"setCurrentClasses()\">Refresh currentClasses</button>\n<br />\n<br />\n<div [ngClass]=\"currentClasses\">\n  This div should be {{ canSave ? \"\" : \"not\" }} saveable,\n  {{ isUnchanged ? \"unchanged\" : \"modified\" }} and,\n  {{ isSpecial ? \"\" : \"not\" }} special after clicking \"Refresh\".\n</div>\n<br />\n<br />\n\n<div [ngClass]=\"isSpecial ? 'special' : ''\">This div is special</div>\n\n<div class=\"bad curly special\">Bad curly special</div>\n<div [ngClass]=\"{ bad: false, curly: true, special: true }\">Curly special</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgStyle binding -->\n<hr />\n<h2 id=\"ngStyle\">NgStyle Binding</h2>\n\n<div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\">\n  This div is x-large or smaller.\n</div>\n\n<h3>[ngStyle] binding to currentStyles - CSS property names</h3>\n<p>currentStyles is {{ currentStyles | json }}</p>\n<div [ngStyle]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n</div>\n\n<!-- not used in chapter -->\n<br />\n<label>\n  italic:\n  <input type=\"checkbox\" [(ngModel)]=\"canSave\" />\n</label>\n|\n<label>\n  normal:\n  <input type=\"checkbox\" [(ngModel)]=\"isUnchanged\" />\n</label>\n|\n<label>\n  xlarge:\n  <input type=\"checkbox\" [(ngModel)]=\"isSpecial\" />\n</label>\n<button (click)=\"setCurrentStyles()\">Refresh currentStyles</button>\n<br />\n<br />\n<div [ngStyle]=\"currentStyles\">\n  This div should be {{ canSave ? \"italic\" : \"plain\" }},\n  {{ isUnchanged ? \"normal weight\" : \"bold\" }} and,\n  {{ isSpecial ? \"extra large\" : \"normal size\" }} after clicking \"Refresh\".\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgIf binding -->\n<hr />\n<h2 id=\"ngIf\">NgIf Binding</h2>\n\n<app-hero-detail *ngIf=\"isActive\"></app-hero-detail>\n\n<div *ngIf=\"currentHero\">Hello, {{ currentHero.name }}</div>\n<div *ngIf=\"nullHero\">Hello, {{ nullHero.name }}</div>\n\n<!-- NgIf binding with template (no *) -->\n\n<ng-template [ngIf]=\"currentHero\">\n  Add {{ currentHero.name }} with template\n</ng-template>\n\n<!-- Does not show because isActive is false! -->\n<div>Hero Detail removed from DOM (via template) because isActive is false</div>\n<ng-template [ngIf]=\"isActive\">\n  <app-hero-detail></app-hero-detail>\n</ng-template>\n\n<!-- isSpecial is true -->\n<div [class.hidden]=\"!isSpecial\">Show with class</div>\n<div [class.hidden]=\"isSpecial\">Hide with class</div>\n\n<!-- HeroDetail is in the DOM but hidden -->\n<app-hero-detail [class.hidden]=\"isSpecial\"></app-hero-detail>\n\n<div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with style</div>\n<div [style.display]=\"isSpecial ? 'none' : 'block'\">Hide with style</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgFor binding -->\n<hr />\n<h2 id=\"ngFor\">NgFor Binding</h2>\n\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes\">{{ hero.name }}</div>\n</div>\n<br />\n\n<div class=\"box\">\n  <!-- *ngFor w/ hero-detail Component -->\n  <app-hero-detail *ngFor=\"let hero of heroes\" [hero]=\"hero\"></app-hero-detail>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-index\">*ngFor with index</h4>\n<p>\n  with\n  <i>semi-colon</i>\n  separator\n</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; let i = index\">\n    {{ i + 1 }} - {{ hero.name }}\n  </div>\n</div>\n\n<p>\n  with\n  <i>comma</i>\n  separator\n</p>\n<div class=\"box\">\n  <!-- Ex: \"1 - Hercules\" -->\n  <div *ngFor=\"let hero of heroes; let i = index\">\n    {{ i + 1 }} - {{ hero.name }}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-trackBy\">*ngFor trackBy</h4>\n<button (click)=\"resetHeroes()\">Reset heroes</button>\n<button (click)=\"changeIds()\">Change ids</button>\n<button (click)=\"clearTrackByCounts()\">Clear counts</button>\n\n<p>\n  <i>without</i>\n  trackBy\n</p>\n<div class=\"box\">\n  <div #noTrackBy *ngFor=\"let hero of heroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n\n  <div id=\"noTrackByCnt\" *ngIf=\"heroesNoTrackByCount\">\n    Hero DOM elements change #{{ heroesNoTrackByCount }} without trackBy\n  </div>\n</div>\n\n<p>with trackBy</p>\n<div class=\"box\">\n  <div #withTrackBy *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n\n  <div id=\"withTrackByCnt\" *ngIf=\"heroesWithTrackByCount\">\n    Hero DOM elements change #{{ heroesWithTrackByCount }} with trackBy\n  </div>\n</div>\n\n<br />\n<br />\n<br />\n\n<p>\n  with trackBy and\n  <i>semi-colon</i>\n  separator\n</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<p>\n  with trackBy and\n  <i>comma</i>\n  separator\n</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<p>\n  with trackBy and\n  <i>space</i>\n  separator\n</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<p>\n  with\n  <i>generic</i>\n  trackById function\n</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackById\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgSwitch binding -->\n<hr />\n<h2 id=\"ngSwitch\">NgSwitch Binding</h2>\n\n<p>Pick your favorite hero</p>\n<div>\n  <label *ngFor=\"let h of heroes\">\n    <input type=\"radio\" name=\"heroes\" [(ngModel)]=\"currentHero\" [value]=\"h\" />\n    {{ h.name }}\n  </label>\n</div>\n\n<div [ngSwitch]=\"currentHero.emotion\">\n  <app-happy-hero *ngSwitchCase=\"'happy'\" [hero]=\"currentHero\"></app-happy-hero>\n  <app-sad-hero *ngSwitchCase=\"'sad'\" [hero]=\"currentHero\"></app-sad-hero>\n  <app-confused-hero\n    *ngSwitchCase=\"'confused'\"\n    [hero]=\"currentHero\"\n  ></app-confused-hero>\n  <div *ngSwitchCase=\"'confused'\">\n    Are you as confused as {{ currentHero.name }}?\n  </div>\n  <app-unknown-hero *ngSwitchDefault [hero]=\"currentHero\"></app-unknown-hero>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- template reference variable -->\n<hr />\n<h2 id=\"ref-vars\">Template reference variables</h2>\n\n<input #phone placeholder=\"phone number\" />\n\n<!-- lots of other elements -->\n\n<!-- phone refers to the input element; pass its \\`value\\` to an event handler -->\n<button (click)=\"callPhone(phone.value)\">Call</button>\n\n<input ref-fax placeholder=\"fax number\" />\n<button (click)=\"callFax(fax.value)\">Fax</button>\n\n<!-- btn refers to the button element; show its disabled state -->\n<button\n  #btn\n  disabled\n  [innerHTML]=\"'disabled by attribute: ' + btn.disabled\"\n></button>\n\n<h4>Example Form</h4>\n<app-hero-form [hero]=\"currentHero\"></app-hero-form>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- inputs and output -->\n<hr />\n<h2 id=\"inputs-and-outputs\">Inputs and Outputs</h2>\n\n<img [src]=\"iconUrl\" />\n<button (click)=\"onSave()\">Save</button>\n\n<app-hero-detail\n  [hero]=\"currentHero\"\n  (deleteRequest)=\"deleteHero($event)\"\n></app-hero-detail>\n\n<div (myClick)=\"clickMessage2 = $event\" clickable>myClick2</div>\n{{ clickMessage2 }}\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Pipes -->\n<hr />\n<h2 id=\"pipes\">Pipes</h2>\n\n<div>Title through uppercase pipe: {{ title | uppercase }}</div>\n\n<!-- Pipe chaining: convert title to uppercase, then to lowercase -->\n<div>\n  Title through a pipe chain:\n  {{ title | uppercase | lowercase }}\n</div>\n\n<!-- pipe with configuration argument => \"February 25, 1970\" -->\n<div>Birthdate: {{ currentHero?.birthdate | date: \"longDate\" }}</div>\n\n<div>{{ currentHero | json }}</div>\n\n<div>\n  Birthdate: {{ currentHero?.birthdate | date: \"longDate\" | uppercase }}\n</div>\n\n<div>\n  <!-- pipe price to USD and display the $ symbol -->\n  <label>Price:</label>\n  {{ product.price | currency: \"USD\" : true }}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Null values and the safe navigation operator -->\n<hr />\n<h2 id=\"safe-navigation-operator\">\n  Safe navigation operator\n  <i>?.</i>\n</h2>\n\n<div>The title is {{ title }}</div>\n\n<div>The current hero's name is {{ currentHero?.name }}</div>\n\n<div>The current hero's name is {{ currentHero.name }}</div>\n\n<!--\nThe null hero's name is {{nullHero.name}}\n\nSee console log:\n  TypeError: Cannot read property 'name' of null in [null]\n-->\n\n<!--No hero, div not displayed, no error -->\n<div *ngIf=\"nullHero\">The null hero's name is {{ nullHero.name }}</div>\n\n<div>The null hero's name is {{ nullHero && nullHero.name }}</div>\n\n<div>\n  <!-- No hero, no problem! -->\n  The null hero's name is {{ nullHero?.name }}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr />\n<h2 id=\"non-null-assertion-operator\">\n  Non-null assertion operator\n  <i>!.</i>\n</h2>\n\n<div>\n  <!--No hero, no text -->\n  <div *ngIf=\"hero\">The hero's name is {{ hero!.name }}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr />\n<h2 id=\"any-type-cast-function\">\n  $any type cast function\n  <i>$any( )</i>\n  .\n</h2>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>The hero's marker is {{ $any(hero).marker }}</div>\n</div>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>Undeclared members is {{ $any(this).member }}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- TODO: discuss this in the Style binding section -->\n<!-- enums in bindings -->\n<hr />\n<h2 id=\"enums\">Enums in binding</h2>\n\n<p>\n  The name of the Color.Red enum is {{ Color[Color.Red] }}.\n  <br />\n  The current color is {{ Color[color] }} and its number is {{ color }}.\n  <br />\n  <button [style.color]=\"Color[color]\" (click)=\"colorToggle()\">\n    Enum Toggle\n  </button>\n</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->\n\n<div id=\"heroForm\">\n  <form (ngSubmit)=\"onSubmit(heroForm)\" #heroForm=\"ngForm\">\n    <div class=\"form-group\">\n      <label for=\"name\">\n        Name\n        <input\n          class=\"form-control\"\n          name=\"name\"\n          required\n          [(ngModel)]=\"hero.name\"\n        />\n      </label>\n    </div>\n    <button type=\"submit\" [disabled]=\"!heroForm.form.valid\">Submit</button>\n  </form>\n  <div [hidden]=\"!heroForm.form.valid\">\n    {{ submitMessage }}\n  </div>\n</div>\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->");
}
#[test]
fn test_real_world_component_html_print_width_1_format_1_52c0e328() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(1)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<!-- copied from: https://stackblitz.com/angular/ymdjlgmlavo -->\n\n<a id=\"toc\"></a>\n<h1>Template Syntax</h1>\n<a href=\"#interpolation\">Interpolation</a><br>\n<a href=\"#expression-context\">Expression context</a><br>\n<a href=\"#statement-context\">Statement context</a><br>\n<a href=\"#mental-model\">Mental Model</a><br>\n<a href=\"#buttons\">Buttons</a><br>\n<a href=\"#prop-vs-attrib\">Properties vs. Attributes</a><br>\n<br>\n<a href=\"#property-binding\">Property Binding</a><br>\n<div style=\"margin-left:8px\">\n  <a href=\"#attribute-binding\">Attribute Binding</a><br>\n  <a href=\"#class-binding\">Class Binding</a><br>\n  <a href=\"#style-binding\">Style Binding</a><br>\n</div>\n<br>\n<a href=\"#event-binding\">Event Binding</a><br>\n<a href=\"#two-way\">Two-way Binding</a><br>\n<br>\n<div>Directives</div>\n<div style=\"margin-left:8px\">\n  <a href=\"#ngModel\">NgModel (two-way) Binding</a><br>\n  <a href=\"#ngClass\">NgClass Binding</a><br>\n  <a href=\"#ngStyle\">NgStyle Binding</a><br>\n  <a href=\"#ngIf\">NgIf</a><br>\n  <a href=\"#ngFor\">NgFor</a><br>\n  <div style=\"margin-left:8px\">\n    <a href=\"#ngFor-index\">NgFor with index</a><br>\n    <a href=\"#ngFor-trackBy\">NgFor with trackBy</a><br>\n  </div>\n  <a href=\"#ngSwitch\">NgSwitch</a><br>\n</div>\n<br>\n<a href=\"#ref-vars\">Template reference variables</a><br>\n<a href=\"#inputs-and-outputs\">Inputs and outputs</a><br>\n<a href=\"#pipes\">Pipes</a><br>\n<a href=\"#safe-navigation-operator\">Safe navigation operator <i>?.</i></a><br>\n<a href=\"#non-null-assertion-operator\">Non-null assertion operator <i>!.</i></a><br>\n<a href=\"#enums\">Enums</a><br>\n\n<!-- Interpolation and expressions -->\n<hr><h2 id=\"interpolation\">Interpolation</h2>\n\n<p>My current hero is {{currentHero.name}}</p>\n\n<h3>\n  {{title}}\n  <img src=\"{{heroImageUrl}}\" style=\"height:30px\">\n</h3>\n\n<!-- \"The sum of 1 + 1 is 2\" -->\n<p>The sum of 1 + 1 is {{1 + 1}}</p>\n\n<!-- \"The sum of 1 + 1 is not 4\" -->\n<p>The sum of 1 + 1 is not {{1 + 1 + getVal()}}</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"expression-context\">Expression context</h2>\n\n<p>Component expression context (&#123;&#123;title&#125;&#125;, [hidden]=\"isUnchanged\")</p>\n<div class=\"context\">\n  {{title}}\n  <span [hidden]=\"isUnchanged\">changed</span>\n</div>\n\n\n<p>Template input variable expression context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<ng-template>\n  <div *ngFor=\"let hero of heroes\">{{hero.name}}</div>\n</ng-template>\n\n<p>Template reference variable expression context (#heroInput)</p>\n<div (keyup)=\"0\" class=\"context\">\n  Type something:\n  <input #heroInput> {{heroInput.value}}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"statement-context\">Statement context</h2>\n\n<p>Component statement context ( (click)=\"onSave() )\n<div class=\"context\">\n  <button (click)=\"deleteHero()\">Delete hero</button>\n</div>\n\n<p>Template $event statement context</p>\n<div class=\"context\">\n  <button (click)=\"onSave($event)\">Save</button>\n</div>\n\n<p>Template input variable statement context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<div class=\"context\">\n  <button *ngFor=\"let hero of heroes\" (click)=\"deleteHero(hero)\">{{hero.name}}</button>\n</div>\n\n<p>Template reference variable statement context (#heroForm)</p>\n<div class=\"context\">\n  <form #heroForm (ngSubmit)=\"onSubmit(heroForm)\"> ... </form>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- New Mental Model -->\n<hr><h2 id=\"mental-model\">New Mental Model</h2>\n\n<!--<img src=\"http://www.wpclipart.com/cartoon/people/hero/hero_silhoutte_T.png\">-->\n<!-- Public Domain terms of use: http://www.wpclipart.com/terms.html -->\n<div class=\"special\">Mental Model</div>\n<img src=\"assets/images/hero.png\">\n<button disabled>Save</button>\n<br><br>\n\n<div>\n  <!-- Normal HTML -->\n  <div class=\"special\">Mental Model</div>\n  <!-- Wow! A new element! -->\n  <app-hero-detail></app-hero-detail>\n</div>\n<br><br>\n\n<div>\n  <!-- Bind button disabled state to \\`isUnchanged\\` property -->\n  <button [disabled]=\"isUnchanged\">Save</button>\n</div>\n<br><br>\n\n<div>\n  <img [src]=\"heroImageUrl\">\n  <app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n  <div [ngClass]=\"{'special': isSpecial}\"></div>\n</div>\n<br><br>\n\n<button (click)=\"onSave()\">Save</button>\n<app-hero-detail (deleteRequest)=\"deleteHero()\"></app-hero-detail>\n<div (myClick)=\"clicked=$event\" clickable>click me</div>\n{{clicked}}\n<br><br>\n\n<div>\n  Hero Name:\n  <input [(ngModel)]=\"name\">\n  {{name}}\n</div>\n<br><br>\n\n<button [attr.aria-label]=\"help\">help</button>\n<br><br>\n\n<div [class.special]=\"isSpecial\">Special</div>\n<br><br>\n\n<button [style.color]=\"isSpecial ? 'red' : 'green'\">\nbutton</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property vs. attribute -->\n<hr><h2 id=\"prop-vs-attrib\">Property vs. Attribute (img examples)</h2>\n<!-- examine the following <img> tag in the browser tools -->\n<img src=\"images/ng-logo.png\"\n    [src]=\"heroImageUrl\">\n\n<br><br>\n\n<img [src]=\"iconUrl\"/>\n<img bind-src=\"heroImageUrl\"/>\n<img [attr.src]=\"villainImageUrl\"/>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- buttons -->\n<hr><h2 id=\"buttons\">Buttons</h2>\n\n<button>Enabled (but does nothing)</button>\n<button disabled>Disabled</button>\n<button disabled=false>Still disabled</button>\n<br><br>\n<button disabled>disabled by attribute</button>\n<button [disabled]=\"isUnchanged\">disabled by property binding</button>\n<br><br>\n<button bind-disabled=\"isUnchanged\" on-click=\"onSave($event)\">Disabled Cancel</button>\n<button [disabled]=\"!canSave\" (click)=\"onSave($event)\">Enabled Save</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property binding -->\n<hr><h2 id=\"property-binding\">Property Binding</h2>\n\n<img [src]=\"heroImageUrl\">\n<button [disabled]=\"isUnchanged\">Cancel is disabled</button>\n<div [ngClass]=\"classes\">[ngClass] binding to the classes property</div>\n<app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n<img bind-src=\"heroImageUrl\">\n\n<!-- ERROR: HeroDetailComponent.hero expects a\n     Hero object, not the string \"currentHero\" -->\n<div *ngIf=\"false\">\n  <app-hero-detail hero=\"currentHero\"></app-hero-detail>\n</div>\n<app-hero-detail prefix=\"You are my\" [hero]=\"currentHero\"></app-hero-detail>\n\n<p><img src=\"{{heroImageUrl}}\"> is the <i>interpolated</i> image.</p>\n<p><img [src]=\"heroImageUrl\"> is the <i>property bound</i> image.</p>\n\n<p><span>\"{{title}}\" is the <i>interpolated</i> title.</span></p>\n<p>\"<span [innerHTML]=\"title\"></span>\" is the <i>property bound</i> title.</p>\n\n<!--\n  Angular generates warnings for these two lines as it sanitizes them\n  WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).\n -->\n<p><span>\"{{evilTitle}}\" is the <i>interpolated</i> evil title.</span></p>\n<p>\"<span [innerHTML]=\"evilTitle\"></span>\" is the <i>property bound</i> evil title.</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- attribute binding -->\n<hr><h2 id=\"attribute-binding\">Attribute Binding</h2>\n\n<!--  create and set a colspan attribute -->\n<table border=1>\n  <!--  expression calculates colspan=2 -->\n  <tr><td [attr.colspan]=\"1 + 1\">One-Two</td></tr>\n\n  <!-- ERROR: There is no \\`colspan\\` property to set!\n    <tr><td colspan=\"{{1 + 1}}\">Three-Four</td></tr>\n  -->\n\n  <tr><td>Five</td><td>Six</td></tr>\n</table>\n\n<br>\n<!-- create and set an aria attribute for assistive technology -->\n<button [attr.aria-label]=\"actionName\">{{actionName}} with Aria</button>\n<br><br>\n\n<!-- The following effects are not discussed in the chapter -->\n<div>\n  <!-- any use of [attr.disabled] creates the disabled attribute -->\n  <button [attr.disabled]=\"isUnchanged\">Disabled</button>\n\n  <button [attr.disabled]=\"!isUnchanged\">Disabled as well</button>\n\n  <!-- we'd have to remove it with property binding -->\n  <button disabled [disabled]=\"false\">Enabled (but inert)</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- class binding -->\n<hr><h2 id=\"class-binding\">Class Binding</h2>\n\n<!-- standard class attribute setting  -->\n<div class=\"bad curly special\">Bad curly special</div>\n\n<!-- reset/override all class names with a binding  -->\n<div class=\"bad curly special\"\n     [class]=\"badCurly\">Bad curly</div>\n\n<!-- toggle the \"special\" class on/off with a property -->\n<div [class.special]=\"isSpecial\">The class binding is special</div>\n\n<!-- binding to \\`class.special\\` trumps the class attribute -->\n<div class=\"special\"\n     [class.special]=\"!isSpecial\">This one is not so special</div>\n\n<div bind-class.special=\"isSpecial\">This class binding is special too</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!--style binding -->\n<hr><h2 id=\"style-binding\">Style Binding</h2>\n\n<button [style.color]=\"isSpecial ? 'red': 'green'\">Red</button>\n<button [style.background-color]=\"canSave ? 'cyan': 'grey'\" >Save</button>\n\n<button [style.font-size.em]=\"isSpecial ? 3 : 1\" >Big</button>\n<button [style.font-size.%]=\"!isSpecial ? 150 : 50\" >Small</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- event binding -->\n<hr><h2 id=\"event-binding\">Event Binding</h2>\n\n<button (click)=\"onSave()\">Save</button>\n\n<button on-click=\"onSave()\">On Save</button>\n\n<div>\n<!-- \\`myClick\\` is an event on the custom \\`ClickDirective\\` -->\n<div (myClick)=\"clickMessage=$event\" clickable>click with myClick</div>\n{{clickMessage}}\n</div>\n\n\n<!-- binding to a nested component -->\n<app-hero-detail (deleteRequest)=\"deleteHero($event)\" [hero]=\"currentHero\"></app-hero-detail>\n<br>\n\n<app-big-hero-detail\n    (deleteRequest)=\"deleteHero($event)\"\n    [hero]=\"currentHero\">\n</app-big-hero-detail>\n\n<div class=\"parent-div\" (click)=\"onClickMe($event)\" clickable>Click me\n  <div class=\"child-div\">Click me too!</div>\n</div>\n\n<!-- Will save only once -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave($event)\">Save, no propagation</button>\n</div>\n\n<!-- Will save twice -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave()\">Save w/ propagation</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"two-way\">Two-way Binding</h2>\n<div id=\"two-way-1\">\n  <app-sizer [(size)]=\"fontSizePx\"></app-sizer>\n  <div [style.font-size.px]=\"fontSizePx\">Resizable Text</div>\n  <label>FontSize (px): <input [(ngModel)]=\"fontSizePx\"></label>\n</div>\n<br>\n<div id=\"two-way-2\">\n  <h3>De-sugared two-way binding</h3>\n  <app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx=$event\"></app-sizer>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Two way data binding unwound;\n    passing the changed display value to the event handler via \\`$event\\` -->\n<hr><h2 id=\"ngModel\">NgModel (two-way) Binding</h2>\n\n<h3>Result: {{currentHero.name}}</h3>\n\n<input [value]=\"currentHero.name\"\n       (input)=\"currentHero.name=$event.target.value\" >\nwithout NgModel\n<br>\n<input [(ngModel)]=\"currentHero.name\">\n[(ngModel)]\n<br>\n<input bindon-ngModel=\"currentHero.name\">\nbindon-ngModel\n<br>\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"currentHero.name=$event\">\n(ngModelChange)=\"...name=$event\"\n<br>\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"setUppercaseName($event)\">\n(ngModelChange)=\"setUppercaseName($event)\"\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgClass binding -->\n<hr><h2 id=\"ngClass\">NgClass Binding</h2>\n\n<p>currentClasses is {{currentClasses | json}}</p>\n<div [ngClass]=\"currentClasses\">This div is initially saveable, unchanged, and special</div>\n\n<!-- not used in chapter -->\n<br>\n<label>saveable   <input type=\"checkbox\" [(ngModel)]=\"canSave\"></label> |\n<label>modified:  <input type=\"checkbox\" [value]=\"!isUnchanged\" (change)=\"isUnchanged=!isUnchanged\"></label> |\n<label>special:   <input type=\"checkbox\" [(ngModel)]=\"isSpecial\"></label>\n<button (click)=\"setCurrentClasses()\">Refresh currentClasses</button>\n<br><br>\n<div [ngClass]=\"currentClasses\">\n  This div should be {{ canSave ? \"\": \"not\"}} saveable,\n                  {{ isUnchanged ? \"unchanged\" : \"modified\" }} and,\n                  {{ isSpecial ? \"\": \"not\"}} special after clicking \"Refresh\".</div>\n<br><br>\n\n<div [ngClass]=\"isSpecial ? 'special' : ''\">This div is special</div>\n\n<div class=\"bad curly special\">Bad curly special</div>\n<div [ngClass]=\"{'bad':false, 'curly':true, 'special':true}\">Curly special</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgStyle binding -->\n<hr><h2 id=\"ngStyle\">NgStyle Binding</h2>\n\n<div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\" >\n  This div is x-large or smaller.\n</div>\n\n<h3>[ngStyle] binding to currentStyles - CSS property names</h3>\n<p>currentStyles is {{currentStyles | json}}</p>\n<div [ngStyle]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n</div>\n\n<!-- not used in chapter -->\n<br>\n<label>italic: <input type=\"checkbox\" [(ngModel)]=\"canSave\"></label> |\n<label>normal: <input type=\"checkbox\" [(ngModel)]=\"isUnchanged\"></label> |\n<label>xlarge: <input type=\"checkbox\" [(ngModel)]=\"isSpecial\"></label>\n<button (click)=\"setCurrentStyles()\">Refresh currentStyles</button>\n<br><br>\n<div [ngStyle]=\"currentStyles\">\n  This div should be {{ canSave ? \"italic\": \"plain\"}},\n                  {{ isUnchanged ? \"normal weight\" : \"bold\" }} and,\n                  {{ isSpecial ? \"extra large\": \"normal size\"}} after clicking \"Refresh\".</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgIf binding -->\n<hr><h2 id=\"ngIf\">NgIf Binding</h2>\n\n<app-hero-detail *ngIf=\"isActive\"></app-hero-detail>\n\n<div *ngIf=\"currentHero\">Hello, {{currentHero.name}}</div>\n<div *ngIf=\"nullHero\">Hello, {{nullHero.name}}</div>\n\n<!-- NgIf binding with template (no *) -->\n\n<ng-template [ngIf]=\"currentHero\">Add {{currentHero.name}} with template</ng-template>\n\n<!-- Does not show because isActive is false! -->\n<div>Hero Detail removed from DOM (via template) because isActive is false</div>\n<ng-template [ngIf]=\"isActive\">\n  <app-hero-detail></app-hero-detail>\n</ng-template>\n\n<!-- isSpecial is true -->\n<div [class.hidden]=\"!isSpecial\">Show with class</div>\n<div [class.hidden]=\"isSpecial\">Hide with class</div>\n\n<!-- HeroDetail is in the DOM but hidden -->\n<app-hero-detail [class.hidden]=\"isSpecial\"></app-hero-detail>\n\n<div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with style</div>\n<div [style.display]=\"isSpecial ? 'none'  : 'block'\">Hide with style</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgFor binding -->\n<hr><h2 id=\"ngFor\">NgFor Binding</h2>\n\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes\">{{hero.name}}</div>\n</div>\n<br>\n\n<div class=\"box\">\n  <!-- *ngFor w/ hero-detail Component -->\n  <app-hero-detail *ngFor=\"let hero of heroes\" [hero]=\"hero\"></app-hero-detail>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-index\">*ngFor with index</h4>\n<p>with <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; let i=index\">{{i + 1}} - {{hero.name}}</div>\n</div>\n\n<p>with <i>comma</i> separator</p>\n<div class=\"box\">\n  <!-- Ex: \"1 - Hercules\" -->\n  <div *ngFor=\"let hero of heroes, let i=index\">{{i + 1}} - {{hero.name}}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-trackBy\">*ngFor trackBy</h4>\n<button (click)=\"resetHeroes()\">Reset heroes</button>\n<button (click)=\"changeIds()\">Change ids</button>\n<button (click)=\"clearTrackByCounts()\">Clear counts</button>\n\n<p><i>without</i> trackBy</p>\n<div class=\"box\">\n  <div #noTrackBy *ngFor=\"let hero of heroes\">({{hero.id}}) {{hero.name}}</div>\n\n  <div id=\"noTrackByCnt\" *ngIf=\"heroesNoTrackByCount\" >\n    Hero DOM elements change #{{heroesNoTrackByCount}} without trackBy\n  </div>\n</div>\n\n<p>with trackBy</p>\n<div class=\"box\">\n  <div #withTrackBy *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n\n  <div id=\"withTrackByCnt\" *ngIf=\"heroesWithTrackByCount\">\n    Hero DOM elements change #{{heroesWithTrackByCount}} with trackBy\n  </div>\n</div>\n\n<br><br><br>\n\n<p>with trackBy and <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{hero.id}}) {{hero.name}}\n  </div>\n</div>\n\n<p>with trackBy and <i>comma</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes, trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<p>with trackBy and <i>space</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<p>with <i>generic</i> trackById function</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes, trackBy: trackById\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgSwitch binding -->\n<hr><h2 id=\"ngSwitch\">NgSwitch Binding</h2>\n\n<p>Pick your favorite hero</p>\n<div>\n  <label *ngFor=\"let h of heroes\">\n    <input type=\"radio\" name=\"heroes\" [(ngModel)]=\"currentHero\" [value]=\"h\">{{h.name}}\n  </label>\n</div>\n\n<div [ngSwitch]=\"currentHero.emotion\">\n  <app-happy-hero    *ngSwitchCase=\"'happy'\"    [hero]=\"currentHero\"></app-happy-hero>\n  <app-sad-hero      *ngSwitchCase=\"'sad'\"      [hero]=\"currentHero\"></app-sad-hero>\n  <app-confused-hero *ngSwitchCase=\"'confused'\" [hero]=\"currentHero\"></app-confused-hero>\n  <div *ngSwitchCase=\"'confused'\">Are you as confused as {{currentHero.name}}?</div>\n  <app-unknown-hero  *ngSwitchDefault           [hero]=\"currentHero\"></app-unknown-hero>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- template reference variable -->\n<hr><h2 id=\"ref-vars\">Template reference variables</h2>\n\n<input #phone placeholder=\"phone number\">\n\n<!-- lots of other elements -->\n\n<!-- phone refers to the input element; pass its \\`value\\` to an event handler -->\n<button (click)=\"callPhone(phone.value)\">Call</button>\n\n<input ref-fax placeholder=\"fax number\">\n<button (click)=\"callFax(fax.value)\">Fax</button>\n\n<!-- btn refers to the button element; show its disabled state -->\n<button #btn disabled [innerHTML]=\"'disabled by attribute: '+btn.disabled\"></button>\n\n<h4>Example Form</h4>\n<app-hero-form [hero]=\"currentHero\"></app-hero-form>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- inputs and output -->\n<hr><h2 id=\"inputs-and-outputs\">Inputs and Outputs</h2>\n\n<img [src]=\"iconUrl\"/>\n<button (click)=\"onSave()\">Save</button>\n\n<app-hero-detail [hero]=\"currentHero\" (deleteRequest)=\"deleteHero($event)\">\n</app-hero-detail>\n\n<div (myClick)=\"clickMessage2=$event\" clickable>myClick2</div>\n{{clickMessage2}}\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Pipes -->\n<hr><h2 id=\"pipes\">Pipes</h2>\n\n<div>Title through uppercase pipe: {{title | uppercase}}</div>\n\n<!-- Pipe chaining: convert title to uppercase, then to lowercase -->\n<div>\n  Title through a pipe chain:\n  {{title | uppercase | lowercase}}\n</div>\n\n<!-- pipe with configuration argument => \"February 25, 1970\" -->\n<div>Birthdate: {{currentHero?.birthdate | date:'longDate'}}</div>\n\n<div>{{currentHero | json}}</div>\n\n<div>Birthdate: {{(currentHero?.birthdate | date:'longDate') | uppercase}}</div>\n\n<div>\n  <!-- pipe price to USD and display the $ symbol -->\n  <label>Price: </label>{{product.price | currency:'USD':true}}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Null values and the safe navigation operator -->\n<hr><h2 id=\"safe-navigation-operator\">Safe navigation operator <i>?.</i></h2>\n\n<div>\n  The title is {{title}}\n</div>\n\n<div>\n  The current hero's name is {{currentHero?.name}}\n</div>\n\n<div>\n  The current hero's name is {{currentHero.name}}\n</div>\n\n\n<!--\nThe null hero's name is {{nullHero.name}}\n\nSee console log:\n  TypeError: Cannot read property 'name' of null in [null]\n-->\n\n<!--No hero, div not displayed, no error -->\n<div *ngIf=\"nullHero\">The null hero's name is {{nullHero.name}}</div>\n\n<div>\nThe null hero's name is {{nullHero && nullHero.name}}\n</div>\n\n<div>\n  <!-- No hero, no problem! -->\n  The null hero's name is {{nullHero?.name}}\n</div>\n\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr><h2 id=\"non-null-assertion-operator\">Non-null assertion operator <i>!.</i></h2>\n\n<div>\n  <!--No hero, no text -->\n  <div *ngIf=\"hero\">\n    The hero's name is {{hero!.name}}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr><h2 id=\"any-type-cast-function\">$any type cast function <i>$any( )</i>.</h2>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>\n    The hero's marker is {{$any(hero).marker}}\n  </div>\n</div>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>\n    Undeclared members is {{$any(this).member}}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- TODO: discuss this in the Style binding section -->\n<!-- enums in bindings -->\n<hr><h2 id=\"enums\">Enums in binding</h2>\n\n<p>\n  The name of the Color.Red enum is {{Color[Color.Red]}}.<br>\n  The current color is {{Color[color]}} and its number is {{color}}.<br>\n  <button [style.color]=\"Color[color]\" (click)=\"colorToggle()\">Enum Toggle</button>\n</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->\n\n<div id=\"heroForm\">\n  <form (ngSubmit)=\"onSubmit(heroForm)\" #heroForm=\"ngForm\">\n    <div class=\"form-group\">\n      <label for=\"name\">Name\n        <input class=\"form-control\" name=\"name\" required [(ngModel)]=\"hero.name\">\n      </label>\n    </div>\n    <button type=\"submit\" [disabled]=\"!heroForm.form.valid\">Submit</button>\n  </form>\n  <div [hidden]=\"!heroForm.form.valid\">\n    {{submitMessage}}\n  </div>\n</div>\n\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<!-- copied from: https://stackblitz.com/angular/ymdjlgmlavo -->\n\n<a\n  id=\"toc\"\n></a>\n<h1>\n  Template\n  Syntax\n</h1>\n<a\n  href=\"#interpolation\"\n  >Interpolation</a\n><br />\n<a\n  href=\"#expression-context\"\n  >Expression\n  context</a\n><br />\n<a\n  href=\"#statement-context\"\n  >Statement\n  context</a\n><br />\n<a\n  href=\"#mental-model\"\n  >Mental\n  Model</a\n><br />\n<a\n  href=\"#buttons\"\n  >Buttons</a\n><br />\n<a\n  href=\"#prop-vs-attrib\"\n  >Properties\n  vs.\n  Attributes</a\n><br />\n<br />\n<a\n  href=\"#property-binding\"\n  >Property\n  Binding</a\n><br />\n<div\n  style=\"\n    margin-left: 8px;\n  \"\n>\n  <a\n    href=\"#attribute-binding\"\n    >Attribute\n    Binding</a\n  ><br />\n  <a\n    href=\"#class-binding\"\n    >Class\n    Binding</a\n  ><br />\n  <a\n    href=\"#style-binding\"\n    >Style\n    Binding</a\n  ><br />\n</div>\n<br />\n<a\n  href=\"#event-binding\"\n  >Event\n  Binding</a\n><br />\n<a\n  href=\"#two-way\"\n  >Two-way\n  Binding</a\n><br />\n<br />\n<div>\n  Directives\n</div>\n<div\n  style=\"\n    margin-left: 8px;\n  \"\n>\n  <a\n    href=\"#ngModel\"\n    >NgModel\n    (two-way)\n    Binding</a\n  ><br />\n  <a\n    href=\"#ngClass\"\n    >NgClass\n    Binding</a\n  ><br />\n  <a\n    href=\"#ngStyle\"\n    >NgStyle\n    Binding</a\n  ><br />\n  <a\n    href=\"#ngIf\"\n    >NgIf</a\n  ><br />\n  <a\n    href=\"#ngFor\"\n    >NgFor</a\n  ><br />\n  <div\n    style=\"\n      margin-left: 8px;\n    \"\n  >\n    <a\n      href=\"#ngFor-index\"\n      >NgFor\n      with\n      index</a\n    ><br />\n    <a\n      href=\"#ngFor-trackBy\"\n      >NgFor\n      with\n      trackBy</a\n    ><br />\n  </div>\n  <a\n    href=\"#ngSwitch\"\n    >NgSwitch</a\n  ><br />\n</div>\n<br />\n<a\n  href=\"#ref-vars\"\n  >Template\n  reference\n  variables</a\n><br />\n<a\n  href=\"#inputs-and-outputs\"\n  >Inputs\n  and\n  outputs</a\n><br />\n<a\n  href=\"#pipes\"\n  >Pipes</a\n><br />\n<a\n  href=\"#safe-navigation-operator\"\n  >Safe\n  navigation\n  operator\n  <i\n    >?.</i\n  ></a\n><br />\n<a\n  href=\"#non-null-assertion-operator\"\n  >Non-null\n  assertion\n  operator\n  <i\n    >!.</i\n  ></a\n><br />\n<a\n  href=\"#enums\"\n  >Enums</a\n><br />\n\n<!-- Interpolation and expressions -->\n<hr />\n<h2\n  id=\"interpolation\"\n>\n  Interpolation\n</h2>\n\n<p>\n  My\n  current\n  hero\n  is\n  {{\n    currentHero.name\n  }}\n</p>\n\n<h3>\n  {{\n    title\n  }}\n  <img\n    src=\"{{\n      heroImageUrl\n    }}\"\n    style=\"\n      height: 30px;\n    \"\n  />\n</h3>\n\n<!-- \"The sum of 1 + 1 is 2\" -->\n<p>\n  The\n  sum\n  of\n  1\n  +\n  1\n  is\n  {{\n    1 +\n      1\n  }}\n</p>\n\n<!-- \"The sum of 1 + 1 is not 4\" -->\n<p>\n  The\n  sum\n  of\n  1\n  +\n  1\n  is\n  not\n  {{\n    1 +\n      1 +\n      getVal()\n  }}\n</p>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<hr />\n<h2\n  id=\"expression-context\"\n>\n  Expression\n  context\n</h2>\n\n<p>\n  Component\n  expression\n  context\n  (&#123;&#123;title&#125;&#125;,\n  [hidden]=\"isUnchanged\")\n</p>\n<div\n  class=\"context\"\n>\n  {{\n    title\n  }}\n  <span\n    [hidden]=\"\n      isUnchanged\n    \"\n    >changed</span\n  >\n</div>\n\n<p>\n  Template\n  input\n  variable\n  expression\n  context\n  (let\n  hero)\n</p>\n<!-- template hides the following; plenty of examples later -->\n<ng-template>\n  <div\n    *ngFor=\"\n      let hero of heroes\n    \"\n  >\n    {{\n      hero.name\n    }}\n  </div>\n</ng-template>\n\n<p>\n  Template\n  reference\n  variable\n  expression\n  context\n  (#heroInput)\n</p>\n<div\n  (keyup)=\"\n    (0)\n  \"\n  class=\"context\"\n>\n  Type\n  something:\n  <input\n    #heroInput\n  />\n  {{\n    heroInput.value\n  }}\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<hr />\n<h2\n  id=\"statement-context\"\n>\n  Statement\n  context\n</h2>\n\n<p>\n  Component\n  statement\n  context\n  (\n  (click)=\"onSave()\n  )\n</p>\n<div\n  class=\"context\"\n>\n  <button\n    (click)=\"\n      deleteHero()\n    \"\n  >\n    Delete\n    hero\n  </button>\n</div>\n\n<p>\n  Template\n  $event\n  statement\n  context\n</p>\n<div\n  class=\"context\"\n>\n  <button\n    (click)=\"\n      onSave(\n        $event\n      )\n    \"\n  >\n    Save\n  </button>\n</div>\n\n<p>\n  Template\n  input\n  variable\n  statement\n  context\n  (let\n  hero)\n</p>\n<!-- template hides the following; plenty of examples later -->\n<div\n  class=\"context\"\n>\n  <button\n    *ngFor=\"\n      let hero of heroes\n    \"\n    (click)=\"\n      deleteHero(\n        hero\n      )\n    \"\n  >\n    {{\n      hero.name\n    }}\n  </button>\n</div>\n\n<p>\n  Template\n  reference\n  variable\n  statement\n  context\n  (#heroForm)\n</p>\n<div\n  class=\"context\"\n>\n  <form\n    #heroForm\n    (ngSubmit)=\"\n      onSubmit(\n        heroForm\n      )\n    \"\n  >\n    ...\n  </form>\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- New Mental Model -->\n<hr />\n<h2\n  id=\"mental-model\"\n>\n  New\n  Mental\n  Model\n</h2>\n\n<!--<img src=\"http://www.wpclipart.com/cartoon/people/hero/hero_silhoutte_T.png\">-->\n<!-- Public Domain terms of use: http://www.wpclipart.com/terms.html -->\n<div\n  class=\"special\"\n>\n  Mental\n  Model\n</div>\n<img\n  src=\"assets/images/hero.png\"\n/>\n<button\n  disabled\n>\n  Save\n</button>\n<br /><br />\n\n<div>\n  <!-- Normal HTML -->\n  <div\n    class=\"special\"\n  >\n    Mental\n    Model\n  </div>\n  <!-- Wow! A new element! -->\n  <app-hero-detail></app-hero-detail>\n</div>\n<br /><br />\n\n<div>\n  <!-- Bind button disabled state to \\`isUnchanged\\` property -->\n  <button\n    [disabled]=\"\n      isUnchanged\n    \"\n  >\n    Save\n  </button>\n</div>\n<br /><br />\n\n<div>\n  <img\n    [src]=\"\n      heroImageUrl\n    \"\n  />\n  <app-hero-detail\n    [hero]=\"\n      currentHero\n    \"\n  ></app-hero-detail>\n  <div\n    [ngClass]=\"{\n      special:\n        isSpecial\n    }\"\n  ></div>\n</div>\n<br /><br />\n\n<button\n  (click)=\"\n    onSave()\n  \"\n>\n  Save\n</button>\n<app-hero-detail\n  (deleteRequest)=\"\n    deleteHero()\n  \"\n></app-hero-detail>\n<div\n  (myClick)=\"\n    clicked =\n      $event\n  \"\n  clickable\n>\n  click\n  me\n</div>\n{{\n  clicked\n}}\n<br /><br />\n\n<div>\n  Hero\n  Name:\n  <input\n    [(ngModel)]=\"\n      name\n    \"\n  />\n  {{\n    name\n  }}\n</div>\n<br /><br />\n\n<button\n  [attr.aria-label]=\"\n    help\n  \"\n>\n  help\n</button>\n<br /><br />\n\n<div\n  [class.special]=\"\n    isSpecial\n  \"\n>\n  Special\n</div>\n<br /><br />\n\n<button\n  [style.color]=\"\n    isSpecial\n      ? 'red'\n      : 'green'\n  \"\n>\n  button\n</button>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- property vs. attribute -->\n<hr />\n<h2\n  id=\"prop-vs-attrib\"\n>\n  Property\n  vs.\n  Attribute\n  (img\n  examples)\n</h2>\n<!-- examine the following <img> tag in the browser tools -->\n<img\n  src=\"images/ng-logo.png\"\n  [src]=\"\n    heroImageUrl\n  \"\n/>\n\n<br /><br />\n\n<img\n  [src]=\"\n    iconUrl\n  \"\n/>\n<img\n  bind-src=\"\n    heroImageUrl\n  \"\n/>\n<img\n  [attr.src]=\"\n    villainImageUrl\n  \"\n/>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- buttons -->\n<hr />\n<h2\n  id=\"buttons\"\n>\n  Buttons\n</h2>\n\n<button>\n  Enabled\n  (but\n  does\n  nothing)\n</button>\n<button\n  disabled\n>\n  Disabled\n</button>\n<button\n  disabled=\"false\"\n>\n  Still\n  disabled\n</button>\n<br /><br />\n<button\n  disabled\n>\n  disabled\n  by\n  attribute\n</button>\n<button\n  [disabled]=\"\n    isUnchanged\n  \"\n>\n  disabled\n  by\n  property\n  binding\n</button>\n<br /><br />\n<button\n  bind-disabled=\"\n    isUnchanged\n  \"\n  on-click=\"\n    onSave(\n      $event\n    )\n  \"\n>\n  Disabled\n  Cancel\n</button>\n<button\n  [disabled]=\"\n    !canSave\n  \"\n  (click)=\"\n    onSave(\n      $event\n    )\n  \"\n>\n  Enabled\n  Save\n</button>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- property binding -->\n<hr />\n<h2\n  id=\"property-binding\"\n>\n  Property\n  Binding\n</h2>\n\n<img\n  [src]=\"\n    heroImageUrl\n  \"\n/>\n<button\n  [disabled]=\"\n    isUnchanged\n  \"\n>\n  Cancel\n  is\n  disabled\n</button>\n<div\n  [ngClass]=\"\n    classes\n  \"\n>\n  [ngClass]\n  binding\n  to\n  the\n  classes\n  property\n</div>\n<app-hero-detail\n  [hero]=\"\n    currentHero\n  \"\n></app-hero-detail>\n<img\n  bind-src=\"\n    heroImageUrl\n  \"\n/>\n\n<!-- ERROR: HeroDetailComponent.hero expects a\n     Hero object, not the string \"currentHero\" -->\n<div\n  *ngIf=\"\n    false\n  \"\n>\n  <app-hero-detail\n    hero=\"currentHero\"\n  ></app-hero-detail>\n</div>\n<app-hero-detail\n  prefix=\"You are my\"\n  [hero]=\"\n    currentHero\n  \"\n></app-hero-detail>\n\n<p>\n  <img\n    src=\"{{\n      heroImageUrl\n    }}\"\n  />\n  is\n  the\n  <i\n    >interpolated</i\n  >\n  image.\n</p>\n<p>\n  <img\n    [src]=\"\n      heroImageUrl\n    \"\n  />\n  is\n  the\n  <i\n    >property\n    bound</i\n  >\n  image.\n</p>\n\n<p>\n  <span\n    >\"{{\n      title\n    }}\"\n    is\n    the\n    <i\n      >interpolated</i\n    >\n    title.</span\n  >\n</p>\n<p>\n  \"<span\n    [innerHTML]=\"\n      title\n    \"\n  ></span\n  >\"\n  is\n  the\n  <i\n    >property\n    bound</i\n  >\n  title.\n</p>\n\n<!--\n  Angular generates warnings for these two lines as it sanitizes them\n  WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).\n -->\n<p>\n  <span\n    >\"{{\n      evilTitle\n    }}\"\n    is\n    the\n    <i\n      >interpolated</i\n    >\n    evil\n    title.</span\n  >\n</p>\n<p>\n  \"<span\n    [innerHTML]=\"\n      evilTitle\n    \"\n  ></span\n  >\"\n  is\n  the\n  <i\n    >property\n    bound</i\n  >\n  evil\n  title.\n</p>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- attribute binding -->\n<hr />\n<h2\n  id=\"attribute-binding\"\n>\n  Attribute\n  Binding\n</h2>\n\n<!--  create and set a colspan attribute -->\n<table\n  border=\"1\"\n>\n  <!--  expression calculates colspan=2 -->\n  <tr>\n    <td\n      [attr.colspan]=\"\n        1 +\n        1\n      \"\n    >\n      One-Two\n    </td>\n  </tr>\n\n  <!-- ERROR: There is no \\`colspan\\` property to set!\n    <tr><td colspan=\"{{1 + 1}}\">Three-Four</td></tr>\n  -->\n\n  <tr>\n    <td>\n      Five\n    </td>\n    <td>\n      Six\n    </td>\n  </tr>\n</table>\n\n<br />\n<!-- create and set an aria attribute for assistive technology -->\n<button\n  [attr.aria-label]=\"\n    actionName\n  \"\n>\n  {{\n    actionName\n  }}\n  with\n  Aria\n</button>\n<br /><br />\n\n<!-- The following effects are not discussed in the chapter -->\n<div>\n  <!-- any use of [attr.disabled] creates the disabled attribute -->\n  <button\n    [attr.disabled]=\"\n      isUnchanged\n    \"\n  >\n    Disabled\n  </button>\n\n  <button\n    [attr.disabled]=\"\n      !isUnchanged\n    \"\n  >\n    Disabled\n    as\n    well\n  </button>\n\n  <!-- we'd have to remove it with property binding -->\n  <button\n    disabled\n    [disabled]=\"\n      false\n    \"\n  >\n    Enabled\n    (but\n    inert)\n  </button>\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- class binding -->\n<hr />\n<h2\n  id=\"class-binding\"\n>\n  Class\n  Binding\n</h2>\n\n<!-- standard class attribute setting  -->\n<div\n  class=\"bad curly special\"\n>\n  Bad\n  curly\n  special\n</div>\n\n<!-- reset/override all class names with a binding  -->\n<div\n  class=\"bad curly special\"\n  [class]=\"\n    badCurly\n  \"\n>\n  Bad\n  curly\n</div>\n\n<!-- toggle the \"special\" class on/off with a property -->\n<div\n  [class.special]=\"\n    isSpecial\n  \"\n>\n  The\n  class\n  binding\n  is\n  special\n</div>\n\n<!-- binding to \\`class.special\\` trumps the class attribute -->\n<div\n  class=\"special\"\n  [class.special]=\"\n    !isSpecial\n  \"\n>\n  This\n  one\n  is\n  not\n  so\n  special\n</div>\n\n<div\n  bind-class.special=\"\n    isSpecial\n  \"\n>\n  This\n  class\n  binding\n  is\n  special\n  too\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!--style binding -->\n<hr />\n<h2\n  id=\"style-binding\"\n>\n  Style\n  Binding\n</h2>\n\n<button\n  [style.color]=\"\n    isSpecial\n      ? 'red'\n      : 'green'\n  \"\n>\n  Red\n</button>\n<button\n  [style.background-color]=\"\n    canSave\n      ? 'cyan'\n      : 'grey'\n  \"\n>\n  Save\n</button>\n\n<button\n  [style.font-size.em]=\"\n    isSpecial\n      ? 3\n      : 1\n  \"\n>\n  Big\n</button>\n<button\n  [style.font-size.%]=\"\n    !isSpecial\n      ? 150\n      : 50\n  \"\n>\n  Small\n</button>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- event binding -->\n<hr />\n<h2\n  id=\"event-binding\"\n>\n  Event\n  Binding\n</h2>\n\n<button\n  (click)=\"\n    onSave()\n  \"\n>\n  Save\n</button>\n\n<button\n  on-click=\"\n    onSave()\n  \"\n>\n  On\n  Save\n</button>\n\n<div>\n  <!-- \\`myClick\\` is an event on the custom \\`ClickDirective\\` -->\n  <div\n    (myClick)=\"\n      clickMessage =\n        $event\n    \"\n    clickable\n  >\n    click\n    with\n    myClick\n  </div>\n  {{\n    clickMessage\n  }}\n</div>\n\n<!-- binding to a nested component -->\n<app-hero-detail\n  (deleteRequest)=\"\n    deleteHero(\n      $event\n    )\n  \"\n  [hero]=\"\n    currentHero\n  \"\n></app-hero-detail>\n<br />\n\n<app-big-hero-detail\n  (deleteRequest)=\"\n    deleteHero(\n      $event\n    )\n  \"\n  [hero]=\"\n    currentHero\n  \"\n>\n</app-big-hero-detail>\n\n<div\n  class=\"parent-div\"\n  (click)=\"\n    onClickMe(\n      $event\n    )\n  \"\n  clickable\n>\n  Click\n  me\n  <div\n    class=\"child-div\"\n  >\n    Click\n    me\n    too!\n  </div>\n</div>\n\n<!-- Will save only once -->\n<div\n  (click)=\"\n    onSave()\n  \"\n  clickable\n>\n  <button\n    (click)=\"\n      onSave(\n        $event\n      )\n    \"\n  >\n    Save,\n    no\n    propagation\n  </button>\n</div>\n\n<!-- Will save twice -->\n<div\n  (click)=\"\n    onSave()\n  \"\n  clickable\n>\n  <button\n    (click)=\"\n      onSave()\n    \"\n  >\n    Save\n    w/\n    propagation\n  </button>\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<hr />\n<h2\n  id=\"two-way\"\n>\n  Two-way\n  Binding\n</h2>\n<div\n  id=\"two-way-1\"\n>\n  <app-sizer\n    [(size)]=\"\n      fontSizePx\n    \"\n  ></app-sizer>\n  <div\n    [style.font-size.px]=\"\n      fontSizePx\n    \"\n  >\n    Resizable\n    Text\n  </div>\n  <label\n    >FontSize\n    (px):\n    <input\n      [(ngModel)]=\"\n        fontSizePx\n      \"\n  /></label>\n</div>\n<br />\n<div\n  id=\"two-way-2\"\n>\n  <h3>\n    De-sugared\n    two-way\n    binding\n  </h3>\n  <app-sizer\n    [size]=\"\n      fontSizePx\n    \"\n    (sizeChange)=\"\n      fontSizePx =\n        $event\n    \"\n  ></app-sizer>\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- Two way data binding unwound;\n    passing the changed display value to the event handler via \\`$event\\` -->\n<hr />\n<h2\n  id=\"ngModel\"\n>\n  NgModel\n  (two-way)\n  Binding\n</h2>\n\n<h3>\n  Result:\n  {{\n    currentHero.name\n  }}\n</h3>\n\n<input\n  [value]=\"\n    currentHero.name\n  \"\n  (input)=\"\n    currentHero.name =\n      $event.target.value\n  \"\n/>\nwithout\nNgModel\n<br />\n<input\n  [(ngModel)]=\"\n    currentHero.name\n  \"\n/>\n[(ngModel)]\n<br />\n<input\n  bindon-ngModel=\"\n    currentHero.name\n  \"\n/>\nbindon-ngModel\n<br />\n<input\n  [ngModel]=\"\n    currentHero.name\n  \"\n  (ngModelChange)=\"\n    currentHero.name =\n      $event\n  \"\n/>\n(ngModelChange)=\"...name=$event\"\n<br />\n<input\n  [ngModel]=\"\n    currentHero.name\n  \"\n  (ngModelChange)=\"\n    setUppercaseName(\n      $event\n    )\n  \"\n/>\n(ngModelChange)=\"setUppercaseName($event)\"\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- NgClass binding -->\n<hr />\n<h2\n  id=\"ngClass\"\n>\n  NgClass\n  Binding\n</h2>\n\n<p>\n  currentClasses\n  is\n  {{\n    currentClasses\n      | json\n  }}\n</p>\n<div\n  [ngClass]=\"\n    currentClasses\n  \"\n>\n  This\n  div\n  is\n  initially\n  saveable,\n  unchanged,\n  and\n  special\n</div>\n\n<!-- not used in chapter -->\n<br />\n<label\n  >saveable\n  <input\n    type=\"checkbox\"\n    [(ngModel)]=\"\n      canSave\n    \"\n/></label>\n|\n<label\n  >modified:\n  <input\n    type=\"checkbox\"\n    [value]=\"\n      !isUnchanged\n    \"\n    (change)=\"\n      isUnchanged =\n        !isUnchanged\n    \"\n/></label>\n|\n<label\n  >special:\n  <input\n    type=\"checkbox\"\n    [(ngModel)]=\"\n      isSpecial\n    \"\n/></label>\n<button\n  (click)=\"\n    setCurrentClasses()\n  \"\n>\n  Refresh\n  currentClasses\n</button>\n<br /><br />\n<div\n  [ngClass]=\"\n    currentClasses\n  \"\n>\n  This\n  div\n  should\n  be\n  {{\n    canSave\n      ? \"\"\n      : \"not\"\n  }}\n  saveable,\n  {{\n    isUnchanged\n      ? \"unchanged\"\n      : \"modified\"\n  }}\n  and,\n  {{\n    isSpecial\n      ? \"\"\n      : \"not\"\n  }}\n  special\n  after\n  clicking\n  \"Refresh\".\n</div>\n<br /><br />\n\n<div\n  [ngClass]=\"\n    isSpecial\n      ? 'special'\n      : ''\n  \"\n>\n  This\n  div\n  is\n  special\n</div>\n\n<div\n  class=\"bad curly special\"\n>\n  Bad\n  curly\n  special\n</div>\n<div\n  [ngClass]=\"{\n    bad: false,\n    curly: true,\n    special: true\n  }\"\n>\n  Curly\n  special\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- NgStyle binding -->\n<hr />\n<h2\n  id=\"ngStyle\"\n>\n  NgStyle\n  Binding\n</h2>\n\n<div\n  [style.font-size]=\"\n    isSpecial\n      ? 'x-large'\n      : 'smaller'\n  \"\n>\n  This\n  div\n  is\n  x-large\n  or\n  smaller.\n</div>\n\n<h3>\n  [ngStyle]\n  binding\n  to\n  currentStyles\n  -\n  CSS\n  property\n  names\n</h3>\n<p>\n  currentStyles\n  is\n  {{\n    currentStyles\n      | json\n  }}\n</p>\n<div\n  [ngStyle]=\"\n    currentStyles\n  \"\n>\n  This\n  div\n  is\n  initially\n  italic,\n  normal\n  weight,\n  and\n  extra\n  large\n  (24px).\n</div>\n\n<!-- not used in chapter -->\n<br />\n<label\n  >italic:\n  <input\n    type=\"checkbox\"\n    [(ngModel)]=\"\n      canSave\n    \"\n/></label>\n|\n<label\n  >normal:\n  <input\n    type=\"checkbox\"\n    [(ngModel)]=\"\n      isUnchanged\n    \"\n/></label>\n|\n<label\n  >xlarge:\n  <input\n    type=\"checkbox\"\n    [(ngModel)]=\"\n      isSpecial\n    \"\n/></label>\n<button\n  (click)=\"\n    setCurrentStyles()\n  \"\n>\n  Refresh\n  currentStyles\n</button>\n<br /><br />\n<div\n  [ngStyle]=\"\n    currentStyles\n  \"\n>\n  This\n  div\n  should\n  be\n  {{\n    canSave\n      ? \"italic\"\n      : \"plain\"\n  }},\n  {{\n    isUnchanged\n      ? \"normal weight\"\n      : \"bold\"\n  }}\n  and,\n  {{\n    isSpecial\n      ? \"extra large\"\n      : \"normal size\"\n  }}\n  after\n  clicking\n  \"Refresh\".\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- NgIf binding -->\n<hr />\n<h2\n  id=\"ngIf\"\n>\n  NgIf\n  Binding\n</h2>\n\n<app-hero-detail\n  *ngIf=\"\n    isActive\n  \"\n></app-hero-detail>\n\n<div\n  *ngIf=\"\n    currentHero\n  \"\n>\n  Hello,\n  {{\n    currentHero.name\n  }}\n</div>\n<div\n  *ngIf=\"\n    nullHero\n  \"\n>\n  Hello,\n  {{\n    nullHero.name\n  }}\n</div>\n\n<!-- NgIf binding with template (no *) -->\n\n<ng-template\n  [ngIf]=\"\n    currentHero\n  \"\n  >Add\n  {{\n    currentHero.name\n  }}\n  with\n  template</ng-template\n>\n\n<!-- Does not show because isActive is false! -->\n<div>\n  Hero\n  Detail\n  removed\n  from\n  DOM\n  (via\n  template)\n  because\n  isActive\n  is\n  false\n</div>\n<ng-template\n  [ngIf]=\"\n    isActive\n  \"\n>\n  <app-hero-detail></app-hero-detail>\n</ng-template>\n\n<!-- isSpecial is true -->\n<div\n  [class.hidden]=\"\n    !isSpecial\n  \"\n>\n  Show\n  with\n  class\n</div>\n<div\n  [class.hidden]=\"\n    isSpecial\n  \"\n>\n  Hide\n  with\n  class\n</div>\n\n<!-- HeroDetail is in the DOM but hidden -->\n<app-hero-detail\n  [class.hidden]=\"\n    isSpecial\n  \"\n></app-hero-detail>\n\n<div\n  [style.display]=\"\n    isSpecial\n      ? 'block'\n      : 'none'\n  \"\n>\n  Show\n  with\n  style\n</div>\n<div\n  [style.display]=\"\n    isSpecial\n      ? 'none'\n      : 'block'\n  \"\n>\n  Hide\n  with\n  style\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- NgFor binding -->\n<hr />\n<h2\n  id=\"ngFor\"\n>\n  NgFor\n  Binding\n</h2>\n\n<div\n  class=\"box\"\n>\n  <div\n    *ngFor=\"\n      let hero of heroes\n    \"\n  >\n    {{\n      hero.name\n    }}\n  </div>\n</div>\n<br />\n\n<div\n  class=\"box\"\n>\n  <!-- *ngFor w/ hero-detail Component -->\n  <app-hero-detail\n    *ngFor=\"\n      let hero of heroes\n    \"\n    [hero]=\"\n      hero\n    \"\n  ></app-hero-detail>\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<h4\n  id=\"ngFor-index\"\n>\n  *ngFor\n  with\n  index\n</h4>\n<p>\n  with\n  <i\n    >semi-colon</i\n  >\n  separator\n</p>\n<div\n  class=\"box\"\n>\n  <div\n    *ngFor=\"\n      let hero of heroes;\n      let i = index\n    \"\n  >\n    {{\n      i +\n        1\n    }}\n    -\n    {{\n      hero.name\n    }}\n  </div>\n</div>\n\n<p>\n  with\n  <i\n    >comma</i\n  >\n  separator\n</p>\n<div\n  class=\"box\"\n>\n  <!-- Ex: \"1 - Hercules\" -->\n  <div\n    *ngFor=\"\n      let hero of heroes;\n      let i = index\n    \"\n  >\n    {{\n      i +\n        1\n    }}\n    -\n    {{\n      hero.name\n    }}\n  </div>\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<h4\n  id=\"ngFor-trackBy\"\n>\n  *ngFor\n  trackBy\n</h4>\n<button\n  (click)=\"\n    resetHeroes()\n  \"\n>\n  Reset\n  heroes\n</button>\n<button\n  (click)=\"\n    changeIds()\n  \"\n>\n  Change\n  ids\n</button>\n<button\n  (click)=\"\n    clearTrackByCounts()\n  \"\n>\n  Clear\n  counts\n</button>\n\n<p>\n  <i\n    >without</i\n  >\n  trackBy\n</p>\n<div\n  class=\"box\"\n>\n  <div\n    #noTrackBy\n    *ngFor=\"\n      let hero of heroes\n    \"\n  >\n    ({{\n      hero.id\n    }})\n    {{\n      hero.name\n    }}\n  </div>\n\n  <div\n    id=\"noTrackByCnt\"\n    *ngIf=\"\n      heroesNoTrackByCount\n    \"\n  >\n    Hero\n    DOM\n    elements\n    change\n    #{{\n      heroesNoTrackByCount\n    }}\n    without\n    trackBy\n  </div>\n</div>\n\n<p>\n  with\n  trackBy\n</p>\n<div\n  class=\"box\"\n>\n  <div\n    #withTrackBy\n    *ngFor=\"\n      let hero of heroes;\n      trackBy: trackByHeroes\n    \"\n  >\n    ({{\n      hero.id\n    }})\n    {{\n      hero.name\n    }}\n  </div>\n\n  <div\n    id=\"withTrackByCnt\"\n    *ngIf=\"\n      heroesWithTrackByCount\n    \"\n  >\n    Hero\n    DOM\n    elements\n    change\n    #{{\n      heroesWithTrackByCount\n    }}\n    with\n    trackBy\n  </div>\n</div>\n\n<br /><br /><br />\n\n<p>\n  with\n  trackBy\n  and\n  <i\n    >semi-colon</i\n  >\n  separator\n</p>\n<div\n  class=\"box\"\n>\n  <div\n    *ngFor=\"\n      let hero of heroes;\n      trackBy: trackByHeroes\n    \"\n  >\n    ({{\n      hero.id\n    }})\n    {{\n      hero.name\n    }}\n  </div>\n</div>\n\n<p>\n  with\n  trackBy\n  and\n  <i\n    >comma</i\n  >\n  separator\n</p>\n<div\n  class=\"box\"\n>\n  <div\n    *ngFor=\"\n      let hero of heroes;\n      trackBy: trackByHeroes\n    \"\n  >\n    ({{\n      hero.id\n    }})\n    {{\n      hero.name\n    }}\n  </div>\n</div>\n\n<p>\n  with\n  trackBy\n  and\n  <i\n    >space</i\n  >\n  separator\n</p>\n<div\n  class=\"box\"\n>\n  <div\n    *ngFor=\"\n      let hero of heroes;\n      trackBy: trackByHeroes\n    \"\n  >\n    ({{\n      hero.id\n    }})\n    {{\n      hero.name\n    }}\n  </div>\n</div>\n\n<p>\n  with\n  <i\n    >generic</i\n  >\n  trackById\n  function\n</p>\n<div\n  class=\"box\"\n>\n  <div\n    *ngFor=\"\n      let hero of heroes;\n      trackBy: trackById\n    \"\n  >\n    ({{\n      hero.id\n    }})\n    {{\n      hero.name\n    }}\n  </div>\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- NgSwitch binding -->\n<hr />\n<h2\n  id=\"ngSwitch\"\n>\n  NgSwitch\n  Binding\n</h2>\n\n<p>\n  Pick\n  your\n  favorite\n  hero\n</p>\n<div>\n  <label\n    *ngFor=\"\n      let h of heroes\n    \"\n  >\n    <input\n      type=\"radio\"\n      name=\"heroes\"\n      [(ngModel)]=\"\n        currentHero\n      \"\n      [value]=\"\n        h\n      \"\n    />{{\n      h.name\n    }}\n  </label>\n</div>\n\n<div\n  [ngSwitch]=\"\n    currentHero.emotion\n  \"\n>\n  <app-happy-hero\n    *ngSwitchCase=\"\n      'happy'\n    \"\n    [hero]=\"\n      currentHero\n    \"\n  ></app-happy-hero>\n  <app-sad-hero\n    *ngSwitchCase=\"\n      'sad'\n    \"\n    [hero]=\"\n      currentHero\n    \"\n  ></app-sad-hero>\n  <app-confused-hero\n    *ngSwitchCase=\"\n      'confused'\n    \"\n    [hero]=\"\n      currentHero\n    \"\n  ></app-confused-hero>\n  <div\n    *ngSwitchCase=\"\n      'confused'\n    \"\n  >\n    Are\n    you\n    as\n    confused\n    as\n    {{\n      currentHero.name\n    }}?\n  </div>\n  <app-unknown-hero\n    *ngSwitchDefault\n    [hero]=\"\n      currentHero\n    \"\n  ></app-unknown-hero>\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- template reference variable -->\n<hr />\n<h2\n  id=\"ref-vars\"\n>\n  Template\n  reference\n  variables\n</h2>\n\n<input\n  #phone\n  placeholder=\"phone number\"\n/>\n\n<!-- lots of other elements -->\n\n<!-- phone refers to the input element; pass its \\`value\\` to an event handler -->\n<button\n  (click)=\"\n    callPhone(\n      phone.value\n    )\n  \"\n>\n  Call\n</button>\n\n<input\n  ref-fax\n  placeholder=\"fax number\"\n/>\n<button\n  (click)=\"\n    callFax(\n      fax.value\n    )\n  \"\n>\n  Fax\n</button>\n\n<!-- btn refers to the button element; show its disabled state -->\n<button\n  #btn\n  disabled\n  [innerHTML]=\"\n    'disabled by attribute: ' +\n    btn.disabled\n  \"\n></button>\n\n<h4>\n  Example\n  Form\n</h4>\n<app-hero-form\n  [hero]=\"\n    currentHero\n  \"\n></app-hero-form>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- inputs and output -->\n<hr />\n<h2\n  id=\"inputs-and-outputs\"\n>\n  Inputs\n  and\n  Outputs\n</h2>\n\n<img\n  [src]=\"\n    iconUrl\n  \"\n/>\n<button\n  (click)=\"\n    onSave()\n  \"\n>\n  Save\n</button>\n\n<app-hero-detail\n  [hero]=\"\n    currentHero\n  \"\n  (deleteRequest)=\"\n    deleteHero(\n      $event\n    )\n  \"\n>\n</app-hero-detail>\n\n<div\n  (myClick)=\"\n    clickMessage2 =\n      $event\n  \"\n  clickable\n>\n  myClick2\n</div>\n{{\n  clickMessage2\n}}\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- Pipes -->\n<hr />\n<h2\n  id=\"pipes\"\n>\n  Pipes\n</h2>\n\n<div>\n  Title\n  through\n  uppercase\n  pipe:\n  {{\n    title\n      | uppercase\n  }}\n</div>\n\n<!-- Pipe chaining: convert title to uppercase, then to lowercase -->\n<div>\n  Title\n  through\n  a\n  pipe\n  chain:\n  {{\n    title\n      | uppercase\n      | lowercase\n  }}\n</div>\n\n<!-- pipe with configuration argument => \"February 25, 1970\" -->\n<div>\n  Birthdate:\n  {{\n    currentHero?.birthdate\n      | date\n        : \"longDate\"\n  }}\n</div>\n\n<div>\n  {{\n    currentHero\n      | json\n  }}\n</div>\n\n<div>\n  Birthdate:\n  {{\n    currentHero?.birthdate\n      | date\n        : \"longDate\"\n      | uppercase\n  }}\n</div>\n\n<div>\n  <!-- pipe price to USD and display the $ symbol -->\n  <label\n    >Price: </label\n  >{{\n    product.price\n      | currency\n        : \"USD\"\n        : true\n  }}\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- Null values and the safe navigation operator -->\n<hr />\n<h2\n  id=\"safe-navigation-operator\"\n>\n  Safe\n  navigation\n  operator\n  <i\n    >?.</i\n  >\n</h2>\n\n<div>\n  The\n  title\n  is\n  {{\n    title\n  }}\n</div>\n\n<div>\n  The\n  current\n  hero's\n  name\n  is\n  {{\n    currentHero?.name\n  }}\n</div>\n\n<div>\n  The\n  current\n  hero's\n  name\n  is\n  {{\n    currentHero.name\n  }}\n</div>\n\n<!--\nThe null hero's name is {{nullHero.name}}\n\nSee console log:\n  TypeError: Cannot read property 'name' of null in [null]\n-->\n\n<!--No hero, div not displayed, no error -->\n<div\n  *ngIf=\"\n    nullHero\n  \"\n>\n  The\n  null\n  hero's\n  name\n  is\n  {{\n    nullHero.name\n  }}\n</div>\n\n<div>\n  The\n  null\n  hero's\n  name\n  is\n  {{\n    nullHero &&\n      nullHero.name\n  }}\n</div>\n\n<div>\n  <!-- No hero, no problem! -->\n  The\n  null\n  hero's\n  name\n  is\n  {{\n    nullHero?.name\n  }}\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- non-null assertion operator -->\n<hr />\n<h2\n  id=\"non-null-assertion-operator\"\n>\n  Non-null\n  assertion\n  operator\n  <i\n    >!.</i\n  >\n</h2>\n\n<div>\n  <!--No hero, no text -->\n  <div\n    *ngIf=\"\n      hero\n    \"\n  >\n    The\n    hero's\n    name\n    is\n    {{\n      hero!\n        .name\n    }}\n  </div>\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- non-null assertion operator -->\n<hr />\n<h2\n  id=\"any-type-cast-function\"\n>\n  $any\n  type\n  cast\n  function\n  <i\n    >$any(\n    )</i\n  >.\n</h2>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>\n    The\n    hero's\n    marker\n    is\n    {{\n      $any(\n        hero\n      )\n        .marker\n    }}\n  </div>\n</div>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>\n    Undeclared\n    members\n    is\n    {{\n      $any(\n        this\n      )\n        .member\n    }}\n  </div>\n</div>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- TODO: discuss this in the Style binding section -->\n<!-- enums in bindings -->\n<hr />\n<h2\n  id=\"enums\"\n>\n  Enums\n  in\n  binding\n</h2>\n\n<p>\n  The\n  name\n  of\n  the\n  Color.Red\n  enum\n  is\n  {{\n    Color[\n      Color\n        .Red\n    ]\n  }}.<br />\n  The\n  current\n  color\n  is\n  {{\n    Color[\n      color\n    ]\n  }}\n  and\n  its\n  number\n  is\n  {{\n    color\n  }}.<br />\n  <button\n    [style.color]=\"\n      Color[\n        color\n      ]\n    \"\n    (click)=\"\n      colorToggle()\n    \"\n  >\n    Enum\n    Toggle\n  </button>\n</p>\n\n<a\n  class=\"to-toc\"\n  href=\"#toc\"\n  >top</a\n>\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->\n\n<div\n  id=\"heroForm\"\n>\n  <form\n    (ngSubmit)=\"\n      onSubmit(\n        heroForm\n      )\n    \"\n    #heroForm=\"ngForm\"\n  >\n    <div\n      class=\"form-group\"\n    >\n      <label\n        for=\"name\"\n        >Name\n        <input\n          class=\"form-control\"\n          name=\"name\"\n          required\n          [(ngModel)]=\"\n            hero.name\n          \"\n        />\n      </label>\n    </div>\n    <button\n      type=\"submit\"\n      [disabled]=\"\n        !heroForm\n          .form\n          .valid\n      \"\n    >\n      Submit\n    </button>\n  </form>\n  <div\n    [hidden]=\"\n      !heroForm\n        .form\n        .valid\n    \"\n  >\n    {{\n      submitMessage\n    }}\n  </div>\n</div>\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->");
}
#[test]
fn test_real_world_component_html_trailing_commaes_5_format_1_52c0e328() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(80)
        .trailing_comma("es5")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<!-- copied from: https://stackblitz.com/angular/ymdjlgmlavo -->\n\n<a id=\"toc\"></a>\n<h1>Template Syntax</h1>\n<a href=\"#interpolation\">Interpolation</a><br>\n<a href=\"#expression-context\">Expression context</a><br>\n<a href=\"#statement-context\">Statement context</a><br>\n<a href=\"#mental-model\">Mental Model</a><br>\n<a href=\"#buttons\">Buttons</a><br>\n<a href=\"#prop-vs-attrib\">Properties vs. Attributes</a><br>\n<br>\n<a href=\"#property-binding\">Property Binding</a><br>\n<div style=\"margin-left:8px\">\n  <a href=\"#attribute-binding\">Attribute Binding</a><br>\n  <a href=\"#class-binding\">Class Binding</a><br>\n  <a href=\"#style-binding\">Style Binding</a><br>\n</div>\n<br>\n<a href=\"#event-binding\">Event Binding</a><br>\n<a href=\"#two-way\">Two-way Binding</a><br>\n<br>\n<div>Directives</div>\n<div style=\"margin-left:8px\">\n  <a href=\"#ngModel\">NgModel (two-way) Binding</a><br>\n  <a href=\"#ngClass\">NgClass Binding</a><br>\n  <a href=\"#ngStyle\">NgStyle Binding</a><br>\n  <a href=\"#ngIf\">NgIf</a><br>\n  <a href=\"#ngFor\">NgFor</a><br>\n  <div style=\"margin-left:8px\">\n    <a href=\"#ngFor-index\">NgFor with index</a><br>\n    <a href=\"#ngFor-trackBy\">NgFor with trackBy</a><br>\n  </div>\n  <a href=\"#ngSwitch\">NgSwitch</a><br>\n</div>\n<br>\n<a href=\"#ref-vars\">Template reference variables</a><br>\n<a href=\"#inputs-and-outputs\">Inputs and outputs</a><br>\n<a href=\"#pipes\">Pipes</a><br>\n<a href=\"#safe-navigation-operator\">Safe navigation operator <i>?.</i></a><br>\n<a href=\"#non-null-assertion-operator\">Non-null assertion operator <i>!.</i></a><br>\n<a href=\"#enums\">Enums</a><br>\n\n<!-- Interpolation and expressions -->\n<hr><h2 id=\"interpolation\">Interpolation</h2>\n\n<p>My current hero is {{currentHero.name}}</p>\n\n<h3>\n  {{title}}\n  <img src=\"{{heroImageUrl}}\" style=\"height:30px\">\n</h3>\n\n<!-- \"The sum of 1 + 1 is 2\" -->\n<p>The sum of 1 + 1 is {{1 + 1}}</p>\n\n<!-- \"The sum of 1 + 1 is not 4\" -->\n<p>The sum of 1 + 1 is not {{1 + 1 + getVal()}}</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"expression-context\">Expression context</h2>\n\n<p>Component expression context (&#123;&#123;title&#125;&#125;, [hidden]=\"isUnchanged\")</p>\n<div class=\"context\">\n  {{title}}\n  <span [hidden]=\"isUnchanged\">changed</span>\n</div>\n\n\n<p>Template input variable expression context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<ng-template>\n  <div *ngFor=\"let hero of heroes\">{{hero.name}}</div>\n</ng-template>\n\n<p>Template reference variable expression context (#heroInput)</p>\n<div (keyup)=\"0\" class=\"context\">\n  Type something:\n  <input #heroInput> {{heroInput.value}}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"statement-context\">Statement context</h2>\n\n<p>Component statement context ( (click)=\"onSave() )\n<div class=\"context\">\n  <button (click)=\"deleteHero()\">Delete hero</button>\n</div>\n\n<p>Template $event statement context</p>\n<div class=\"context\">\n  <button (click)=\"onSave($event)\">Save</button>\n</div>\n\n<p>Template input variable statement context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<div class=\"context\">\n  <button *ngFor=\"let hero of heroes\" (click)=\"deleteHero(hero)\">{{hero.name}}</button>\n</div>\n\n<p>Template reference variable statement context (#heroForm)</p>\n<div class=\"context\">\n  <form #heroForm (ngSubmit)=\"onSubmit(heroForm)\"> ... </form>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- New Mental Model -->\n<hr><h2 id=\"mental-model\">New Mental Model</h2>\n\n<!--<img src=\"http://www.wpclipart.com/cartoon/people/hero/hero_silhoutte_T.png\">-->\n<!-- Public Domain terms of use: http://www.wpclipart.com/terms.html -->\n<div class=\"special\">Mental Model</div>\n<img src=\"assets/images/hero.png\">\n<button disabled>Save</button>\n<br><br>\n\n<div>\n  <!-- Normal HTML -->\n  <div class=\"special\">Mental Model</div>\n  <!-- Wow! A new element! -->\n  <app-hero-detail></app-hero-detail>\n</div>\n<br><br>\n\n<div>\n  <!-- Bind button disabled state to \\`isUnchanged\\` property -->\n  <button [disabled]=\"isUnchanged\">Save</button>\n</div>\n<br><br>\n\n<div>\n  <img [src]=\"heroImageUrl\">\n  <app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n  <div [ngClass]=\"{'special': isSpecial}\"></div>\n</div>\n<br><br>\n\n<button (click)=\"onSave()\">Save</button>\n<app-hero-detail (deleteRequest)=\"deleteHero()\"></app-hero-detail>\n<div (myClick)=\"clicked=$event\" clickable>click me</div>\n{{clicked}}\n<br><br>\n\n<div>\n  Hero Name:\n  <input [(ngModel)]=\"name\">\n  {{name}}\n</div>\n<br><br>\n\n<button [attr.aria-label]=\"help\">help</button>\n<br><br>\n\n<div [class.special]=\"isSpecial\">Special</div>\n<br><br>\n\n<button [style.color]=\"isSpecial ? 'red' : 'green'\">\nbutton</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property vs. attribute -->\n<hr><h2 id=\"prop-vs-attrib\">Property vs. Attribute (img examples)</h2>\n<!-- examine the following <img> tag in the browser tools -->\n<img src=\"images/ng-logo.png\"\n    [src]=\"heroImageUrl\">\n\n<br><br>\n\n<img [src]=\"iconUrl\"/>\n<img bind-src=\"heroImageUrl\"/>\n<img [attr.src]=\"villainImageUrl\"/>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- buttons -->\n<hr><h2 id=\"buttons\">Buttons</h2>\n\n<button>Enabled (but does nothing)</button>\n<button disabled>Disabled</button>\n<button disabled=false>Still disabled</button>\n<br><br>\n<button disabled>disabled by attribute</button>\n<button [disabled]=\"isUnchanged\">disabled by property binding</button>\n<br><br>\n<button bind-disabled=\"isUnchanged\" on-click=\"onSave($event)\">Disabled Cancel</button>\n<button [disabled]=\"!canSave\" (click)=\"onSave($event)\">Enabled Save</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property binding -->\n<hr><h2 id=\"property-binding\">Property Binding</h2>\n\n<img [src]=\"heroImageUrl\">\n<button [disabled]=\"isUnchanged\">Cancel is disabled</button>\n<div [ngClass]=\"classes\">[ngClass] binding to the classes property</div>\n<app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n<img bind-src=\"heroImageUrl\">\n\n<!-- ERROR: HeroDetailComponent.hero expects a\n     Hero object, not the string \"currentHero\" -->\n<div *ngIf=\"false\">\n  <app-hero-detail hero=\"currentHero\"></app-hero-detail>\n</div>\n<app-hero-detail prefix=\"You are my\" [hero]=\"currentHero\"></app-hero-detail>\n\n<p><img src=\"{{heroImageUrl}}\"> is the <i>interpolated</i> image.</p>\n<p><img [src]=\"heroImageUrl\"> is the <i>property bound</i> image.</p>\n\n<p><span>\"{{title}}\" is the <i>interpolated</i> title.</span></p>\n<p>\"<span [innerHTML]=\"title\"></span>\" is the <i>property bound</i> title.</p>\n\n<!--\n  Angular generates warnings for these two lines as it sanitizes them\n  WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).\n -->\n<p><span>\"{{evilTitle}}\" is the <i>interpolated</i> evil title.</span></p>\n<p>\"<span [innerHTML]=\"evilTitle\"></span>\" is the <i>property bound</i> evil title.</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- attribute binding -->\n<hr><h2 id=\"attribute-binding\">Attribute Binding</h2>\n\n<!--  create and set a colspan attribute -->\n<table border=1>\n  <!--  expression calculates colspan=2 -->\n  <tr><td [attr.colspan]=\"1 + 1\">One-Two</td></tr>\n\n  <!-- ERROR: There is no \\`colspan\\` property to set!\n    <tr><td colspan=\"{{1 + 1}}\">Three-Four</td></tr>\n  -->\n\n  <tr><td>Five</td><td>Six</td></tr>\n</table>\n\n<br>\n<!-- create and set an aria attribute for assistive technology -->\n<button [attr.aria-label]=\"actionName\">{{actionName}} with Aria</button>\n<br><br>\n\n<!-- The following effects are not discussed in the chapter -->\n<div>\n  <!-- any use of [attr.disabled] creates the disabled attribute -->\n  <button [attr.disabled]=\"isUnchanged\">Disabled</button>\n\n  <button [attr.disabled]=\"!isUnchanged\">Disabled as well</button>\n\n  <!-- we'd have to remove it with property binding -->\n  <button disabled [disabled]=\"false\">Enabled (but inert)</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- class binding -->\n<hr><h2 id=\"class-binding\">Class Binding</h2>\n\n<!-- standard class attribute setting  -->\n<div class=\"bad curly special\">Bad curly special</div>\n\n<!-- reset/override all class names with a binding  -->\n<div class=\"bad curly special\"\n     [class]=\"badCurly\">Bad curly</div>\n\n<!-- toggle the \"special\" class on/off with a property -->\n<div [class.special]=\"isSpecial\">The class binding is special</div>\n\n<!-- binding to \\`class.special\\` trumps the class attribute -->\n<div class=\"special\"\n     [class.special]=\"!isSpecial\">This one is not so special</div>\n\n<div bind-class.special=\"isSpecial\">This class binding is special too</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!--style binding -->\n<hr><h2 id=\"style-binding\">Style Binding</h2>\n\n<button [style.color]=\"isSpecial ? 'red': 'green'\">Red</button>\n<button [style.background-color]=\"canSave ? 'cyan': 'grey'\" >Save</button>\n\n<button [style.font-size.em]=\"isSpecial ? 3 : 1\" >Big</button>\n<button [style.font-size.%]=\"!isSpecial ? 150 : 50\" >Small</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- event binding -->\n<hr><h2 id=\"event-binding\">Event Binding</h2>\n\n<button (click)=\"onSave()\">Save</button>\n\n<button on-click=\"onSave()\">On Save</button>\n\n<div>\n<!-- \\`myClick\\` is an event on the custom \\`ClickDirective\\` -->\n<div (myClick)=\"clickMessage=$event\" clickable>click with myClick</div>\n{{clickMessage}}\n</div>\n\n\n<!-- binding to a nested component -->\n<app-hero-detail (deleteRequest)=\"deleteHero($event)\" [hero]=\"currentHero\"></app-hero-detail>\n<br>\n\n<app-big-hero-detail\n    (deleteRequest)=\"deleteHero($event)\"\n    [hero]=\"currentHero\">\n</app-big-hero-detail>\n\n<div class=\"parent-div\" (click)=\"onClickMe($event)\" clickable>Click me\n  <div class=\"child-div\">Click me too!</div>\n</div>\n\n<!-- Will save only once -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave($event)\">Save, no propagation</button>\n</div>\n\n<!-- Will save twice -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave()\">Save w/ propagation</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"two-way\">Two-way Binding</h2>\n<div id=\"two-way-1\">\n  <app-sizer [(size)]=\"fontSizePx\"></app-sizer>\n  <div [style.font-size.px]=\"fontSizePx\">Resizable Text</div>\n  <label>FontSize (px): <input [(ngModel)]=\"fontSizePx\"></label>\n</div>\n<br>\n<div id=\"two-way-2\">\n  <h3>De-sugared two-way binding</h3>\n  <app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx=$event\"></app-sizer>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Two way data binding unwound;\n    passing the changed display value to the event handler via \\`$event\\` -->\n<hr><h2 id=\"ngModel\">NgModel (two-way) Binding</h2>\n\n<h3>Result: {{currentHero.name}}</h3>\n\n<input [value]=\"currentHero.name\"\n       (input)=\"currentHero.name=$event.target.value\" >\nwithout NgModel\n<br>\n<input [(ngModel)]=\"currentHero.name\">\n[(ngModel)]\n<br>\n<input bindon-ngModel=\"currentHero.name\">\nbindon-ngModel\n<br>\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"currentHero.name=$event\">\n(ngModelChange)=\"...name=$event\"\n<br>\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"setUppercaseName($event)\">\n(ngModelChange)=\"setUppercaseName($event)\"\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgClass binding -->\n<hr><h2 id=\"ngClass\">NgClass Binding</h2>\n\n<p>currentClasses is {{currentClasses | json}}</p>\n<div [ngClass]=\"currentClasses\">This div is initially saveable, unchanged, and special</div>\n\n<!-- not used in chapter -->\n<br>\n<label>saveable   <input type=\"checkbox\" [(ngModel)]=\"canSave\"></label> |\n<label>modified:  <input type=\"checkbox\" [value]=\"!isUnchanged\" (change)=\"isUnchanged=!isUnchanged\"></label> |\n<label>special:   <input type=\"checkbox\" [(ngModel)]=\"isSpecial\"></label>\n<button (click)=\"setCurrentClasses()\">Refresh currentClasses</button>\n<br><br>\n<div [ngClass]=\"currentClasses\">\n  This div should be {{ canSave ? \"\": \"not\"}} saveable,\n                  {{ isUnchanged ? \"unchanged\" : \"modified\" }} and,\n                  {{ isSpecial ? \"\": \"not\"}} special after clicking \"Refresh\".</div>\n<br><br>\n\n<div [ngClass]=\"isSpecial ? 'special' : ''\">This div is special</div>\n\n<div class=\"bad curly special\">Bad curly special</div>\n<div [ngClass]=\"{'bad':false, 'curly':true, 'special':true}\">Curly special</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgStyle binding -->\n<hr><h2 id=\"ngStyle\">NgStyle Binding</h2>\n\n<div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\" >\n  This div is x-large or smaller.\n</div>\n\n<h3>[ngStyle] binding to currentStyles - CSS property names</h3>\n<p>currentStyles is {{currentStyles | json}}</p>\n<div [ngStyle]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n</div>\n\n<!-- not used in chapter -->\n<br>\n<label>italic: <input type=\"checkbox\" [(ngModel)]=\"canSave\"></label> |\n<label>normal: <input type=\"checkbox\" [(ngModel)]=\"isUnchanged\"></label> |\n<label>xlarge: <input type=\"checkbox\" [(ngModel)]=\"isSpecial\"></label>\n<button (click)=\"setCurrentStyles()\">Refresh currentStyles</button>\n<br><br>\n<div [ngStyle]=\"currentStyles\">\n  This div should be {{ canSave ? \"italic\": \"plain\"}},\n                  {{ isUnchanged ? \"normal weight\" : \"bold\" }} and,\n                  {{ isSpecial ? \"extra large\": \"normal size\"}} after clicking \"Refresh\".</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgIf binding -->\n<hr><h2 id=\"ngIf\">NgIf Binding</h2>\n\n<app-hero-detail *ngIf=\"isActive\"></app-hero-detail>\n\n<div *ngIf=\"currentHero\">Hello, {{currentHero.name}}</div>\n<div *ngIf=\"nullHero\">Hello, {{nullHero.name}}</div>\n\n<!-- NgIf binding with template (no *) -->\n\n<ng-template [ngIf]=\"currentHero\">Add {{currentHero.name}} with template</ng-template>\n\n<!-- Does not show because isActive is false! -->\n<div>Hero Detail removed from DOM (via template) because isActive is false</div>\n<ng-template [ngIf]=\"isActive\">\n  <app-hero-detail></app-hero-detail>\n</ng-template>\n\n<!-- isSpecial is true -->\n<div [class.hidden]=\"!isSpecial\">Show with class</div>\n<div [class.hidden]=\"isSpecial\">Hide with class</div>\n\n<!-- HeroDetail is in the DOM but hidden -->\n<app-hero-detail [class.hidden]=\"isSpecial\"></app-hero-detail>\n\n<div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with style</div>\n<div [style.display]=\"isSpecial ? 'none'  : 'block'\">Hide with style</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgFor binding -->\n<hr><h2 id=\"ngFor\">NgFor Binding</h2>\n\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes\">{{hero.name}}</div>\n</div>\n<br>\n\n<div class=\"box\">\n  <!-- *ngFor w/ hero-detail Component -->\n  <app-hero-detail *ngFor=\"let hero of heroes\" [hero]=\"hero\"></app-hero-detail>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-index\">*ngFor with index</h4>\n<p>with <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; let i=index\">{{i + 1}} - {{hero.name}}</div>\n</div>\n\n<p>with <i>comma</i> separator</p>\n<div class=\"box\">\n  <!-- Ex: \"1 - Hercules\" -->\n  <div *ngFor=\"let hero of heroes, let i=index\">{{i + 1}} - {{hero.name}}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-trackBy\">*ngFor trackBy</h4>\n<button (click)=\"resetHeroes()\">Reset heroes</button>\n<button (click)=\"changeIds()\">Change ids</button>\n<button (click)=\"clearTrackByCounts()\">Clear counts</button>\n\n<p><i>without</i> trackBy</p>\n<div class=\"box\">\n  <div #noTrackBy *ngFor=\"let hero of heroes\">({{hero.id}}) {{hero.name}}</div>\n\n  <div id=\"noTrackByCnt\" *ngIf=\"heroesNoTrackByCount\" >\n    Hero DOM elements change #{{heroesNoTrackByCount}} without trackBy\n  </div>\n</div>\n\n<p>with trackBy</p>\n<div class=\"box\">\n  <div #withTrackBy *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n\n  <div id=\"withTrackByCnt\" *ngIf=\"heroesWithTrackByCount\">\n    Hero DOM elements change #{{heroesWithTrackByCount}} with trackBy\n  </div>\n</div>\n\n<br><br><br>\n\n<p>with trackBy and <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{hero.id}}) {{hero.name}}\n  </div>\n</div>\n\n<p>with trackBy and <i>comma</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes, trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<p>with trackBy and <i>space</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<p>with <i>generic</i> trackById function</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes, trackBy: trackById\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgSwitch binding -->\n<hr><h2 id=\"ngSwitch\">NgSwitch Binding</h2>\n\n<p>Pick your favorite hero</p>\n<div>\n  <label *ngFor=\"let h of heroes\">\n    <input type=\"radio\" name=\"heroes\" [(ngModel)]=\"currentHero\" [value]=\"h\">{{h.name}}\n  </label>\n</div>\n\n<div [ngSwitch]=\"currentHero.emotion\">\n  <app-happy-hero    *ngSwitchCase=\"'happy'\"    [hero]=\"currentHero\"></app-happy-hero>\n  <app-sad-hero      *ngSwitchCase=\"'sad'\"      [hero]=\"currentHero\"></app-sad-hero>\n  <app-confused-hero *ngSwitchCase=\"'confused'\" [hero]=\"currentHero\"></app-confused-hero>\n  <div *ngSwitchCase=\"'confused'\">Are you as confused as {{currentHero.name}}?</div>\n  <app-unknown-hero  *ngSwitchDefault           [hero]=\"currentHero\"></app-unknown-hero>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- template reference variable -->\n<hr><h2 id=\"ref-vars\">Template reference variables</h2>\n\n<input #phone placeholder=\"phone number\">\n\n<!-- lots of other elements -->\n\n<!-- phone refers to the input element; pass its \\`value\\` to an event handler -->\n<button (click)=\"callPhone(phone.value)\">Call</button>\n\n<input ref-fax placeholder=\"fax number\">\n<button (click)=\"callFax(fax.value)\">Fax</button>\n\n<!-- btn refers to the button element; show its disabled state -->\n<button #btn disabled [innerHTML]=\"'disabled by attribute: '+btn.disabled\"></button>\n\n<h4>Example Form</h4>\n<app-hero-form [hero]=\"currentHero\"></app-hero-form>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- inputs and output -->\n<hr><h2 id=\"inputs-and-outputs\">Inputs and Outputs</h2>\n\n<img [src]=\"iconUrl\"/>\n<button (click)=\"onSave()\">Save</button>\n\n<app-hero-detail [hero]=\"currentHero\" (deleteRequest)=\"deleteHero($event)\">\n</app-hero-detail>\n\n<div (myClick)=\"clickMessage2=$event\" clickable>myClick2</div>\n{{clickMessage2}}\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Pipes -->\n<hr><h2 id=\"pipes\">Pipes</h2>\n\n<div>Title through uppercase pipe: {{title | uppercase}}</div>\n\n<!-- Pipe chaining: convert title to uppercase, then to lowercase -->\n<div>\n  Title through a pipe chain:\n  {{title | uppercase | lowercase}}\n</div>\n\n<!-- pipe with configuration argument => \"February 25, 1970\" -->\n<div>Birthdate: {{currentHero?.birthdate | date:'longDate'}}</div>\n\n<div>{{currentHero | json}}</div>\n\n<div>Birthdate: {{(currentHero?.birthdate | date:'longDate') | uppercase}}</div>\n\n<div>\n  <!-- pipe price to USD and display the $ symbol -->\n  <label>Price: </label>{{product.price | currency:'USD':true}}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Null values and the safe navigation operator -->\n<hr><h2 id=\"safe-navigation-operator\">Safe navigation operator <i>?.</i></h2>\n\n<div>\n  The title is {{title}}\n</div>\n\n<div>\n  The current hero's name is {{currentHero?.name}}\n</div>\n\n<div>\n  The current hero's name is {{currentHero.name}}\n</div>\n\n\n<!--\nThe null hero's name is {{nullHero.name}}\n\nSee console log:\n  TypeError: Cannot read property 'name' of null in [null]\n-->\n\n<!--No hero, div not displayed, no error -->\n<div *ngIf=\"nullHero\">The null hero's name is {{nullHero.name}}</div>\n\n<div>\nThe null hero's name is {{nullHero && nullHero.name}}\n</div>\n\n<div>\n  <!-- No hero, no problem! -->\n  The null hero's name is {{nullHero?.name}}\n</div>\n\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr><h2 id=\"non-null-assertion-operator\">Non-null assertion operator <i>!.</i></h2>\n\n<div>\n  <!--No hero, no text -->\n  <div *ngIf=\"hero\">\n    The hero's name is {{hero!.name}}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr><h2 id=\"any-type-cast-function\">$any type cast function <i>$any( )</i>.</h2>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>\n    The hero's marker is {{$any(hero).marker}}\n  </div>\n</div>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>\n    Undeclared members is {{$any(this).member}}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- TODO: discuss this in the Style binding section -->\n<!-- enums in bindings -->\n<hr><h2 id=\"enums\">Enums in binding</h2>\n\n<p>\n  The name of the Color.Red enum is {{Color[Color.Red]}}.<br>\n  The current color is {{Color[color]}} and its number is {{color}}.<br>\n  <button [style.color]=\"Color[color]\" (click)=\"colorToggle()\">Enum Toggle</button>\n</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->\n\n<div id=\"heroForm\">\n  <form (ngSubmit)=\"onSubmit(heroForm)\" #heroForm=\"ngForm\">\n    <div class=\"form-group\">\n      <label for=\"name\">Name\n        <input class=\"form-control\" name=\"name\" required [(ngModel)]=\"hero.name\">\n      </label>\n    </div>\n    <button type=\"submit\" [disabled]=\"!heroForm.form.valid\">Submit</button>\n  </form>\n  <div [hidden]=\"!heroForm.form.valid\">\n    {{submitMessage}}\n  </div>\n</div>\n\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<!-- copied from: https://stackblitz.com/angular/ymdjlgmlavo -->\n\n<a id=\"toc\"></a>\n<h1>Template Syntax</h1>\n<a href=\"#interpolation\">Interpolation</a><br />\n<a href=\"#expression-context\">Expression context</a><br />\n<a href=\"#statement-context\">Statement context</a><br />\n<a href=\"#mental-model\">Mental Model</a><br />\n<a href=\"#buttons\">Buttons</a><br />\n<a href=\"#prop-vs-attrib\">Properties vs. Attributes</a><br />\n<br />\n<a href=\"#property-binding\">Property Binding</a><br />\n<div style=\"margin-left: 8px\">\n  <a href=\"#attribute-binding\">Attribute Binding</a><br />\n  <a href=\"#class-binding\">Class Binding</a><br />\n  <a href=\"#style-binding\">Style Binding</a><br />\n</div>\n<br />\n<a href=\"#event-binding\">Event Binding</a><br />\n<a href=\"#two-way\">Two-way Binding</a><br />\n<br />\n<div>Directives</div>\n<div style=\"margin-left: 8px\">\n  <a href=\"#ngModel\">NgModel (two-way) Binding</a><br />\n  <a href=\"#ngClass\">NgClass Binding</a><br />\n  <a href=\"#ngStyle\">NgStyle Binding</a><br />\n  <a href=\"#ngIf\">NgIf</a><br />\n  <a href=\"#ngFor\">NgFor</a><br />\n  <div style=\"margin-left: 8px\">\n    <a href=\"#ngFor-index\">NgFor with index</a><br />\n    <a href=\"#ngFor-trackBy\">NgFor with trackBy</a><br />\n  </div>\n  <a href=\"#ngSwitch\">NgSwitch</a><br />\n</div>\n<br />\n<a href=\"#ref-vars\">Template reference variables</a><br />\n<a href=\"#inputs-and-outputs\">Inputs and outputs</a><br />\n<a href=\"#pipes\">Pipes</a><br />\n<a href=\"#safe-navigation-operator\">Safe navigation operator <i>?.</i></a\n><br />\n<a href=\"#non-null-assertion-operator\">Non-null assertion operator <i>!.</i></a\n><br />\n<a href=\"#enums\">Enums</a><br />\n\n<!-- Interpolation and expressions -->\n<hr />\n<h2 id=\"interpolation\">Interpolation</h2>\n\n<p>My current hero is {{ currentHero.name }}</p>\n\n<h3>\n  {{ title }}\n  <img src=\"{{ heroImageUrl }}\" style=\"height: 30px\" />\n</h3>\n\n<!-- \"The sum of 1 + 1 is 2\" -->\n<p>The sum of 1 + 1 is {{ 1 + 1 }}</p>\n\n<!-- \"The sum of 1 + 1 is not 4\" -->\n<p>The sum of 1 + 1 is not {{ 1 + 1 + getVal() }}</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr />\n<h2 id=\"expression-context\">Expression context</h2>\n\n<p>\n  Component expression context (&#123;&#123;title&#125;&#125;,\n  [hidden]=\"isUnchanged\")\n</p>\n<div class=\"context\">\n  {{ title }}\n  <span [hidden]=\"isUnchanged\">changed</span>\n</div>\n\n<p>Template input variable expression context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<ng-template>\n  <div *ngFor=\"let hero of heroes\">{{ hero.name }}</div>\n</ng-template>\n\n<p>Template reference variable expression context (#heroInput)</p>\n<div (keyup)=\"(0)\" class=\"context\">\n  Type something:\n  <input #heroInput /> {{ heroInput.value }}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr />\n<h2 id=\"statement-context\">Statement context</h2>\n\n<p>Component statement context ( (click)=\"onSave() )</p>\n<div class=\"context\">\n  <button (click)=\"deleteHero()\">Delete hero</button>\n</div>\n\n<p>Template $event statement context</p>\n<div class=\"context\">\n  <button (click)=\"onSave($event)\">Save</button>\n</div>\n\n<p>Template input variable statement context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<div class=\"context\">\n  <button *ngFor=\"let hero of heroes\" (click)=\"deleteHero(hero)\">\n    {{ hero.name }}\n  </button>\n</div>\n\n<p>Template reference variable statement context (#heroForm)</p>\n<div class=\"context\">\n  <form #heroForm (ngSubmit)=\"onSubmit(heroForm)\">...</form>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- New Mental Model -->\n<hr />\n<h2 id=\"mental-model\">New Mental Model</h2>\n\n<!--<img src=\"http://www.wpclipart.com/cartoon/people/hero/hero_silhoutte_T.png\">-->\n<!-- Public Domain terms of use: http://www.wpclipart.com/terms.html -->\n<div class=\"special\">Mental Model</div>\n<img src=\"assets/images/hero.png\" />\n<button disabled>Save</button>\n<br /><br />\n\n<div>\n  <!-- Normal HTML -->\n  <div class=\"special\">Mental Model</div>\n  <!-- Wow! A new element! -->\n  <app-hero-detail></app-hero-detail>\n</div>\n<br /><br />\n\n<div>\n  <!-- Bind button disabled state to \\`isUnchanged\\` property -->\n  <button [disabled]=\"isUnchanged\">Save</button>\n</div>\n<br /><br />\n\n<div>\n  <img [src]=\"heroImageUrl\" />\n  <app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n  <div [ngClass]=\"{ special: isSpecial }\"></div>\n</div>\n<br /><br />\n\n<button (click)=\"onSave()\">Save</button>\n<app-hero-detail (deleteRequest)=\"deleteHero()\"></app-hero-detail>\n<div (myClick)=\"clicked = $event\" clickable>click me</div>\n{{ clicked }}\n<br /><br />\n\n<div>\n  Hero Name:\n  <input [(ngModel)]=\"name\" />\n  {{ name }}\n</div>\n<br /><br />\n\n<button [attr.aria-label]=\"help\">help</button>\n<br /><br />\n\n<div [class.special]=\"isSpecial\">Special</div>\n<br /><br />\n\n<button [style.color]=\"isSpecial ? 'red' : 'green'\">button</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property vs. attribute -->\n<hr />\n<h2 id=\"prop-vs-attrib\">Property vs. Attribute (img examples)</h2>\n<!-- examine the following <img> tag in the browser tools -->\n<img src=\"images/ng-logo.png\" [src]=\"heroImageUrl\" />\n\n<br /><br />\n\n<img [src]=\"iconUrl\" />\n<img bind-src=\"heroImageUrl\" />\n<img [attr.src]=\"villainImageUrl\" />\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- buttons -->\n<hr />\n<h2 id=\"buttons\">Buttons</h2>\n\n<button>Enabled (but does nothing)</button>\n<button disabled>Disabled</button>\n<button disabled=\"false\">Still disabled</button>\n<br /><br />\n<button disabled>disabled by attribute</button>\n<button [disabled]=\"isUnchanged\">disabled by property binding</button>\n<br /><br />\n<button bind-disabled=\"isUnchanged\" on-click=\"onSave($event)\">\n  Disabled Cancel\n</button>\n<button [disabled]=\"!canSave\" (click)=\"onSave($event)\">Enabled Save</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property binding -->\n<hr />\n<h2 id=\"property-binding\">Property Binding</h2>\n\n<img [src]=\"heroImageUrl\" />\n<button [disabled]=\"isUnchanged\">Cancel is disabled</button>\n<div [ngClass]=\"classes\">[ngClass] binding to the classes property</div>\n<app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n<img bind-src=\"heroImageUrl\" />\n\n<!-- ERROR: HeroDetailComponent.hero expects a\n     Hero object, not the string \"currentHero\" -->\n<div *ngIf=\"false\">\n  <app-hero-detail hero=\"currentHero\"></app-hero-detail>\n</div>\n<app-hero-detail prefix=\"You are my\" [hero]=\"currentHero\"></app-hero-detail>\n\n<p><img src=\"{{ heroImageUrl }}\" /> is the <i>interpolated</i> image.</p>\n<p><img [src]=\"heroImageUrl\" /> is the <i>property bound</i> image.</p>\n\n<p>\n  <span>\"{{ title }}\" is the <i>interpolated</i> title.</span>\n</p>\n<p>\"<span [innerHTML]=\"title\"></span>\" is the <i>property bound</i> title.</p>\n\n<!--\n  Angular generates warnings for these two lines as it sanitizes them\n  WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).\n -->\n<p>\n  <span>\"{{ evilTitle }}\" is the <i>interpolated</i> evil title.</span>\n</p>\n<p>\n  \"<span [innerHTML]=\"evilTitle\"></span>\" is the <i>property bound</i> evil\n  title.\n</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- attribute binding -->\n<hr />\n<h2 id=\"attribute-binding\">Attribute Binding</h2>\n\n<!--  create and set a colspan attribute -->\n<table border=\"1\">\n  <!--  expression calculates colspan=2 -->\n  <tr>\n    <td [attr.colspan]=\"1 + 1\">One-Two</td>\n  </tr>\n\n  <!-- ERROR: There is no \\`colspan\\` property to set!\n    <tr><td colspan=\"{{1 + 1}}\">Three-Four</td></tr>\n  -->\n\n  <tr>\n    <td>Five</td>\n    <td>Six</td>\n  </tr>\n</table>\n\n<br />\n<!-- create and set an aria attribute for assistive technology -->\n<button [attr.aria-label]=\"actionName\">{{ actionName }} with Aria</button>\n<br /><br />\n\n<!-- The following effects are not discussed in the chapter -->\n<div>\n  <!-- any use of [attr.disabled] creates the disabled attribute -->\n  <button [attr.disabled]=\"isUnchanged\">Disabled</button>\n\n  <button [attr.disabled]=\"!isUnchanged\">Disabled as well</button>\n\n  <!-- we'd have to remove it with property binding -->\n  <button disabled [disabled]=\"false\">Enabled (but inert)</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- class binding -->\n<hr />\n<h2 id=\"class-binding\">Class Binding</h2>\n\n<!-- standard class attribute setting  -->\n<div class=\"bad curly special\">Bad curly special</div>\n\n<!-- reset/override all class names with a binding  -->\n<div class=\"bad curly special\" [class]=\"badCurly\">Bad curly</div>\n\n<!-- toggle the \"special\" class on/off with a property -->\n<div [class.special]=\"isSpecial\">The class binding is special</div>\n\n<!-- binding to \\`class.special\\` trumps the class attribute -->\n<div class=\"special\" [class.special]=\"!isSpecial\">\n  This one is not so special\n</div>\n\n<div bind-class.special=\"isSpecial\">This class binding is special too</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!--style binding -->\n<hr />\n<h2 id=\"style-binding\">Style Binding</h2>\n\n<button [style.color]=\"isSpecial ? 'red' : 'green'\">Red</button>\n<button [style.background-color]=\"canSave ? 'cyan' : 'grey'\">Save</button>\n\n<button [style.font-size.em]=\"isSpecial ? 3 : 1\">Big</button>\n<button [style.font-size.%]=\"!isSpecial ? 150 : 50\">Small</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- event binding -->\n<hr />\n<h2 id=\"event-binding\">Event Binding</h2>\n\n<button (click)=\"onSave()\">Save</button>\n\n<button on-click=\"onSave()\">On Save</button>\n\n<div>\n  <!-- \\`myClick\\` is an event on the custom \\`ClickDirective\\` -->\n  <div (myClick)=\"clickMessage = $event\" clickable>click with myClick</div>\n  {{ clickMessage }}\n</div>\n\n<!-- binding to a nested component -->\n<app-hero-detail\n  (deleteRequest)=\"deleteHero($event)\"\n  [hero]=\"currentHero\"\n></app-hero-detail>\n<br />\n\n<app-big-hero-detail (deleteRequest)=\"deleteHero($event)\" [hero]=\"currentHero\">\n</app-big-hero-detail>\n\n<div class=\"parent-div\" (click)=\"onClickMe($event)\" clickable>\n  Click me\n  <div class=\"child-div\">Click me too!</div>\n</div>\n\n<!-- Will save only once -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave($event)\">Save, no propagation</button>\n</div>\n\n<!-- Will save twice -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave()\">Save w/ propagation</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr />\n<h2 id=\"two-way\">Two-way Binding</h2>\n<div id=\"two-way-1\">\n  <app-sizer [(size)]=\"fontSizePx\"></app-sizer>\n  <div [style.font-size.px]=\"fontSizePx\">Resizable Text</div>\n  <label>FontSize (px): <input [(ngModel)]=\"fontSizePx\" /></label>\n</div>\n<br />\n<div id=\"two-way-2\">\n  <h3>De-sugared two-way binding</h3>\n  <app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx = $event\"></app-sizer>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Two way data binding unwound;\n    passing the changed display value to the event handler via \\`$event\\` -->\n<hr />\n<h2 id=\"ngModel\">NgModel (two-way) Binding</h2>\n\n<h3>Result: {{ currentHero.name }}</h3>\n\n<input\n  [value]=\"currentHero.name\"\n  (input)=\"currentHero.name = $event.target.value\"\n/>\nwithout NgModel\n<br />\n<input [(ngModel)]=\"currentHero.name\" />\n[(ngModel)]\n<br />\n<input bindon-ngModel=\"currentHero.name\" />\nbindon-ngModel\n<br />\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"currentHero.name = $event\"\n/>\n(ngModelChange)=\"...name=$event\"\n<br />\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"setUppercaseName($event)\"\n/>\n(ngModelChange)=\"setUppercaseName($event)\"\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgClass binding -->\n<hr />\n<h2 id=\"ngClass\">NgClass Binding</h2>\n\n<p>currentClasses is {{ currentClasses | json }}</p>\n<div [ngClass]=\"currentClasses\">\n  This div is initially saveable, unchanged, and special\n</div>\n\n<!-- not used in chapter -->\n<br />\n<label>saveable <input type=\"checkbox\" [(ngModel)]=\"canSave\" /></label> |\n<label\n  >modified:\n  <input\n    type=\"checkbox\"\n    [value]=\"!isUnchanged\"\n    (change)=\"isUnchanged = !isUnchanged\"\n/></label>\n|\n<label>special: <input type=\"checkbox\" [(ngModel)]=\"isSpecial\" /></label>\n<button (click)=\"setCurrentClasses()\">Refresh currentClasses</button>\n<br /><br />\n<div [ngClass]=\"currentClasses\">\n  This div should be {{ canSave ? \"\" : \"not\" }} saveable,\n  {{ isUnchanged ? \"unchanged\" : \"modified\" }} and,\n  {{ isSpecial ? \"\" : \"not\" }} special after clicking \"Refresh\".\n</div>\n<br /><br />\n\n<div [ngClass]=\"isSpecial ? 'special' : ''\">This div is special</div>\n\n<div class=\"bad curly special\">Bad curly special</div>\n<div [ngClass]=\"{ bad: false, curly: true, special: true }\">Curly special</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgStyle binding -->\n<hr />\n<h2 id=\"ngStyle\">NgStyle Binding</h2>\n\n<div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\">\n  This div is x-large or smaller.\n</div>\n\n<h3>[ngStyle] binding to currentStyles - CSS property names</h3>\n<p>currentStyles is {{ currentStyles | json }}</p>\n<div [ngStyle]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n</div>\n\n<!-- not used in chapter -->\n<br />\n<label>italic: <input type=\"checkbox\" [(ngModel)]=\"canSave\" /></label> |\n<label>normal: <input type=\"checkbox\" [(ngModel)]=\"isUnchanged\" /></label> |\n<label>xlarge: <input type=\"checkbox\" [(ngModel)]=\"isSpecial\" /></label>\n<button (click)=\"setCurrentStyles()\">Refresh currentStyles</button>\n<br /><br />\n<div [ngStyle]=\"currentStyles\">\n  This div should be {{ canSave ? \"italic\" : \"plain\" }},\n  {{ isUnchanged ? \"normal weight\" : \"bold\" }} and,\n  {{ isSpecial ? \"extra large\" : \"normal size\" }} after clicking \"Refresh\".\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgIf binding -->\n<hr />\n<h2 id=\"ngIf\">NgIf Binding</h2>\n\n<app-hero-detail *ngIf=\"isActive\"></app-hero-detail>\n\n<div *ngIf=\"currentHero\">Hello, {{ currentHero.name }}</div>\n<div *ngIf=\"nullHero\">Hello, {{ nullHero.name }}</div>\n\n<!-- NgIf binding with template (no *) -->\n\n<ng-template [ngIf]=\"currentHero\"\n  >Add {{ currentHero.name }} with template</ng-template\n>\n\n<!-- Does not show because isActive is false! -->\n<div>Hero Detail removed from DOM (via template) because isActive is false</div>\n<ng-template [ngIf]=\"isActive\">\n  <app-hero-detail></app-hero-detail>\n</ng-template>\n\n<!-- isSpecial is true -->\n<div [class.hidden]=\"!isSpecial\">Show with class</div>\n<div [class.hidden]=\"isSpecial\">Hide with class</div>\n\n<!-- HeroDetail is in the DOM but hidden -->\n<app-hero-detail [class.hidden]=\"isSpecial\"></app-hero-detail>\n\n<div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with style</div>\n<div [style.display]=\"isSpecial ? 'none' : 'block'\">Hide with style</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgFor binding -->\n<hr />\n<h2 id=\"ngFor\">NgFor Binding</h2>\n\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes\">{{ hero.name }}</div>\n</div>\n<br />\n\n<div class=\"box\">\n  <!-- *ngFor w/ hero-detail Component -->\n  <app-hero-detail *ngFor=\"let hero of heroes\" [hero]=\"hero\"></app-hero-detail>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-index\">*ngFor with index</h4>\n<p>with <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; let i = index\">\n    {{ i + 1 }} - {{ hero.name }}\n  </div>\n</div>\n\n<p>with <i>comma</i> separator</p>\n<div class=\"box\">\n  <!-- Ex: \"1 - Hercules\" -->\n  <div *ngFor=\"let hero of heroes; let i = index\">\n    {{ i + 1 }} - {{ hero.name }}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-trackBy\">*ngFor trackBy</h4>\n<button (click)=\"resetHeroes()\">Reset heroes</button>\n<button (click)=\"changeIds()\">Change ids</button>\n<button (click)=\"clearTrackByCounts()\">Clear counts</button>\n\n<p><i>without</i> trackBy</p>\n<div class=\"box\">\n  <div #noTrackBy *ngFor=\"let hero of heroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n\n  <div id=\"noTrackByCnt\" *ngIf=\"heroesNoTrackByCount\">\n    Hero DOM elements change #{{ heroesNoTrackByCount }} without trackBy\n  </div>\n</div>\n\n<p>with trackBy</p>\n<div class=\"box\">\n  <div #withTrackBy *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n\n  <div id=\"withTrackByCnt\" *ngIf=\"heroesWithTrackByCount\">\n    Hero DOM elements change #{{ heroesWithTrackByCount }} with trackBy\n  </div>\n</div>\n\n<br /><br /><br />\n\n<p>with trackBy and <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<p>with trackBy and <i>comma</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<p>with trackBy and <i>space</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<p>with <i>generic</i> trackById function</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackById\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgSwitch binding -->\n<hr />\n<h2 id=\"ngSwitch\">NgSwitch Binding</h2>\n\n<p>Pick your favorite hero</p>\n<div>\n  <label *ngFor=\"let h of heroes\">\n    <input type=\"radio\" name=\"heroes\" [(ngModel)]=\"currentHero\" [value]=\"h\" />{{\n      h.name\n    }}\n  </label>\n</div>\n\n<div [ngSwitch]=\"currentHero.emotion\">\n  <app-happy-hero *ngSwitchCase=\"'happy'\" [hero]=\"currentHero\"></app-happy-hero>\n  <app-sad-hero *ngSwitchCase=\"'sad'\" [hero]=\"currentHero\"></app-sad-hero>\n  <app-confused-hero\n    *ngSwitchCase=\"'confused'\"\n    [hero]=\"currentHero\"\n  ></app-confused-hero>\n  <div *ngSwitchCase=\"'confused'\">\n    Are you as confused as {{ currentHero.name }}?\n  </div>\n  <app-unknown-hero *ngSwitchDefault [hero]=\"currentHero\"></app-unknown-hero>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- template reference variable -->\n<hr />\n<h2 id=\"ref-vars\">Template reference variables</h2>\n\n<input #phone placeholder=\"phone number\" />\n\n<!-- lots of other elements -->\n\n<!-- phone refers to the input element; pass its \\`value\\` to an event handler -->\n<button (click)=\"callPhone(phone.value)\">Call</button>\n\n<input ref-fax placeholder=\"fax number\" />\n<button (click)=\"callFax(fax.value)\">Fax</button>\n\n<!-- btn refers to the button element; show its disabled state -->\n<button\n  #btn\n  disabled\n  [innerHTML]=\"'disabled by attribute: ' + btn.disabled\"\n></button>\n\n<h4>Example Form</h4>\n<app-hero-form [hero]=\"currentHero\"></app-hero-form>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- inputs and output -->\n<hr />\n<h2 id=\"inputs-and-outputs\">Inputs and Outputs</h2>\n\n<img [src]=\"iconUrl\" />\n<button (click)=\"onSave()\">Save</button>\n\n<app-hero-detail [hero]=\"currentHero\" (deleteRequest)=\"deleteHero($event)\">\n</app-hero-detail>\n\n<div (myClick)=\"clickMessage2 = $event\" clickable>myClick2</div>\n{{ clickMessage2 }}\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Pipes -->\n<hr />\n<h2 id=\"pipes\">Pipes</h2>\n\n<div>Title through uppercase pipe: {{ title | uppercase }}</div>\n\n<!-- Pipe chaining: convert title to uppercase, then to lowercase -->\n<div>\n  Title through a pipe chain:\n  {{ title | uppercase | lowercase }}\n</div>\n\n<!-- pipe with configuration argument => \"February 25, 1970\" -->\n<div>Birthdate: {{ currentHero?.birthdate | date: \"longDate\" }}</div>\n\n<div>{{ currentHero | json }}</div>\n\n<div>\n  Birthdate: {{ currentHero?.birthdate | date: \"longDate\" | uppercase }}\n</div>\n\n<div>\n  <!-- pipe price to USD and display the $ symbol -->\n  <label>Price: </label>{{ product.price | currency: \"USD\" : true }}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Null values and the safe navigation operator -->\n<hr />\n<h2 id=\"safe-navigation-operator\">Safe navigation operator <i>?.</i></h2>\n\n<div>The title is {{ title }}</div>\n\n<div>The current hero's name is {{ currentHero?.name }}</div>\n\n<div>The current hero's name is {{ currentHero.name }}</div>\n\n<!--\nThe null hero's name is {{nullHero.name}}\n\nSee console log:\n  TypeError: Cannot read property 'name' of null in [null]\n-->\n\n<!--No hero, div not displayed, no error -->\n<div *ngIf=\"nullHero\">The null hero's name is {{ nullHero.name }}</div>\n\n<div>The null hero's name is {{ nullHero && nullHero.name }}</div>\n\n<div>\n  <!-- No hero, no problem! -->\n  The null hero's name is {{ nullHero?.name }}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr />\n<h2 id=\"non-null-assertion-operator\">Non-null assertion operator <i>!.</i></h2>\n\n<div>\n  <!--No hero, no text -->\n  <div *ngIf=\"hero\">The hero's name is {{ hero!.name }}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr />\n<h2 id=\"any-type-cast-function\">$any type cast function <i>$any( )</i>.</h2>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>The hero's marker is {{ $any(hero).marker }}</div>\n</div>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>Undeclared members is {{ $any(this).member }}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- TODO: discuss this in the Style binding section -->\n<!-- enums in bindings -->\n<hr />\n<h2 id=\"enums\">Enums in binding</h2>\n\n<p>\n  The name of the Color.Red enum is {{ Color[Color.Red] }}.<br />\n  The current color is {{ Color[color] }} and its number is {{ color }}.<br />\n  <button [style.color]=\"Color[color]\" (click)=\"colorToggle()\">\n    Enum Toggle\n  </button>\n</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->\n\n<div id=\"heroForm\">\n  <form (ngSubmit)=\"onSubmit(heroForm)\" #heroForm=\"ngForm\">\n    <div class=\"form-group\">\n      <label for=\"name\"\n        >Name\n        <input\n          class=\"form-control\"\n          name=\"name\"\n          required\n          [(ngModel)]=\"hero.name\"\n        />\n      </label>\n    </div>\n    <button type=\"submit\" [disabled]=\"!heroForm.form.valid\">Submit</button>\n  </form>\n  <div [hidden]=\"!heroForm.form.valid\">\n    {{ submitMessage }}\n  </div>\n</div>\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->");
}
#[test]
fn test_real_world_component_html_trailing_commanone_format_1_52c0e328() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(80)
        .trailing_comma("none")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("<!-- copied from: https://stackblitz.com/angular/ymdjlgmlavo -->\n\n<a id=\"toc\"></a>\n<h1>Template Syntax</h1>\n<a href=\"#interpolation\">Interpolation</a><br>\n<a href=\"#expression-context\">Expression context</a><br>\n<a href=\"#statement-context\">Statement context</a><br>\n<a href=\"#mental-model\">Mental Model</a><br>\n<a href=\"#buttons\">Buttons</a><br>\n<a href=\"#prop-vs-attrib\">Properties vs. Attributes</a><br>\n<br>\n<a href=\"#property-binding\">Property Binding</a><br>\n<div style=\"margin-left:8px\">\n  <a href=\"#attribute-binding\">Attribute Binding</a><br>\n  <a href=\"#class-binding\">Class Binding</a><br>\n  <a href=\"#style-binding\">Style Binding</a><br>\n</div>\n<br>\n<a href=\"#event-binding\">Event Binding</a><br>\n<a href=\"#two-way\">Two-way Binding</a><br>\n<br>\n<div>Directives</div>\n<div style=\"margin-left:8px\">\n  <a href=\"#ngModel\">NgModel (two-way) Binding</a><br>\n  <a href=\"#ngClass\">NgClass Binding</a><br>\n  <a href=\"#ngStyle\">NgStyle Binding</a><br>\n  <a href=\"#ngIf\">NgIf</a><br>\n  <a href=\"#ngFor\">NgFor</a><br>\n  <div style=\"margin-left:8px\">\n    <a href=\"#ngFor-index\">NgFor with index</a><br>\n    <a href=\"#ngFor-trackBy\">NgFor with trackBy</a><br>\n  </div>\n  <a href=\"#ngSwitch\">NgSwitch</a><br>\n</div>\n<br>\n<a href=\"#ref-vars\">Template reference variables</a><br>\n<a href=\"#inputs-and-outputs\">Inputs and outputs</a><br>\n<a href=\"#pipes\">Pipes</a><br>\n<a href=\"#safe-navigation-operator\">Safe navigation operator <i>?.</i></a><br>\n<a href=\"#non-null-assertion-operator\">Non-null assertion operator <i>!.</i></a><br>\n<a href=\"#enums\">Enums</a><br>\n\n<!-- Interpolation and expressions -->\n<hr><h2 id=\"interpolation\">Interpolation</h2>\n\n<p>My current hero is {{currentHero.name}}</p>\n\n<h3>\n  {{title}}\n  <img src=\"{{heroImageUrl}}\" style=\"height:30px\">\n</h3>\n\n<!-- \"The sum of 1 + 1 is 2\" -->\n<p>The sum of 1 + 1 is {{1 + 1}}</p>\n\n<!-- \"The sum of 1 + 1 is not 4\" -->\n<p>The sum of 1 + 1 is not {{1 + 1 + getVal()}}</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"expression-context\">Expression context</h2>\n\n<p>Component expression context (&#123;&#123;title&#125;&#125;, [hidden]=\"isUnchanged\")</p>\n<div class=\"context\">\n  {{title}}\n  <span [hidden]=\"isUnchanged\">changed</span>\n</div>\n\n\n<p>Template input variable expression context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<ng-template>\n  <div *ngFor=\"let hero of heroes\">{{hero.name}}</div>\n</ng-template>\n\n<p>Template reference variable expression context (#heroInput)</p>\n<div (keyup)=\"0\" class=\"context\">\n  Type something:\n  <input #heroInput> {{heroInput.value}}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"statement-context\">Statement context</h2>\n\n<p>Component statement context ( (click)=\"onSave() )\n<div class=\"context\">\n  <button (click)=\"deleteHero()\">Delete hero</button>\n</div>\n\n<p>Template $event statement context</p>\n<div class=\"context\">\n  <button (click)=\"onSave($event)\">Save</button>\n</div>\n\n<p>Template input variable statement context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<div class=\"context\">\n  <button *ngFor=\"let hero of heroes\" (click)=\"deleteHero(hero)\">{{hero.name}}</button>\n</div>\n\n<p>Template reference variable statement context (#heroForm)</p>\n<div class=\"context\">\n  <form #heroForm (ngSubmit)=\"onSubmit(heroForm)\"> ... </form>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- New Mental Model -->\n<hr><h2 id=\"mental-model\">New Mental Model</h2>\n\n<!--<img src=\"http://www.wpclipart.com/cartoon/people/hero/hero_silhoutte_T.png\">-->\n<!-- Public Domain terms of use: http://www.wpclipart.com/terms.html -->\n<div class=\"special\">Mental Model</div>\n<img src=\"assets/images/hero.png\">\n<button disabled>Save</button>\n<br><br>\n\n<div>\n  <!-- Normal HTML -->\n  <div class=\"special\">Mental Model</div>\n  <!-- Wow! A new element! -->\n  <app-hero-detail></app-hero-detail>\n</div>\n<br><br>\n\n<div>\n  <!-- Bind button disabled state to \\`isUnchanged\\` property -->\n  <button [disabled]=\"isUnchanged\">Save</button>\n</div>\n<br><br>\n\n<div>\n  <img [src]=\"heroImageUrl\">\n  <app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n  <div [ngClass]=\"{'special': isSpecial}\"></div>\n</div>\n<br><br>\n\n<button (click)=\"onSave()\">Save</button>\n<app-hero-detail (deleteRequest)=\"deleteHero()\"></app-hero-detail>\n<div (myClick)=\"clicked=$event\" clickable>click me</div>\n{{clicked}}\n<br><br>\n\n<div>\n  Hero Name:\n  <input [(ngModel)]=\"name\">\n  {{name}}\n</div>\n<br><br>\n\n<button [attr.aria-label]=\"help\">help</button>\n<br><br>\n\n<div [class.special]=\"isSpecial\">Special</div>\n<br><br>\n\n<button [style.color]=\"isSpecial ? 'red' : 'green'\">\nbutton</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property vs. attribute -->\n<hr><h2 id=\"prop-vs-attrib\">Property vs. Attribute (img examples)</h2>\n<!-- examine the following <img> tag in the browser tools -->\n<img src=\"images/ng-logo.png\"\n    [src]=\"heroImageUrl\">\n\n<br><br>\n\n<img [src]=\"iconUrl\"/>\n<img bind-src=\"heroImageUrl\"/>\n<img [attr.src]=\"villainImageUrl\"/>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- buttons -->\n<hr><h2 id=\"buttons\">Buttons</h2>\n\n<button>Enabled (but does nothing)</button>\n<button disabled>Disabled</button>\n<button disabled=false>Still disabled</button>\n<br><br>\n<button disabled>disabled by attribute</button>\n<button [disabled]=\"isUnchanged\">disabled by property binding</button>\n<br><br>\n<button bind-disabled=\"isUnchanged\" on-click=\"onSave($event)\">Disabled Cancel</button>\n<button [disabled]=\"!canSave\" (click)=\"onSave($event)\">Enabled Save</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property binding -->\n<hr><h2 id=\"property-binding\">Property Binding</h2>\n\n<img [src]=\"heroImageUrl\">\n<button [disabled]=\"isUnchanged\">Cancel is disabled</button>\n<div [ngClass]=\"classes\">[ngClass] binding to the classes property</div>\n<app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n<img bind-src=\"heroImageUrl\">\n\n<!-- ERROR: HeroDetailComponent.hero expects a\n     Hero object, not the string \"currentHero\" -->\n<div *ngIf=\"false\">\n  <app-hero-detail hero=\"currentHero\"></app-hero-detail>\n</div>\n<app-hero-detail prefix=\"You are my\" [hero]=\"currentHero\"></app-hero-detail>\n\n<p><img src=\"{{heroImageUrl}}\"> is the <i>interpolated</i> image.</p>\n<p><img [src]=\"heroImageUrl\"> is the <i>property bound</i> image.</p>\n\n<p><span>\"{{title}}\" is the <i>interpolated</i> title.</span></p>\n<p>\"<span [innerHTML]=\"title\"></span>\" is the <i>property bound</i> title.</p>\n\n<!--\n  Angular generates warnings for these two lines as it sanitizes them\n  WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).\n -->\n<p><span>\"{{evilTitle}}\" is the <i>interpolated</i> evil title.</span></p>\n<p>\"<span [innerHTML]=\"evilTitle\"></span>\" is the <i>property bound</i> evil title.</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- attribute binding -->\n<hr><h2 id=\"attribute-binding\">Attribute Binding</h2>\n\n<!--  create and set a colspan attribute -->\n<table border=1>\n  <!--  expression calculates colspan=2 -->\n  <tr><td [attr.colspan]=\"1 + 1\">One-Two</td></tr>\n\n  <!-- ERROR: There is no \\`colspan\\` property to set!\n    <tr><td colspan=\"{{1 + 1}}\">Three-Four</td></tr>\n  -->\n\n  <tr><td>Five</td><td>Six</td></tr>\n</table>\n\n<br>\n<!-- create and set an aria attribute for assistive technology -->\n<button [attr.aria-label]=\"actionName\">{{actionName}} with Aria</button>\n<br><br>\n\n<!-- The following effects are not discussed in the chapter -->\n<div>\n  <!-- any use of [attr.disabled] creates the disabled attribute -->\n  <button [attr.disabled]=\"isUnchanged\">Disabled</button>\n\n  <button [attr.disabled]=\"!isUnchanged\">Disabled as well</button>\n\n  <!-- we'd have to remove it with property binding -->\n  <button disabled [disabled]=\"false\">Enabled (but inert)</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- class binding -->\n<hr><h2 id=\"class-binding\">Class Binding</h2>\n\n<!-- standard class attribute setting  -->\n<div class=\"bad curly special\">Bad curly special</div>\n\n<!-- reset/override all class names with a binding  -->\n<div class=\"bad curly special\"\n     [class]=\"badCurly\">Bad curly</div>\n\n<!-- toggle the \"special\" class on/off with a property -->\n<div [class.special]=\"isSpecial\">The class binding is special</div>\n\n<!-- binding to \\`class.special\\` trumps the class attribute -->\n<div class=\"special\"\n     [class.special]=\"!isSpecial\">This one is not so special</div>\n\n<div bind-class.special=\"isSpecial\">This class binding is special too</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!--style binding -->\n<hr><h2 id=\"style-binding\">Style Binding</h2>\n\n<button [style.color]=\"isSpecial ? 'red': 'green'\">Red</button>\n<button [style.background-color]=\"canSave ? 'cyan': 'grey'\" >Save</button>\n\n<button [style.font-size.em]=\"isSpecial ? 3 : 1\" >Big</button>\n<button [style.font-size.%]=\"!isSpecial ? 150 : 50\" >Small</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- event binding -->\n<hr><h2 id=\"event-binding\">Event Binding</h2>\n\n<button (click)=\"onSave()\">Save</button>\n\n<button on-click=\"onSave()\">On Save</button>\n\n<div>\n<!-- \\`myClick\\` is an event on the custom \\`ClickDirective\\` -->\n<div (myClick)=\"clickMessage=$event\" clickable>click with myClick</div>\n{{clickMessage}}\n</div>\n\n\n<!-- binding to a nested component -->\n<app-hero-detail (deleteRequest)=\"deleteHero($event)\" [hero]=\"currentHero\"></app-hero-detail>\n<br>\n\n<app-big-hero-detail\n    (deleteRequest)=\"deleteHero($event)\"\n    [hero]=\"currentHero\">\n</app-big-hero-detail>\n\n<div class=\"parent-div\" (click)=\"onClickMe($event)\" clickable>Click me\n  <div class=\"child-div\">Click me too!</div>\n</div>\n\n<!-- Will save only once -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave($event)\">Save, no propagation</button>\n</div>\n\n<!-- Will save twice -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave()\">Save w/ propagation</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"two-way\">Two-way Binding</h2>\n<div id=\"two-way-1\">\n  <app-sizer [(size)]=\"fontSizePx\"></app-sizer>\n  <div [style.font-size.px]=\"fontSizePx\">Resizable Text</div>\n  <label>FontSize (px): <input [(ngModel)]=\"fontSizePx\"></label>\n</div>\n<br>\n<div id=\"two-way-2\">\n  <h3>De-sugared two-way binding</h3>\n  <app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx=$event\"></app-sizer>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Two way data binding unwound;\n    passing the changed display value to the event handler via \\`$event\\` -->\n<hr><h2 id=\"ngModel\">NgModel (two-way) Binding</h2>\n\n<h3>Result: {{currentHero.name}}</h3>\n\n<input [value]=\"currentHero.name\"\n       (input)=\"currentHero.name=$event.target.value\" >\nwithout NgModel\n<br>\n<input [(ngModel)]=\"currentHero.name\">\n[(ngModel)]\n<br>\n<input bindon-ngModel=\"currentHero.name\">\nbindon-ngModel\n<br>\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"currentHero.name=$event\">\n(ngModelChange)=\"...name=$event\"\n<br>\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"setUppercaseName($event)\">\n(ngModelChange)=\"setUppercaseName($event)\"\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgClass binding -->\n<hr><h2 id=\"ngClass\">NgClass Binding</h2>\n\n<p>currentClasses is {{currentClasses | json}}</p>\n<div [ngClass]=\"currentClasses\">This div is initially saveable, unchanged, and special</div>\n\n<!-- not used in chapter -->\n<br>\n<label>saveable   <input type=\"checkbox\" [(ngModel)]=\"canSave\"></label> |\n<label>modified:  <input type=\"checkbox\" [value]=\"!isUnchanged\" (change)=\"isUnchanged=!isUnchanged\"></label> |\n<label>special:   <input type=\"checkbox\" [(ngModel)]=\"isSpecial\"></label>\n<button (click)=\"setCurrentClasses()\">Refresh currentClasses</button>\n<br><br>\n<div [ngClass]=\"currentClasses\">\n  This div should be {{ canSave ? \"\": \"not\"}} saveable,\n                  {{ isUnchanged ? \"unchanged\" : \"modified\" }} and,\n                  {{ isSpecial ? \"\": \"not\"}} special after clicking \"Refresh\".</div>\n<br><br>\n\n<div [ngClass]=\"isSpecial ? 'special' : ''\">This div is special</div>\n\n<div class=\"bad curly special\">Bad curly special</div>\n<div [ngClass]=\"{'bad':false, 'curly':true, 'special':true}\">Curly special</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgStyle binding -->\n<hr><h2 id=\"ngStyle\">NgStyle Binding</h2>\n\n<div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\" >\n  This div is x-large or smaller.\n</div>\n\n<h3>[ngStyle] binding to currentStyles - CSS property names</h3>\n<p>currentStyles is {{currentStyles | json}}</p>\n<div [ngStyle]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n</div>\n\n<!-- not used in chapter -->\n<br>\n<label>italic: <input type=\"checkbox\" [(ngModel)]=\"canSave\"></label> |\n<label>normal: <input type=\"checkbox\" [(ngModel)]=\"isUnchanged\"></label> |\n<label>xlarge: <input type=\"checkbox\" [(ngModel)]=\"isSpecial\"></label>\n<button (click)=\"setCurrentStyles()\">Refresh currentStyles</button>\n<br><br>\n<div [ngStyle]=\"currentStyles\">\n  This div should be {{ canSave ? \"italic\": \"plain\"}},\n                  {{ isUnchanged ? \"normal weight\" : \"bold\" }} and,\n                  {{ isSpecial ? \"extra large\": \"normal size\"}} after clicking \"Refresh\".</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgIf binding -->\n<hr><h2 id=\"ngIf\">NgIf Binding</h2>\n\n<app-hero-detail *ngIf=\"isActive\"></app-hero-detail>\n\n<div *ngIf=\"currentHero\">Hello, {{currentHero.name}}</div>\n<div *ngIf=\"nullHero\">Hello, {{nullHero.name}}</div>\n\n<!-- NgIf binding with template (no *) -->\n\n<ng-template [ngIf]=\"currentHero\">Add {{currentHero.name}} with template</ng-template>\n\n<!-- Does not show because isActive is false! -->\n<div>Hero Detail removed from DOM (via template) because isActive is false</div>\n<ng-template [ngIf]=\"isActive\">\n  <app-hero-detail></app-hero-detail>\n</ng-template>\n\n<!-- isSpecial is true -->\n<div [class.hidden]=\"!isSpecial\">Show with class</div>\n<div [class.hidden]=\"isSpecial\">Hide with class</div>\n\n<!-- HeroDetail is in the DOM but hidden -->\n<app-hero-detail [class.hidden]=\"isSpecial\"></app-hero-detail>\n\n<div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with style</div>\n<div [style.display]=\"isSpecial ? 'none'  : 'block'\">Hide with style</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgFor binding -->\n<hr><h2 id=\"ngFor\">NgFor Binding</h2>\n\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes\">{{hero.name}}</div>\n</div>\n<br>\n\n<div class=\"box\">\n  <!-- *ngFor w/ hero-detail Component -->\n  <app-hero-detail *ngFor=\"let hero of heroes\" [hero]=\"hero\"></app-hero-detail>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-index\">*ngFor with index</h4>\n<p>with <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; let i=index\">{{i + 1}} - {{hero.name}}</div>\n</div>\n\n<p>with <i>comma</i> separator</p>\n<div class=\"box\">\n  <!-- Ex: \"1 - Hercules\" -->\n  <div *ngFor=\"let hero of heroes, let i=index\">{{i + 1}} - {{hero.name}}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-trackBy\">*ngFor trackBy</h4>\n<button (click)=\"resetHeroes()\">Reset heroes</button>\n<button (click)=\"changeIds()\">Change ids</button>\n<button (click)=\"clearTrackByCounts()\">Clear counts</button>\n\n<p><i>without</i> trackBy</p>\n<div class=\"box\">\n  <div #noTrackBy *ngFor=\"let hero of heroes\">({{hero.id}}) {{hero.name}}</div>\n\n  <div id=\"noTrackByCnt\" *ngIf=\"heroesNoTrackByCount\" >\n    Hero DOM elements change #{{heroesNoTrackByCount}} without trackBy\n  </div>\n</div>\n\n<p>with trackBy</p>\n<div class=\"box\">\n  <div #withTrackBy *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n\n  <div id=\"withTrackByCnt\" *ngIf=\"heroesWithTrackByCount\">\n    Hero DOM elements change #{{heroesWithTrackByCount}} with trackBy\n  </div>\n</div>\n\n<br><br><br>\n\n<p>with trackBy and <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{hero.id}}) {{hero.name}}\n  </div>\n</div>\n\n<p>with trackBy and <i>comma</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes, trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<p>with trackBy and <i>space</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<p>with <i>generic</i> trackById function</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes, trackBy: trackById\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgSwitch binding -->\n<hr><h2 id=\"ngSwitch\">NgSwitch Binding</h2>\n\n<p>Pick your favorite hero</p>\n<div>\n  <label *ngFor=\"let h of heroes\">\n    <input type=\"radio\" name=\"heroes\" [(ngModel)]=\"currentHero\" [value]=\"h\">{{h.name}}\n  </label>\n</div>\n\n<div [ngSwitch]=\"currentHero.emotion\">\n  <app-happy-hero    *ngSwitchCase=\"'happy'\"    [hero]=\"currentHero\"></app-happy-hero>\n  <app-sad-hero      *ngSwitchCase=\"'sad'\"      [hero]=\"currentHero\"></app-sad-hero>\n  <app-confused-hero *ngSwitchCase=\"'confused'\" [hero]=\"currentHero\"></app-confused-hero>\n  <div *ngSwitchCase=\"'confused'\">Are you as confused as {{currentHero.name}}?</div>\n  <app-unknown-hero  *ngSwitchDefault           [hero]=\"currentHero\"></app-unknown-hero>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- template reference variable -->\n<hr><h2 id=\"ref-vars\">Template reference variables</h2>\n\n<input #phone placeholder=\"phone number\">\n\n<!-- lots of other elements -->\n\n<!-- phone refers to the input element; pass its \\`value\\` to an event handler -->\n<button (click)=\"callPhone(phone.value)\">Call</button>\n\n<input ref-fax placeholder=\"fax number\">\n<button (click)=\"callFax(fax.value)\">Fax</button>\n\n<!-- btn refers to the button element; show its disabled state -->\n<button #btn disabled [innerHTML]=\"'disabled by attribute: '+btn.disabled\"></button>\n\n<h4>Example Form</h4>\n<app-hero-form [hero]=\"currentHero\"></app-hero-form>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- inputs and output -->\n<hr><h2 id=\"inputs-and-outputs\">Inputs and Outputs</h2>\n\n<img [src]=\"iconUrl\"/>\n<button (click)=\"onSave()\">Save</button>\n\n<app-hero-detail [hero]=\"currentHero\" (deleteRequest)=\"deleteHero($event)\">\n</app-hero-detail>\n\n<div (myClick)=\"clickMessage2=$event\" clickable>myClick2</div>\n{{clickMessage2}}\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Pipes -->\n<hr><h2 id=\"pipes\">Pipes</h2>\n\n<div>Title through uppercase pipe: {{title | uppercase}}</div>\n\n<!-- Pipe chaining: convert title to uppercase, then to lowercase -->\n<div>\n  Title through a pipe chain:\n  {{title | uppercase | lowercase}}\n</div>\n\n<!-- pipe with configuration argument => \"February 25, 1970\" -->\n<div>Birthdate: {{currentHero?.birthdate | date:'longDate'}}</div>\n\n<div>{{currentHero | json}}</div>\n\n<div>Birthdate: {{(currentHero?.birthdate | date:'longDate') | uppercase}}</div>\n\n<div>\n  <!-- pipe price to USD and display the $ symbol -->\n  <label>Price: </label>{{product.price | currency:'USD':true}}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Null values and the safe navigation operator -->\n<hr><h2 id=\"safe-navigation-operator\">Safe navigation operator <i>?.</i></h2>\n\n<div>\n  The title is {{title}}\n</div>\n\n<div>\n  The current hero's name is {{currentHero?.name}}\n</div>\n\n<div>\n  The current hero's name is {{currentHero.name}}\n</div>\n\n\n<!--\nThe null hero's name is {{nullHero.name}}\n\nSee console log:\n  TypeError: Cannot read property 'name' of null in [null]\n-->\n\n<!--No hero, div not displayed, no error -->\n<div *ngIf=\"nullHero\">The null hero's name is {{nullHero.name}}</div>\n\n<div>\nThe null hero's name is {{nullHero && nullHero.name}}\n</div>\n\n<div>\n  <!-- No hero, no problem! -->\n  The null hero's name is {{nullHero?.name}}\n</div>\n\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr><h2 id=\"non-null-assertion-operator\">Non-null assertion operator <i>!.</i></h2>\n\n<div>\n  <!--No hero, no text -->\n  <div *ngIf=\"hero\">\n    The hero's name is {{hero!.name}}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr><h2 id=\"any-type-cast-function\">$any type cast function <i>$any( )</i>.</h2>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>\n    The hero's marker is {{$any(hero).marker}}\n  </div>\n</div>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>\n    Undeclared members is {{$any(this).member}}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- TODO: discuss this in the Style binding section -->\n<!-- enums in bindings -->\n<hr><h2 id=\"enums\">Enums in binding</h2>\n\n<p>\n  The name of the Color.Red enum is {{Color[Color.Red]}}.<br>\n  The current color is {{Color[color]}} and its number is {{color}}.<br>\n  <button [style.color]=\"Color[color]\" (click)=\"colorToggle()\">Enum Toggle</button>\n</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->\n\n<div id=\"heroForm\">\n  <form (ngSubmit)=\"onSubmit(heroForm)\" #heroForm=\"ngForm\">\n    <div class=\"form-group\">\n      <label for=\"name\">Name\n        <input class=\"form-control\" name=\"name\" required [(ngModel)]=\"hero.name\">\n      </label>\n    </div>\n    <button type=\"submit\" [disabled]=\"!heroForm.form.valid\">Submit</button>\n  </form>\n  <div [hidden]=\"!heroForm.form.valid\">\n    {{submitMessage}}\n  </div>\n</div>\n\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<!-- copied from: https://stackblitz.com/angular/ymdjlgmlavo -->\n\n<a id=\"toc\"></a>\n<h1>Template Syntax</h1>\n<a href=\"#interpolation\">Interpolation</a><br />\n<a href=\"#expression-context\">Expression context</a><br />\n<a href=\"#statement-context\">Statement context</a><br />\n<a href=\"#mental-model\">Mental Model</a><br />\n<a href=\"#buttons\">Buttons</a><br />\n<a href=\"#prop-vs-attrib\">Properties vs. Attributes</a><br />\n<br />\n<a href=\"#property-binding\">Property Binding</a><br />\n<div style=\"margin-left: 8px\">\n  <a href=\"#attribute-binding\">Attribute Binding</a><br />\n  <a href=\"#class-binding\">Class Binding</a><br />\n  <a href=\"#style-binding\">Style Binding</a><br />\n</div>\n<br />\n<a href=\"#event-binding\">Event Binding</a><br />\n<a href=\"#two-way\">Two-way Binding</a><br />\n<br />\n<div>Directives</div>\n<div style=\"margin-left: 8px\">\n  <a href=\"#ngModel\">NgModel (two-way) Binding</a><br />\n  <a href=\"#ngClass\">NgClass Binding</a><br />\n  <a href=\"#ngStyle\">NgStyle Binding</a><br />\n  <a href=\"#ngIf\">NgIf</a><br />\n  <a href=\"#ngFor\">NgFor</a><br />\n  <div style=\"margin-left: 8px\">\n    <a href=\"#ngFor-index\">NgFor with index</a><br />\n    <a href=\"#ngFor-trackBy\">NgFor with trackBy</a><br />\n  </div>\n  <a href=\"#ngSwitch\">NgSwitch</a><br />\n</div>\n<br />\n<a href=\"#ref-vars\">Template reference variables</a><br />\n<a href=\"#inputs-and-outputs\">Inputs and outputs</a><br />\n<a href=\"#pipes\">Pipes</a><br />\n<a href=\"#safe-navigation-operator\">Safe navigation operator <i>?.</i></a\n><br />\n<a href=\"#non-null-assertion-operator\">Non-null assertion operator <i>!.</i></a\n><br />\n<a href=\"#enums\">Enums</a><br />\n\n<!-- Interpolation and expressions -->\n<hr />\n<h2 id=\"interpolation\">Interpolation</h2>\n\n<p>My current hero is {{ currentHero.name }}</p>\n\n<h3>\n  {{ title }}\n  <img src=\"{{ heroImageUrl }}\" style=\"height: 30px\" />\n</h3>\n\n<!-- \"The sum of 1 + 1 is 2\" -->\n<p>The sum of 1 + 1 is {{ 1 + 1 }}</p>\n\n<!-- \"The sum of 1 + 1 is not 4\" -->\n<p>The sum of 1 + 1 is not {{ 1 + 1 + getVal() }}</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr />\n<h2 id=\"expression-context\">Expression context</h2>\n\n<p>\n  Component expression context (&#123;&#123;title&#125;&#125;,\n  [hidden]=\"isUnchanged\")\n</p>\n<div class=\"context\">\n  {{ title }}\n  <span [hidden]=\"isUnchanged\">changed</span>\n</div>\n\n<p>Template input variable expression context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<ng-template>\n  <div *ngFor=\"let hero of heroes\">{{ hero.name }}</div>\n</ng-template>\n\n<p>Template reference variable expression context (#heroInput)</p>\n<div (keyup)=\"(0)\" class=\"context\">\n  Type something:\n  <input #heroInput /> {{ heroInput.value }}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr />\n<h2 id=\"statement-context\">Statement context</h2>\n\n<p>Component statement context ( (click)=\"onSave() )</p>\n<div class=\"context\">\n  <button (click)=\"deleteHero()\">Delete hero</button>\n</div>\n\n<p>Template $event statement context</p>\n<div class=\"context\">\n  <button (click)=\"onSave($event)\">Save</button>\n</div>\n\n<p>Template input variable statement context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<div class=\"context\">\n  <button *ngFor=\"let hero of heroes\" (click)=\"deleteHero(hero)\">\n    {{ hero.name }}\n  </button>\n</div>\n\n<p>Template reference variable statement context (#heroForm)</p>\n<div class=\"context\">\n  <form #heroForm (ngSubmit)=\"onSubmit(heroForm)\">...</form>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- New Mental Model -->\n<hr />\n<h2 id=\"mental-model\">New Mental Model</h2>\n\n<!--<img src=\"http://www.wpclipart.com/cartoon/people/hero/hero_silhoutte_T.png\">-->\n<!-- Public Domain terms of use: http://www.wpclipart.com/terms.html -->\n<div class=\"special\">Mental Model</div>\n<img src=\"assets/images/hero.png\" />\n<button disabled>Save</button>\n<br /><br />\n\n<div>\n  <!-- Normal HTML -->\n  <div class=\"special\">Mental Model</div>\n  <!-- Wow! A new element! -->\n  <app-hero-detail></app-hero-detail>\n</div>\n<br /><br />\n\n<div>\n  <!-- Bind button disabled state to \\`isUnchanged\\` property -->\n  <button [disabled]=\"isUnchanged\">Save</button>\n</div>\n<br /><br />\n\n<div>\n  <img [src]=\"heroImageUrl\" />\n  <app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n  <div [ngClass]=\"{ special: isSpecial }\"></div>\n</div>\n<br /><br />\n\n<button (click)=\"onSave()\">Save</button>\n<app-hero-detail (deleteRequest)=\"deleteHero()\"></app-hero-detail>\n<div (myClick)=\"clicked = $event\" clickable>click me</div>\n{{ clicked }}\n<br /><br />\n\n<div>\n  Hero Name:\n  <input [(ngModel)]=\"name\" />\n  {{ name }}\n</div>\n<br /><br />\n\n<button [attr.aria-label]=\"help\">help</button>\n<br /><br />\n\n<div [class.special]=\"isSpecial\">Special</div>\n<br /><br />\n\n<button [style.color]=\"isSpecial ? 'red' : 'green'\">button</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property vs. attribute -->\n<hr />\n<h2 id=\"prop-vs-attrib\">Property vs. Attribute (img examples)</h2>\n<!-- examine the following <img> tag in the browser tools -->\n<img src=\"images/ng-logo.png\" [src]=\"heroImageUrl\" />\n\n<br /><br />\n\n<img [src]=\"iconUrl\" />\n<img bind-src=\"heroImageUrl\" />\n<img [attr.src]=\"villainImageUrl\" />\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- buttons -->\n<hr />\n<h2 id=\"buttons\">Buttons</h2>\n\n<button>Enabled (but does nothing)</button>\n<button disabled>Disabled</button>\n<button disabled=\"false\">Still disabled</button>\n<br /><br />\n<button disabled>disabled by attribute</button>\n<button [disabled]=\"isUnchanged\">disabled by property binding</button>\n<br /><br />\n<button bind-disabled=\"isUnchanged\" on-click=\"onSave($event)\">\n  Disabled Cancel\n</button>\n<button [disabled]=\"!canSave\" (click)=\"onSave($event)\">Enabled Save</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property binding -->\n<hr />\n<h2 id=\"property-binding\">Property Binding</h2>\n\n<img [src]=\"heroImageUrl\" />\n<button [disabled]=\"isUnchanged\">Cancel is disabled</button>\n<div [ngClass]=\"classes\">[ngClass] binding to the classes property</div>\n<app-hero-detail [hero]=\"currentHero\"></app-hero-detail>\n<img bind-src=\"heroImageUrl\" />\n\n<!-- ERROR: HeroDetailComponent.hero expects a\n     Hero object, not the string \"currentHero\" -->\n<div *ngIf=\"false\">\n  <app-hero-detail hero=\"currentHero\"></app-hero-detail>\n</div>\n<app-hero-detail prefix=\"You are my\" [hero]=\"currentHero\"></app-hero-detail>\n\n<p><img src=\"{{ heroImageUrl }}\" /> is the <i>interpolated</i> image.</p>\n<p><img [src]=\"heroImageUrl\" /> is the <i>property bound</i> image.</p>\n\n<p>\n  <span>\"{{ title }}\" is the <i>interpolated</i> title.</span>\n</p>\n<p>\"<span [innerHTML]=\"title\"></span>\" is the <i>property bound</i> title.</p>\n\n<!--\n  Angular generates warnings for these two lines as it sanitizes them\n  WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).\n -->\n<p>\n  <span>\"{{ evilTitle }}\" is the <i>interpolated</i> evil title.</span>\n</p>\n<p>\n  \"<span [innerHTML]=\"evilTitle\"></span>\" is the <i>property bound</i> evil\n  title.\n</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- attribute binding -->\n<hr />\n<h2 id=\"attribute-binding\">Attribute Binding</h2>\n\n<!--  create and set a colspan attribute -->\n<table border=\"1\">\n  <!--  expression calculates colspan=2 -->\n  <tr>\n    <td [attr.colspan]=\"1 + 1\">One-Two</td>\n  </tr>\n\n  <!-- ERROR: There is no \\`colspan\\` property to set!\n    <tr><td colspan=\"{{1 + 1}}\">Three-Four</td></tr>\n  -->\n\n  <tr>\n    <td>Five</td>\n    <td>Six</td>\n  </tr>\n</table>\n\n<br />\n<!-- create and set an aria attribute for assistive technology -->\n<button [attr.aria-label]=\"actionName\">{{ actionName }} with Aria</button>\n<br /><br />\n\n<!-- The following effects are not discussed in the chapter -->\n<div>\n  <!-- any use of [attr.disabled] creates the disabled attribute -->\n  <button [attr.disabled]=\"isUnchanged\">Disabled</button>\n\n  <button [attr.disabled]=\"!isUnchanged\">Disabled as well</button>\n\n  <!-- we'd have to remove it with property binding -->\n  <button disabled [disabled]=\"false\">Enabled (but inert)</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- class binding -->\n<hr />\n<h2 id=\"class-binding\">Class Binding</h2>\n\n<!-- standard class attribute setting  -->\n<div class=\"bad curly special\">Bad curly special</div>\n\n<!-- reset/override all class names with a binding  -->\n<div class=\"bad curly special\" [class]=\"badCurly\">Bad curly</div>\n\n<!-- toggle the \"special\" class on/off with a property -->\n<div [class.special]=\"isSpecial\">The class binding is special</div>\n\n<!-- binding to \\`class.special\\` trumps the class attribute -->\n<div class=\"special\" [class.special]=\"!isSpecial\">\n  This one is not so special\n</div>\n\n<div bind-class.special=\"isSpecial\">This class binding is special too</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!--style binding -->\n<hr />\n<h2 id=\"style-binding\">Style Binding</h2>\n\n<button [style.color]=\"isSpecial ? 'red' : 'green'\">Red</button>\n<button [style.background-color]=\"canSave ? 'cyan' : 'grey'\">Save</button>\n\n<button [style.font-size.em]=\"isSpecial ? 3 : 1\">Big</button>\n<button [style.font-size.%]=\"!isSpecial ? 150 : 50\">Small</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- event binding -->\n<hr />\n<h2 id=\"event-binding\">Event Binding</h2>\n\n<button (click)=\"onSave()\">Save</button>\n\n<button on-click=\"onSave()\">On Save</button>\n\n<div>\n  <!-- \\`myClick\\` is an event on the custom \\`ClickDirective\\` -->\n  <div (myClick)=\"clickMessage = $event\" clickable>click with myClick</div>\n  {{ clickMessage }}\n</div>\n\n<!-- binding to a nested component -->\n<app-hero-detail\n  (deleteRequest)=\"deleteHero($event)\"\n  [hero]=\"currentHero\"\n></app-hero-detail>\n<br />\n\n<app-big-hero-detail (deleteRequest)=\"deleteHero($event)\" [hero]=\"currentHero\">\n</app-big-hero-detail>\n\n<div class=\"parent-div\" (click)=\"onClickMe($event)\" clickable>\n  Click me\n  <div class=\"child-div\">Click me too!</div>\n</div>\n\n<!-- Will save only once -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave($event)\">Save, no propagation</button>\n</div>\n\n<!-- Will save twice -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave()\">Save w/ propagation</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr />\n<h2 id=\"two-way\">Two-way Binding</h2>\n<div id=\"two-way-1\">\n  <app-sizer [(size)]=\"fontSizePx\"></app-sizer>\n  <div [style.font-size.px]=\"fontSizePx\">Resizable Text</div>\n  <label>FontSize (px): <input [(ngModel)]=\"fontSizePx\" /></label>\n</div>\n<br />\n<div id=\"two-way-2\">\n  <h3>De-sugared two-way binding</h3>\n  <app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx = $event\"></app-sizer>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Two way data binding unwound;\n    passing the changed display value to the event handler via \\`$event\\` -->\n<hr />\n<h2 id=\"ngModel\">NgModel (two-way) Binding</h2>\n\n<h3>Result: {{ currentHero.name }}</h3>\n\n<input\n  [value]=\"currentHero.name\"\n  (input)=\"currentHero.name = $event.target.value\"\n/>\nwithout NgModel\n<br />\n<input [(ngModel)]=\"currentHero.name\" />\n[(ngModel)]\n<br />\n<input bindon-ngModel=\"currentHero.name\" />\nbindon-ngModel\n<br />\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"currentHero.name = $event\"\n/>\n(ngModelChange)=\"...name=$event\"\n<br />\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"setUppercaseName($event)\"\n/>\n(ngModelChange)=\"setUppercaseName($event)\"\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgClass binding -->\n<hr />\n<h2 id=\"ngClass\">NgClass Binding</h2>\n\n<p>currentClasses is {{ currentClasses | json }}</p>\n<div [ngClass]=\"currentClasses\">\n  This div is initially saveable, unchanged, and special\n</div>\n\n<!-- not used in chapter -->\n<br />\n<label>saveable <input type=\"checkbox\" [(ngModel)]=\"canSave\" /></label> |\n<label\n  >modified:\n  <input\n    type=\"checkbox\"\n    [value]=\"!isUnchanged\"\n    (change)=\"isUnchanged = !isUnchanged\"\n/></label>\n|\n<label>special: <input type=\"checkbox\" [(ngModel)]=\"isSpecial\" /></label>\n<button (click)=\"setCurrentClasses()\">Refresh currentClasses</button>\n<br /><br />\n<div [ngClass]=\"currentClasses\">\n  This div should be {{ canSave ? \"\" : \"not\" }} saveable,\n  {{ isUnchanged ? \"unchanged\" : \"modified\" }} and,\n  {{ isSpecial ? \"\" : \"not\" }} special after clicking \"Refresh\".\n</div>\n<br /><br />\n\n<div [ngClass]=\"isSpecial ? 'special' : ''\">This div is special</div>\n\n<div class=\"bad curly special\">Bad curly special</div>\n<div [ngClass]=\"{ bad: false, curly: true, special: true }\">Curly special</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgStyle binding -->\n<hr />\n<h2 id=\"ngStyle\">NgStyle Binding</h2>\n\n<div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\">\n  This div is x-large or smaller.\n</div>\n\n<h3>[ngStyle] binding to currentStyles - CSS property names</h3>\n<p>currentStyles is {{ currentStyles | json }}</p>\n<div [ngStyle]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n</div>\n\n<!-- not used in chapter -->\n<br />\n<label>italic: <input type=\"checkbox\" [(ngModel)]=\"canSave\" /></label> |\n<label>normal: <input type=\"checkbox\" [(ngModel)]=\"isUnchanged\" /></label> |\n<label>xlarge: <input type=\"checkbox\" [(ngModel)]=\"isSpecial\" /></label>\n<button (click)=\"setCurrentStyles()\">Refresh currentStyles</button>\n<br /><br />\n<div [ngStyle]=\"currentStyles\">\n  This div should be {{ canSave ? \"italic\" : \"plain\" }},\n  {{ isUnchanged ? \"normal weight\" : \"bold\" }} and,\n  {{ isSpecial ? \"extra large\" : \"normal size\" }} after clicking \"Refresh\".\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgIf binding -->\n<hr />\n<h2 id=\"ngIf\">NgIf Binding</h2>\n\n<app-hero-detail *ngIf=\"isActive\"></app-hero-detail>\n\n<div *ngIf=\"currentHero\">Hello, {{ currentHero.name }}</div>\n<div *ngIf=\"nullHero\">Hello, {{ nullHero.name }}</div>\n\n<!-- NgIf binding with template (no *) -->\n\n<ng-template [ngIf]=\"currentHero\"\n  >Add {{ currentHero.name }} with template</ng-template\n>\n\n<!-- Does not show because isActive is false! -->\n<div>Hero Detail removed from DOM (via template) because isActive is false</div>\n<ng-template [ngIf]=\"isActive\">\n  <app-hero-detail></app-hero-detail>\n</ng-template>\n\n<!-- isSpecial is true -->\n<div [class.hidden]=\"!isSpecial\">Show with class</div>\n<div [class.hidden]=\"isSpecial\">Hide with class</div>\n\n<!-- HeroDetail is in the DOM but hidden -->\n<app-hero-detail [class.hidden]=\"isSpecial\"></app-hero-detail>\n\n<div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with style</div>\n<div [style.display]=\"isSpecial ? 'none' : 'block'\">Hide with style</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgFor binding -->\n<hr />\n<h2 id=\"ngFor\">NgFor Binding</h2>\n\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes\">{{ hero.name }}</div>\n</div>\n<br />\n\n<div class=\"box\">\n  <!-- *ngFor w/ hero-detail Component -->\n  <app-hero-detail *ngFor=\"let hero of heroes\" [hero]=\"hero\"></app-hero-detail>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-index\">*ngFor with index</h4>\n<p>with <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; let i = index\">\n    {{ i + 1 }} - {{ hero.name }}\n  </div>\n</div>\n\n<p>with <i>comma</i> separator</p>\n<div class=\"box\">\n  <!-- Ex: \"1 - Hercules\" -->\n  <div *ngFor=\"let hero of heroes; let i = index\">\n    {{ i + 1 }} - {{ hero.name }}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-trackBy\">*ngFor trackBy</h4>\n<button (click)=\"resetHeroes()\">Reset heroes</button>\n<button (click)=\"changeIds()\">Change ids</button>\n<button (click)=\"clearTrackByCounts()\">Clear counts</button>\n\n<p><i>without</i> trackBy</p>\n<div class=\"box\">\n  <div #noTrackBy *ngFor=\"let hero of heroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n\n  <div id=\"noTrackByCnt\" *ngIf=\"heroesNoTrackByCount\">\n    Hero DOM elements change #{{ heroesNoTrackByCount }} without trackBy\n  </div>\n</div>\n\n<p>with trackBy</p>\n<div class=\"box\">\n  <div #withTrackBy *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n\n  <div id=\"withTrackByCnt\" *ngIf=\"heroesWithTrackByCount\">\n    Hero DOM elements change #{{ heroesWithTrackByCount }} with trackBy\n  </div>\n</div>\n\n<br /><br /><br />\n\n<p>with trackBy and <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<p>with trackBy and <i>comma</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<p>with trackBy and <i>space</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<p>with <i>generic</i> trackById function</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackById\">\n    ({{ hero.id }}) {{ hero.name }}\n  </div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgSwitch binding -->\n<hr />\n<h2 id=\"ngSwitch\">NgSwitch Binding</h2>\n\n<p>Pick your favorite hero</p>\n<div>\n  <label *ngFor=\"let h of heroes\">\n    <input type=\"radio\" name=\"heroes\" [(ngModel)]=\"currentHero\" [value]=\"h\" />{{\n      h.name\n    }}\n  </label>\n</div>\n\n<div [ngSwitch]=\"currentHero.emotion\">\n  <app-happy-hero *ngSwitchCase=\"'happy'\" [hero]=\"currentHero\"></app-happy-hero>\n  <app-sad-hero *ngSwitchCase=\"'sad'\" [hero]=\"currentHero\"></app-sad-hero>\n  <app-confused-hero\n    *ngSwitchCase=\"'confused'\"\n    [hero]=\"currentHero\"\n  ></app-confused-hero>\n  <div *ngSwitchCase=\"'confused'\">\n    Are you as confused as {{ currentHero.name }}?\n  </div>\n  <app-unknown-hero *ngSwitchDefault [hero]=\"currentHero\"></app-unknown-hero>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- template reference variable -->\n<hr />\n<h2 id=\"ref-vars\">Template reference variables</h2>\n\n<input #phone placeholder=\"phone number\" />\n\n<!-- lots of other elements -->\n\n<!-- phone refers to the input element; pass its \\`value\\` to an event handler -->\n<button (click)=\"callPhone(phone.value)\">Call</button>\n\n<input ref-fax placeholder=\"fax number\" />\n<button (click)=\"callFax(fax.value)\">Fax</button>\n\n<!-- btn refers to the button element; show its disabled state -->\n<button\n  #btn\n  disabled\n  [innerHTML]=\"'disabled by attribute: ' + btn.disabled\"\n></button>\n\n<h4>Example Form</h4>\n<app-hero-form [hero]=\"currentHero\"></app-hero-form>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- inputs and output -->\n<hr />\n<h2 id=\"inputs-and-outputs\">Inputs and Outputs</h2>\n\n<img [src]=\"iconUrl\" />\n<button (click)=\"onSave()\">Save</button>\n\n<app-hero-detail [hero]=\"currentHero\" (deleteRequest)=\"deleteHero($event)\">\n</app-hero-detail>\n\n<div (myClick)=\"clickMessage2 = $event\" clickable>myClick2</div>\n{{ clickMessage2 }}\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Pipes -->\n<hr />\n<h2 id=\"pipes\">Pipes</h2>\n\n<div>Title through uppercase pipe: {{ title | uppercase }}</div>\n\n<!-- Pipe chaining: convert title to uppercase, then to lowercase -->\n<div>\n  Title through a pipe chain:\n  {{ title | uppercase | lowercase }}\n</div>\n\n<!-- pipe with configuration argument => \"February 25, 1970\" -->\n<div>Birthdate: {{ currentHero?.birthdate | date: \"longDate\" }}</div>\n\n<div>{{ currentHero | json }}</div>\n\n<div>\n  Birthdate: {{ currentHero?.birthdate | date: \"longDate\" | uppercase }}\n</div>\n\n<div>\n  <!-- pipe price to USD and display the $ symbol -->\n  <label>Price: </label>{{ product.price | currency: \"USD\" : true }}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Null values and the safe navigation operator -->\n<hr />\n<h2 id=\"safe-navigation-operator\">Safe navigation operator <i>?.</i></h2>\n\n<div>The title is {{ title }}</div>\n\n<div>The current hero's name is {{ currentHero?.name }}</div>\n\n<div>The current hero's name is {{ currentHero.name }}</div>\n\n<!--\nThe null hero's name is {{nullHero.name}}\n\nSee console log:\n  TypeError: Cannot read property 'name' of null in [null]\n-->\n\n<!--No hero, div not displayed, no error -->\n<div *ngIf=\"nullHero\">The null hero's name is {{ nullHero.name }}</div>\n\n<div>The null hero's name is {{ nullHero && nullHero.name }}</div>\n\n<div>\n  <!-- No hero, no problem! -->\n  The null hero's name is {{ nullHero?.name }}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr />\n<h2 id=\"non-null-assertion-operator\">Non-null assertion operator <i>!.</i></h2>\n\n<div>\n  <!--No hero, no text -->\n  <div *ngIf=\"hero\">The hero's name is {{ hero!.name }}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- non-null assertion operator -->\n<hr />\n<h2 id=\"any-type-cast-function\">$any type cast function <i>$any( )</i>.</h2>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>The hero's marker is {{ $any(hero).marker }}</div>\n</div>\n\n<div>\n  <!-- Accessing an undeclared member -->\n  <div>Undeclared members is {{ $any(this).member }}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- TODO: discuss this in the Style binding section -->\n<!-- enums in bindings -->\n<hr />\n<h2 id=\"enums\">Enums in binding</h2>\n\n<p>\n  The name of the Color.Red enum is {{ Color[Color.Red] }}.<br />\n  The current color is {{ Color[color] }} and its number is {{ color }}.<br />\n  <button [style.color]=\"Color[color]\" (click)=\"colorToggle()\">\n    Enum Toggle\n  </button>\n</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->\n\n<div id=\"heroForm\">\n  <form (ngSubmit)=\"onSubmit(heroForm)\" #heroForm=\"ngForm\">\n    <div class=\"form-group\">\n      <label for=\"name\"\n        >Name\n        <input\n          class=\"form-control\"\n          name=\"name\"\n          required\n          [(ngModel)]=\"hero.name\"\n        />\n      </label>\n    </div>\n    <button type=\"submit\" [disabled]=\"!heroForm.form.valid\">Submit</button>\n  </form>\n  <div [hidden]=\"!heroForm.form.valid\">\n    {{ submitMessage }}\n  </div>\n</div>\n\n<!-- \nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->");
}
#[test]
fn test_tag_name_component_html_bracket_spacingfalse_format_1_da91f3bc() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .bracket_spacing(false)
        .parser("component.html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer.format("<Table></Table>");
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq!(formatted, "<Table></Table>");
}
#[test]
fn test_tag_name_component_html_html_whitespace_sensitivityignore_format_1_da91f3bc() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .html_whitespace_sensitivity("ignore")
        .parser("component.html")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer.format("<Table></Table>");
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq!(formatted, "<Table></Table>");
}
#[test]
fn test_tag_name_component_html_print_width_1_format_1_da91f3bc() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(1)
        .build()
        .unwrap();
    let formatted = pretty_printer.format("<Table></Table>");
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq!(formatted, "<Table></Table>");
}
#[test]
fn test_tag_name_component_html_trailing_commaes_5_format_1_da91f3bc() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(80)
        .trailing_comma("es5")
        .build()
        .unwrap();
    let formatted = pretty_printer.format("<Table></Table>");
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq!(formatted, "<Table></Table>");
}
#[test]
fn test_tag_name_component_html_trailing_commanone_format_1_da91f3bc() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("component.html")
        .print_width(80)
        .trailing_comma("none")
        .build()
        .unwrap();
    let formatted = pretty_printer.format("<Table></Table>");
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq!(formatted, "<Table></Table>");
}
