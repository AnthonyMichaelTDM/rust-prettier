#[allow(unused_imports)]
use rust_prettier::PrettyPrinterBuilder;
#[test]
fn test_block_statement_hbs_format_1_42eb9699() {
    let pretty_printer = PrettyPrinterBuilder::default().build().unwrap();
    let formatted = pretty_printer . format ("{{#block param hashKey=hashValue as |blockParam|}}\n  Hello\n{{/block}}\n\n{{#block almost80CharacterLongPositionalParamThatIsFirstAlmost80Chars helloWorldParam key=here}}\n{{/block}}\n\n{{#block param param param param param param param hashKey=hashValue as |blockParam|}}\n  Hello\n{{/block}}\n\n{{#block param param param param param param param param param param param hashKey=hashValue as |blockParam|}}\n  Hello\n{{/block}}\n\n{{#block param param param param param param param hashKey=HashValue hashKey=hashValue}}\n  Hello\n{{/block}}\n\n{{#block param param param param param param param param param param param param param}}\n  Hello\n{{/block}}\n\n{{#block hashKey=HashValue hashKey=hashValue hashKey=HashValue hashKey=hashValue hashKey=HashValue}}\n  Hello\n{{/block}}\n\n{{#block}}\n  {{#block}}\n   hello\n  {{/block}}\n{{/block}}\n\n{{#block}}\n  {{#block param}}\n    hello\n  {{/block}}\n{{/block}}\n\n{{#block param}}\n  {{#block param}}\n    hello\n  {{/block}}\n{{/block}}\n\n{{#block}}\n  hello\n{{/block}}\n\n<MyComponent as |firstName|>\n  {{firstName}}\n</MyComponent>\n\n<MyComponent as |firstName lastName|>\n  {{firstName}} {{lastName}}\n</MyComponent>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "{{#block param hashKey=hashValue as |blockParam|}}\n  Hello\n{{/block}}\n\n{{#block\n  almost80CharacterLongPositionalParamThatIsFirstAlmost80Chars\n  helloWorldParam\n  key=here\n}}{{/block}}\n\n{{#block\n  param param param param param param param hashKey=hashValue\n  as |blockParam|\n}}\n  Hello\n{{/block}}\n\n{{#block\n  param\n  param\n  param\n  param\n  param\n  param\n  param\n  param\n  param\n  param\n  param\n  hashKey=hashValue\n  as |blockParam|\n}}\n  Hello\n{{/block}}\n\n{{#block\n  param param param param param param param hashKey=HashValue hashKey=hashValue\n}}\n  Hello\n{{/block}}\n\n{{#block\n  param param param param param param param param param param param param param\n}}\n  Hello\n{{/block}}\n\n{{#block\n  hashKey=HashValue\n  hashKey=hashValue\n  hashKey=HashValue\n  hashKey=hashValue\n  hashKey=HashValue\n}}\n  Hello\n{{/block}}\n\n{{#block}}\n  {{#block}}\n    hello\n  {{/block}}\n{{/block}}\n\n{{#block}}\n  {{#block param}}\n    hello\n  {{/block}}\n{{/block}}\n\n{{#block param}}\n  {{#block param}}\n    hello\n  {{/block}}\n{{/block}}\n\n{{#block}}\n  hello\n{{/block}}\n\n<MyComponent as |firstName|>\n  {{firstName}}\n</MyComponent>\n\n<MyComponent as |firstName lastName|>\n  {{firstName}}\n  {{lastName}}\n</MyComponent");
}
#[test]
fn test_custom_else_hbs_format_1_48938cc3() {
    let pretty_printer = PrettyPrinterBuilder::default().build().unwrap();
    let formatted = pretty_printer . format ("<h1>\n{{#when isAtWork}}\n  Ship that code!\n{{else when isReading}}\n  You can finish War and Peace eventually...\n{{else}}\n  Go to bed!\n{{/when}}\n</h1>\n\n<h2>\n{{#when a}}\n  A\n{{else}}\n  B\n{{/when}}\n</h2>\n\n{{#when a}}\n  b\n{{else when c}}\n  d\n{{else}}\n  e\n{{/when}}\n\n{{#when a}}\n  b\n{{else when c}}\n  d\n{{else}}\n  hello\n  {{#when f}}\n    g\n  {{/when}}\n  e\n{{/when}}\n\n{{#when a}}\n  b\n{{else when c}}\n  d\n{{else when e}}\n  f\n{{else when g}}\n  h\n{{else}}\n  j\n{{/when}}\n\n<div>\n  {{#when a}}\n    b\n  {{else when c}}\n    d\n  {{else}}\n    e\n  {{/when}}\n</div>\n\n<div>\n  <div>\n    {{#when a}}\n      b\n    {{else when c}}\n      d\n    {{else}}\n      e\n    {{/when}}\n  </div>\n</div>\n\n{{#when a}}\n  b\n{{else}}\n  {{#each c as |d|}}\n    e\n  {{/each}}\n{{/when}}\n\n{{#when a}}\n  {{#when b}}\n    ab\n  {{else when c}}\n    ac\n  {{/when}}\n{{/when}}\n\n{{#when a}}\n  a\n  <div>b</div>\n  c\n{{else}}\n  {{#when c}}\n    a\n    b\n    <div>c</div>\n  {{/when}}\n  <div>a</div>\n  b\n  c\n{{/when}}\n\n{{~#when someCondition~}}\n  One thing\n{{~else when anotherCondition~}}\n  Another thing\n{{~/when~}}\n\n{{#when a as |b|}}\n  {{b}}\n{{else when c as |d|}}\n  {{d}}\n{{else when e as |f|}}\n  {{f}}\n{{else when g as |h|}}\n  {{h}}\n{{else}}\n  j\n{{/when}}\n\n{{#when abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst as |b|}}\n  {{b}}\n{{else when abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnop as |d|}}\n  {{d}}\n{{else when abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz as |f|}}\n  {{f}}\n{{/when}}\n\n{{#when abcdefghijklmnopqrstuvwxy abcdefghijklmnopqrstuvwxy abcdefghijklmnopqrstuvwxy as |b|}}\n  {{b}}\n{{else when abcdefghijklmnopqrstuvwxy abcdefghijklmnopqrstuvwxy abcdefghijklmnopqrstuvwxy as |d|}}\n  {{d}}\n{{/when}}\n\n{{#when abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz as |b|}}\n  {{b}}\n{{else when abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz as |d|}}\n  {{d}}\n{{/when}}\n\n{{#abcdefghijklmnopqrstuvwxyz-abcdefghijklmnopqrstuvwxyz-abcdefghijklmnopqrst param param param as |foo|}}\n  1\n{{else abcdefghijklmnopqrstuvwxyz-abcdefghijklmnopqrstuvwxyz-abcdefghijklmnopqrst param param param as |bar|}}\n  2\n{{/abcdefghijklmnopqrstuvwxyz-abcdefghijklmnopqrstuvwxyz-abcdefghijklmnopqrst}}") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<h1>\n  {{#when isAtWork}}\n    Ship that code!\n  {{else when isReading}}\n    You can finish War and Peace eventually...\n  {{else}}\n    Go to bed!\n  {{/when}}\n</h1>\n\n<h2>\n  {{#when a}}\n    A\n  {{else}}\n    B\n  {{/when}}\n</h2>\n\n{{#when a}}\n  b\n{{else when c}}\n  d\n{{else}}\n  e\n{{/when}}\n\n{{#when a}}\n  b\n{{else when c}}\n  d\n{{else}}\n  hello\n  {{#when f}}\n    g\n  {{/when}}\n  e\n{{/when}}\n\n{{#when a}}\n  b\n{{else when c}}\n  d\n{{else when e}}\n  f\n{{else when g}}\n  h\n{{else}}\n  j\n{{/when}}\n\n<div>\n  {{#when a}}\n    b\n  {{else when c}}\n    d\n  {{else}}\n    e\n  {{/when}}\n</div>\n\n<div>\n  <div>\n    {{#when a}}\n      b\n    {{else when c}}\n      d\n    {{else}}\n      e\n    {{/when}}\n  </div>\n</div>\n\n{{#when a}}\n  b\n{{else}}\n  {{#each c as |d|}}\n    e\n  {{/each}}\n{{/when}}\n\n{{#when a}}\n  {{#when b}}\n    ab\n  {{else when c}}\n    ac\n  {{/when}}\n{{/when}}\n\n{{#when a}}\n  a\n  <div>b</div>\n  c\n{{else}}\n  {{#when c}}\n    a b\n    <div>c</div>\n  {{/when}}\n  <div>a</div>\n  b c\n{{/when}}\n\n{{~#when someCondition~}}\n  One thing\n{{~else when anotherCondition~}}\n  Another thing\n{{~/when~}}\n\n{{#when a as |b|}}\n  {{b}}\n{{else when c as |d|}}\n  {{d}}\n{{else when e as |f|}}\n  {{f}}\n{{else when g as |h|}}\n  {{h}}\n{{else}}\n  j\n{{/when}}\n\n{{#when\n  abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst\n  as |b|\n}}\n  {{b}}\n{{else when\n  abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnop\n  as |d|\n}}\n  {{d}}\n{{else when\n  abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\n  as |f|\n}}\n  {{f}}\n{{/when}}\n\n{{#when\n  abcdefghijklmnopqrstuvwxy abcdefghijklmnopqrstuvwxy abcdefghijklmnopqrstuvwxy\n  as |b|\n}}\n  {{b}}\n{{else when\n  abcdefghijklmnopqrstuvwxy abcdefghijklmnopqrstuvwxy abcdefghijklmnopqrstuvwxy\n  as |d|\n}}\n  {{d}}\n{{/when}}\n\n{{#when\n  abcdefghijklmnopqrstuvwxyz\n  abcdefghijklmnopqrstuvwxyz\n  abcdefghijklmnopqrstuvwxyz\n  as |b|\n}}\n  {{b}}\n{{else when\n  abcdefghijklmnopqrstuvwxyz\n  abcdefghijklmnopqrstuvwxyz\n  abcdefghijklmnopqrstuvwxyz\n  as |d|\n}}\n  {{d}}\n{{/when}}\n\n{{#abcdefghijklmnopqrstuvwxyz-abcdefghijklmnopqrstuvwxyz-abcdefghijklmnopqrst\n  param param param\n  as |foo|\n}}\n  1\n{{else abcdefghijklmnopqrstuvwxyz-abcdefghijklmnopqrstuvwxyz-abcdefghijklmnopqrst\n  param param param\n  as |bar|\n}}\n  2\n{{/abcdefghijklmnopqrstuvwxyz-abcdefghijklmnopqrstuvwxyz-abcdefghijklmnopqrst}");
}
#[test]
fn test_each_hbs_format_1_51caac3b() {
    let pretty_printer = PrettyPrinterBuilder::default().build().unwrap();
    let formatted = pretty_printer . format ("<div id=\"comments\">\n  {{#each comments}}\n  <h2><a href=\"/posts/{{permalink}}#{{id}}\">{{title}}</a></h2>\n  <div>{{body}}</div>\n  {{/each}}\n</div>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<div id=\"comments\">\n  {{#each comments}}\n    <h2><a href=\"/posts/{{permalink}}#{{id}}\">{{title}}</a></h2>\n    <div>{{body}}</div>\n  {{/each}}\n</div");
}
#[test]
fn test_if_else_hbs_format_1_8c8a30a0() {
    let pretty_printer = PrettyPrinterBuilder::default().build().unwrap();
    let formatted = pretty_printer . format ("<h1>\n{{#if isAtWork}}\n  Ship that code!\n{{else if isReading}}\n  You can finish War and Peace eventually...\n{{else}}\n  Go to bed!\n{{/if}}\n</h1>\n\n<h2>\n{{#if a}}\n  A\n{{else}}\n  B\n{{/if}}\n</h2>\n\n{{#if a}}\n  b\n{{else if c}}\n  d\n{{else}}\n  e\n{{/if}}\n\n{{#if a}}\n  b\n{{else if c}}\n  d\n{{else}}\n  hello\n  {{#if f}}\n    g\n  {{/if}}\n  e\n{{/if}}\n\n{{#if a}}\n  b\n{{else if c}}\n  d\n{{else if e}}\n  f\n{{else if g}}\n  h\n{{else}}\n  j\n{{/if}}\n\n<div>\n  {{#if a}}\n    b\n  {{else if c}}\n    d\n  {{else}}\n    e\n  {{/if}}\n</div>\n\n<div>\n  <div>\n    {{#if a}}\n      b\n    {{else if c}}\n      d\n    {{else}}\n      e\n    {{/if}}\n  </div>\n</div>\n\n{{#if a}}\n  b\n{{else}}\n  {{#each c as |d|}}\n    e\n  {{/each}}\n{{/if}}\n\n{{#if a}}\n  {{#if b}}\n    ab\n  {{else if c}}\n    ac\n  {{/if}}\n{{/if}}\n\n{{#if a}}\n  a\n  <div>b</div>\n  c\n{{else}}\n  {{#if c}}\n    a\n    b\n    <div>c</div>\n  {{/if}}\n  <div>a</div>\n  b\n  c\n{{/if}}\n\n{{~#if someCondition~}}\n  One thing\n{{~else if anotherCondition~}}\n  Another thing\n{{~/if~}}") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<h1>\n  {{#if isAtWork}}\n    Ship that code!\n  {{else if isReading}}\n    You can finish War and Peace eventually...\n  {{else}}\n    Go to bed!\n  {{/if}}\n</h1>\n\n<h2>\n  {{#if a}}\n    A\n  {{else}}\n    B\n  {{/if}}\n</h2>\n\n{{#if a}}\n  b\n{{else if c}}\n  d\n{{else}}\n  e\n{{/if}}\n\n{{#if a}}\n  b\n{{else if c}}\n  d\n{{else}}\n  hello\n  {{#if f}}\n    g\n  {{/if}}\n  e\n{{/if}}\n\n{{#if a}}\n  b\n{{else if c}}\n  d\n{{else if e}}\n  f\n{{else if g}}\n  h\n{{else}}\n  j\n{{/if}}\n\n<div>\n  {{#if a}}\n    b\n  {{else if c}}\n    d\n  {{else}}\n    e\n  {{/if}}\n</div>\n\n<div>\n  <div>\n    {{#if a}}\n      b\n    {{else if c}}\n      d\n    {{else}}\n      e\n    {{/if}}\n  </div>\n</div>\n\n{{#if a}}\n  b\n{{else}}\n  {{#each c as |d|}}\n    e\n  {{/each}}\n{{/if}}\n\n{{#if a}}\n  {{#if b}}\n    ab\n  {{else if c}}\n    ac\n  {{/if}}\n{{/if}}\n\n{{#if a}}\n  a\n  <div>b</div>\n  c\n{{else}}\n  {{#if c}}\n    a b\n    <div>c</div>\n  {{/if}}\n  <div>a</div>\n  b c\n{{/if}}\n\n{{~#if someCondition~}}\n  One thing\n{{~else if anotherCondition~}}\n  Another thing\n{{~/if~}");
}
#[test]
fn test_loop_hbs_format_1_d490d6b1() {
    let pretty_printer = PrettyPrinterBuilder::default().build().unwrap();
    let formatted = pretty_printer . format ("<ul>\n  {{#each speakers key=\"@index\" as |speaker|}}\n  <li>{{speaker}}</li>\n  {{/each}}\n</ul>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "<ul>\n  {{#each speakers key=\"@index\" as |speaker|}}\n    <li>{{speaker}}</li>\n  {{/each}}\n</ul");
}
