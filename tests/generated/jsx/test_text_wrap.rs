#[allow(unused_imports)]
use anyhow::Result;
#[allow(unused_imports)]
use pretty_assertions::assert_eq;
#[allow(unused_imports)]
use rust_prettier::PrettyPrinterBuilder;
#[allow(dead_code)]
static INFINITY: usize = usize::MAX;
#[test]
fn test_test_js_format_1_2a6c911d() -> Result<()> {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("js")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("// Wrapping text\nx =\n  <div>\n    Some text that would need to wrap on to a new line in order to display correctly and nicely\n  </div>\n\n// Wrapping tags\nx =\n  <div>\n    <first>f</first> <first>f</first> <first>f</first> <first>f</first> <first>f</first> <first>f</first>\n  </div>\n\n// Wrapping tags\nx =\n  <div>\n    <first>f</first><first>f</first><first>f</first><first>f</first><first>f</first><first>f</first>\n  </div>\n\n// Wrapping tags\nx =\n  <div>\n    <a /><b /><c />\n    <first>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</first> <first>f</first>\n  </div>\n\n// Wrapping tags\nx =\n  <div>\n    <sadashdkjahsdkjhaskjdhaksjdhkashdkashdkasjhdkajshdkashdkashd /> <first>f</first>\n  </div>\n\nx =\n  <div>\n    before<div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur at mollis lorem.</div>after\n  </div>\n\nx =\n  <div>\n    before{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}{stuff}{stuff}after{stuff}after\n  </div>\n\nx =\n  <div>\n    before {stuff} after {stuff} after {stuff} after {stuff} after {stuff} after {stuff}  {stuff}  {stuff} after {stuff} after\n  </div>\n\nx =\n  <div>\n    Please state your <b>name</b> and <b>occupation</b> for the board of <b>school</b> directors.\n  </div>\n\nfunction DiffOverview(props) {\n  const { source, target, since } = props;\n  return (\n    <div>\n      <div className=\"alert alert-info\">\n        <p>\n          This diff overview is computed against the current list of records in\n          this collection and the list it contained on <b>{humanDate(since)}</b>.\n        </p>\n        <p>\n          <b>Note:</b> <code>last_modified</code> and <code>schema</code> record metadata\n          are omitted for easier review.\n        </p>\n      </div>\n      <Diff source={source} target={target} />\n    </div>\n  );\n}\n\nx = <font size={-3}><i>Starting at minute {graphActivity.startTime}, running for {graphActivity.length} to minute {graphActivity.startTime + graphActivity.length}</i></font>\n\nx =\n  <div>\n    First second third\n    <div attr=\"a very long string attribute that will overflow because it is very long\">Something</div>\n  </div>\n\nx =\n  <div>\n    <div>\n      First\n    </div>\n    Second\n    <div>\n      Third\n    </div>\n  </div>\n\nx =\n  <div>\n    First <div>\n      Second\n    </div> Third\n  </div>\n\nleading_whitespace =\n  <div> First Second Third Fourth Fifth Sixth Seventh Eighth Ninth Tenth Eleventh Twelfth Thirteenth Fourteenth</div>\n\ntrailing_whitespace =\n  <div>First Second Third Fourth Fifth Sixth Seventh Eighth Ninth Tenth Eleventh Twelfth Thirteenth Fourteenth </div>\n\nno_leading_or_trailing_whitespace =\n  <div>First Second Third Fourth Fifth Sixth Seventh Eighth Ninth Tenth Eleventh Twelfth Thirteenth Fourteenth</div>\n\nfacebook_translation_leave_text_around_tag =\n  <div>\n    <span>\n      First\n    </span>,\n    (<span>\n      Second\n    </span>)\n  </div>\n\nx =\n  <div>\n    <span>\n      First second third fourth fifth sixth seventh\n    </span>,\n    (<span>\n      Second\n    </span>)\n  </div>\n\nthis_really_should_split_across_lines =\n  <div>\n    before{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after\n  </div>\n\nunstable_before =\n  <div className=\"yourScore\">\n    Your score: <span className=\"score\">{\\`\\${mini.crosstable.users[sessionUserId]} - \\${mini.crosstable.users[user.id]}\\`}</span>\n  </div>\n\nunstable_after_first_run = (\n  <div className=\"yourScore\">\n    Your score:{\" \"}\n    <span className=\"score\">{\\`\\${mini.crosstable.users[sessionUserId]} - \\${mini\n      .crosstable.users[user.id]}\\`}</span>\n  </div>\n);\n\nsolitary_whitespace =\n  <div first=\"first\" second=\"second\" third=\"third\" fourth=\"fourth\" fifth=\"fifth\" sixth=\"sixth\"> </div>\n\njsx_whitespace_on_newline =\n  <div>\n    <div>\n      First\n    </div> <div>\n      Second\n    </div> <div>\n      Third\n    </div>\n  </div>\n\njsx_around_multiline_element =\n  <div>Before <div>{\"Enough text to make this element wrap on to multiple lines when formatting\"}</div> After</div>\n\njsx_around_multiline_element_second_pass = (\n  <div>\n    Before{\" \"}\n    <div>\n      {\n        \"Enough text to make this element wrap on to multiple lines when formatting\"\n      }\n    </div>{\" \"}\n    After\n  </div>\n);\n\nconvert_space_expressions =\n  <div>{\" \"}</div>\n\nx =\n  <div>\n    <first />\n    <second />\n    <third />\n    <fourth />\n    <fifth />\n    <sixth />\n  </div>\n\nconst Abc = () => {\n  return (\n    <div>\n      Please state your\n      {\" \"}\n      <b>name</b>\n      {\" \"}\n      and\n      {\" \"}\n      <b>occupation</b>\n      {\" \"}\n      for the board of directors.\n    </div>\n  );\n};\n\nx = <div id=\"moo\">Some stuff here</div>\n\nheaders_and_paragraphs = (\n  <div>\n    <h2>First</h2>\n    <p>The first paragraph.</p>\n\n    <h2>Second</h2>\n    <p>The second paragraph.</p>\n  </div>\n);\n\nno_text_one_tag_per_line =\n  <div>\n    <first /><second />\n  </div>\n\nwith_text_fill_line =\n  <div>\n    Text <first /><second />\n  </div>\n\nline_after_br =\n  <div>\n    Text<br />\n    More text<br />\n    And more<br />\n  </div>\n\nline_after_br =\n  <div>\n    Text<br />More text<br />And more<br />\n  </div>\n\nline_after_br =\n  <div>\n    Text\n    <br />\n    More text\n    <br />\n    And more\n    <br />\n  </div>\n\nline_after_br_2 = <div>A<br />B<br />C</div>\n\nbr_followed_by_whitespace = <div><br /> text</div>\n\ndont_preserve_blank_lines_when_jsx_contains_text =\n  <div>\n\n    <div>Zeroth</div>\n\n    <div>First</div>\n\n    Second\n\n  </div>\n\nmultiple_expressions =\n  <div>\n    {header}\n    {body}\n    {footer}\n  </div>\n\nsingle_expression_child_tags =\n  <div>\n    You currently have <strong>{dashboardStr}</strong> and <strong>{userStr}</strong>\n  </div>\n\nexpression_does_not_break =\n  <div>texty text text text text text text text text text text text {this.props.type} </div>\n\n// FIXME\nbr_triggers_expression_break =\n  <div><br />\n  text text text text text text text text text text text {this.props.type} </div>\n\njsx_whitespace_after_tag =\n  <div>\n    <span a=\"a\" b=\"b\">\n      {variable}\n    </span>\n    {\" \"}\n    ({variable})\n  </div>\n\nx =\n  <div>\n    ENDS IN <div>\n      text text text text text text text text text text text\n    </div>{\" \"}\n    HRS\n  </div>\n\nx =\n  <div>\n    <h2>Message</h2>\n    Hello, I'm a simple message.\n  </div>\n\nx =\n  <div>\n    Hello, I'm a simple message.\n    <h2>Message</h2>\n  </div>\n\nx =\n  <div>\n    <div>\n      <div>\n        <div>\n          <div>\n            Line {startRange.row + 1}:{startRange.column + 1} - {endRange.row + 1}:{endRange.column + 1}{caller}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\nx =\n  <div>\n    {\" \"} <div>text</div>\n  </div>\n\n// NOTE: Multiple JSX whitespaces are collapsed into a single space.\nx =\n  <div>\n    {\" \"}{\" \"}{\" \"}\n  </div>\n\n// Don't break a self-closing element without attributes\n// ----------\nx =\n  <p>\n    text text text text text text text text text text text text text text text<br />text text text text text text\n  </p>;\n\nx =\n  <div>\n    <div>\n      First\n    </div>-\n    <div>\n      Second\n    </div>\n  </div>\n\nx =\n  <div>\n    <div>\n      First\n    </div>\n    -\n    <div>\n      Second\n    </div>\n  </div>\n\nx =\n  <div>\n    <div>First</div>-<div>Second</div>\n  </div>\n\nx =\n  <div>\n    <div className=\"first\" tabIndex=\"1\">\n      First\n    </div>-\n    <div className=\"second\" tabIndex=\"2\">\n      Second\n    </div>\n  </div>\n\nx =\n  <div>\n    <div className=\"first\" tabIndex=\"1\">\n      First\n    </div>\n    -\n    <div className=\"second\" tabIndex=\"2\">\n      Second\n    </div>\n  </div>\n\nx =\n  <div>\n    <div className=\"first\" tabIndex=\"1\">First</div>-<div className=\"second\" tabIndex=\"2\">Second</div>\n  </div>\n\nx =\n  <div>\n    {hour}:{minute}:{second}\n  </div>\n\nx =\n  <div>\n    {hour}\n    :\n    {minute}\n    :\n    {second}\n  </div>\n\nx =\n  <div>\n    {hour}:\n    {minute}:\n    {second}\n  </div>\n\nx = <div><strong>text here</strong>.<br /></div>\n\nx = <div>Sales tax estimated using a rate of {salesTax * 100}%.</div>\n\nx = <div>\n  {title}&nbsp;\n</div>\n\nx = <div><span/>bar</div>\n  \nx = <div>\n  <span>\n    <strong>{name}</strong>â€™s{' '}\n  </span>\n  Hello <strong>world</strong>.<br />\n  <Text>You {type}ed this shipment to</Text>\n</div>\n\nx = <HelpBlock>\n  {parameter.Description}: {errorMsg}\n</HelpBlock>\n  \nx = <label>\n  {value} solution{plural}\n</label>\n  \nx = <span>Copy &quot;{name}&quot;</span>\n  \nx = <BasicText light>(avg. {value}/5)</BasicText>\n  \nx = <p>\n  Use the <code>Button</code>'s\n</p>;\n\nthis_really_should_split_across_lines =\n  <div>\n    before{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after\n  </div>\n\nlet myDiv = ReactTestUtils.renderIntoDocument(\n  <div>\n    <div key=\"theDog\" className=\"dog\" />,\n    <div key=\"theBird\" className=\"bird\" />\n  </div>\n);") ? ;
    assert_eq ! (formatted , "// Wrapping text\nx = (\n  <div>\n    Some text that would need to wrap on to a new line in order to display\n    correctly and nicely\n  </div>\n);\n\n// Wrapping tags\nx = (\n  <div>\n    <first>f</first> <first>f</first> <first>f</first> <first>f</first>{\" \"}\n    <first>f</first> <first>f</first>\n  </div>\n);\n\n// Wrapping tags\nx = (\n  <div>\n    <first>f</first>\n    <first>f</first>\n    <first>f</first>\n    <first>f</first>\n    <first>f</first>\n    <first>f</first>\n  </div>\n);\n\n// Wrapping tags\nx = (\n  <div>\n    <a />\n    <b />\n    <c />\n    <first>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</first>{\" \"}\n    <first>f</first>\n  </div>\n);\n\n// Wrapping tags\nx = (\n  <div>\n    <sadashdkjahsdkjhaskjdhaksjdhkashdkashdkasjhdkajshdkashdkashd />{\" \"}\n    <first>f</first>\n  </div>\n);\n\nx = (\n  <div>\n    before\n    <div>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur at\n      mollis lorem.\n    </div>\n    after\n  </div>\n);\n\nx = (\n  <div>\n    before{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}\n    {stuff}\n    {stuff}after{stuff}after\n  </div>\n);\n\nx = (\n  <div>\n    before {stuff} after {stuff} after {stuff} after {stuff} after {stuff} after{\" \"}\n    {stuff} {stuff} {stuff} after {stuff} after\n  </div>\n);\n\nx = (\n  <div>\n    Please state your <b>name</b> and <b>occupation</b> for the board of{\" \"}\n    <b>school</b> directors.\n  </div>\n);\n\nfunction DiffOverview(props) {\n  const { source, target, since } = props;\n  return (\n    <div>\n      <div className=\"alert alert-info\">\n        <p>\n          This diff overview is computed against the current list of records in\n          this collection and the list it contained on <b>{humanDate(since)}</b>\n          .\n        </p>\n        <p>\n          <b>Note:</b> <code>last_modified</code> and <code>schema</code> record\n          metadata are omitted for easier review.\n        </p>\n      </div>\n      <Diff source={source} target={target} />\n    </div>\n  );\n}\n\nx = (\n  <font size={-3}>\n    <i>\n      Starting at minute {graphActivity.startTime}, running for{\" \"}\n      {graphActivity.length} to minute{\" \"}\n      {graphActivity.startTime + graphActivity.length}\n    </i>\n  </font>\n);\n\nx = (\n  <div>\n    First second third\n    <div attr=\"a very long string attribute that will overflow because it is very long\">\n      Something\n    </div>\n  </div>\n);\n\nx = (\n  <div>\n    <div>First</div>\n    Second\n    <div>Third</div>\n  </div>\n);\n\nx = (\n  <div>\n    First <div>Second</div> Third\n  </div>\n);\n\nleading_whitespace = (\n  <div>\n    {\" \"}\n    First Second Third Fourth Fifth Sixth Seventh Eighth Ninth Tenth Eleventh\n    Twelfth Thirteenth Fourteenth\n  </div>\n);\n\ntrailing_whitespace = (\n  <div>\n    First Second Third Fourth Fifth Sixth Seventh Eighth Ninth Tenth Eleventh\n    Twelfth Thirteenth Fourteenth{\" \"}\n  </div>\n);\n\nno_leading_or_trailing_whitespace = (\n  <div>\n    First Second Third Fourth Fifth Sixth Seventh Eighth Ninth Tenth Eleventh\n    Twelfth Thirteenth Fourteenth\n  </div>\n);\n\nfacebook_translation_leave_text_around_tag = (\n  <div>\n    <span>First</span>, (<span>Second</span>)\n  </div>\n);\n\nx = (\n  <div>\n    <span>First second third fourth fifth sixth seventh</span>, (\n    <span>Second</span>)\n  </div>\n);\n\nthis_really_should_split_across_lines = (\n  <div>\n    before{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}\n    after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}\n    after{stuff}after{stuff}after\n  </div>\n);\n\nunstable_before = (\n  <div className=\"yourScore\">\n    Your score:{\" \"}\n    <span className=\"score\">{\\`\\${mini.crosstable.users[sessionUserId]} - \\${\n      mini.crosstable.users[user.id]\n    }\\`}</span>\n  </div>\n);\n\nunstable_after_first_run = (\n  <div className=\"yourScore\">\n    Your score:{\" \"}\n    <span className=\"score\">{\\`\\${mini.crosstable.users[sessionUserId]} - \\${\n      mini.crosstable.users[user.id]\n    }\\`}</span>\n  </div>\n);\n\nsolitary_whitespace = (\n  <div\n    first=\"first\"\n    second=\"second\"\n    third=\"third\"\n    fourth=\"fourth\"\n    fifth=\"fifth\"\n    sixth=\"sixth\"\n  >\n    {\" \"}\n  </div>\n);\n\njsx_whitespace_on_newline = (\n  <div>\n    <div>First</div> <div>Second</div> <div>Third</div>\n  </div>\n);\n\njsx_around_multiline_element = (\n  <div>\n    Before{\" \"}\n    <div>\n      {\n        \"Enough text to make this element wrap on to multiple lines when formatting\"\n      }\n    </div>{\" \"}\n    After\n  </div>\n);\n\njsx_around_multiline_element_second_pass = (\n  <div>\n    Before{\" \"}\n    <div>\n      {\n        \"Enough text to make this element wrap on to multiple lines when formatting\"\n      }\n    </div>{\" \"}\n    After\n  </div>\n);\n\nconvert_space_expressions = <div> </div>;\n\nx = (\n  <div>\n    <first />\n    <second />\n    <third />\n    <fourth />\n    <fifth />\n    <sixth />\n  </div>\n);\n\nconst Abc = () => {\n  return (\n    <div>\n      Please state your <b>name</b> and <b>occupation</b> for the board of\n      directors.\n    </div>\n  );\n};\n\nx = <div id=\"moo\">Some stuff here</div>;\n\nheaders_and_paragraphs = (\n  <div>\n    <h2>First</h2>\n    <p>The first paragraph.</p>\n\n    <h2>Second</h2>\n    <p>The second paragraph.</p>\n  </div>\n);\n\nno_text_one_tag_per_line = (\n  <div>\n    <first />\n    <second />\n  </div>\n);\n\nwith_text_fill_line = (\n  <div>\n    Text <first />\n    <second />\n  </div>\n);\n\nline_after_br = (\n  <div>\n    Text\n    <br />\n    More text\n    <br />\n    And more\n    <br />\n  </div>\n);\n\nline_after_br = (\n  <div>\n    Text\n    <br />\n    More text\n    <br />\n    And more\n    <br />\n  </div>\n);\n\nline_after_br = (\n  <div>\n    Text\n    <br />\n    More text\n    <br />\n    And more\n    <br />\n  </div>\n);\n\nline_after_br_2 = (\n  <div>\n    A<br />B<br />C\n  </div>\n);\n\nbr_followed_by_whitespace = (\n  <div>\n    <br /> text\n  </div>\n);\n\ndont_preserve_blank_lines_when_jsx_contains_text = (\n  <div>\n    <div>Zeroth</div>\n    <div>First</div>\n    Second\n  </div>\n);\n\nmultiple_expressions = (\n  <div>\n    {header}\n    {body}\n    {footer}\n  </div>\n);\n\nsingle_expression_child_tags = (\n  <div>\n    You currently have <strong>{dashboardStr}</strong> and{\" \"}\n    <strong>{userStr}</strong>\n  </div>\n);\n\nexpression_does_not_break = (\n  <div>\n    texty text text text text text text text text text text text{\" \"}\n    {this.props.type}{\" \"}\n  </div>\n);\n\n// FIXME\nbr_triggers_expression_break = (\n  <div>\n    <br />\n    text text text text text text text text text text text {\n      this.props.type\n    }{\" \"}\n  </div>\n);\n\njsx_whitespace_after_tag = (\n  <div>\n    <span a=\"a\" b=\"b\">\n      {variable}\n    </span>{\" \"}\n    ({variable})\n  </div>\n);\n\nx = (\n  <div>\n    ENDS IN <div>text text text text text text text text text text text</div>{\" \"}\n    HRS\n  </div>\n);\n\nx = (\n  <div>\n    <h2>Message</h2>\n    Hello, I'm a simple message.\n  </div>\n);\n\nx = (\n  <div>\n    Hello, I'm a simple message.\n    <h2>Message</h2>\n  </div>\n);\n\nx = (\n  <div>\n    <div>\n      <div>\n        <div>\n          <div>\n            Line {startRange.row + 1}:{startRange.column + 1} -{\" \"}\n            {endRange.row + 1}:{endRange.column + 1}\n            {caller}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nx = (\n  <div>\n    {\" \"}\n    <div>text</div>\n  </div>\n);\n\n// NOTE: Multiple JSX whitespaces are collapsed into a single space.\nx = <div> </div>;\n\n// Don't break a self-closing element without attributes\n// ----------\nx = (\n  <p>\n    text text text text text text text text text text text text text text text\n    <br />\n    text text text text text text\n  </p>\n);\n\nx = (\n  <div>\n    <div>First</div>-<div>Second</div>\n  </div>\n);\n\nx = (\n  <div>\n    <div>First</div>-<div>Second</div>\n  </div>\n);\n\nx = (\n  <div>\n    <div>First</div>-<div>Second</div>\n  </div>\n);\n\nx = (\n  <div>\n    <div className=\"first\" tabIndex=\"1\">\n      First\n    </div>\n    -\n    <div className=\"second\" tabIndex=\"2\">\n      Second\n    </div>\n  </div>\n);\n\nx = (\n  <div>\n    <div className=\"first\" tabIndex=\"1\">\n      First\n    </div>\n    -\n    <div className=\"second\" tabIndex=\"2\">\n      Second\n    </div>\n  </div>\n);\n\nx = (\n  <div>\n    <div className=\"first\" tabIndex=\"1\">\n      First\n    </div>\n    -\n    <div className=\"second\" tabIndex=\"2\">\n      Second\n    </div>\n  </div>\n);\n\nx = (\n  <div>\n    {hour}:{minute}:{second}\n  </div>\n);\n\nx = (\n  <div>\n    {hour}:{minute}:{second}\n  </div>\n);\n\nx = (\n  <div>\n    {hour}:{minute}:{second}\n  </div>\n);\n\nx = (\n  <div>\n    <strong>text here</strong>.<br />\n  </div>\n);\n\nx = <div>Sales tax estimated using a rate of {salesTax * 100}%.</div>;\n\nx = <div>{title}&nbsp;</div>;\n\nx = (\n  <div>\n    <span />\n    bar\n  </div>\n);\n\nx = (\n  <div>\n    <span>\n      <strong>{name}</strong>â€™s{\" \"}\n    </span>\n    Hello <strong>world</strong>.<br />\n    <Text>You {type}ed this shipment to</Text>\n  </div>\n);\n\nx = (\n  <HelpBlock>\n    {parameter.Description}: {errorMsg}\n  </HelpBlock>\n);\n\nx = (\n  <label>\n    {value} solution{plural}\n  </label>\n);\n\nx = <span>Copy &quot;{name}&quot;</span>;\n\nx = <BasicText light>(avg. {value}/5)</BasicText>;\n\nx = (\n  <p>\n    Use the <code>Button</code>'s\n  </p>\n);\n\nthis_really_should_split_across_lines = (\n  <div>\n    before{stuff}after{stuff}after{stuff}after{stuff}after{stuff}after{stuff}\n    after{stuff}after\n  </div>\n);\n\nlet myDiv = ReactTestUtils.renderIntoDocument(\n  <div>\n    <div key=\"theDog\" className=\"dog\" />,\n    <div key=\"theBird\" className=\"bird\" />\n  </div>,\n);");
    Ok(())
}
