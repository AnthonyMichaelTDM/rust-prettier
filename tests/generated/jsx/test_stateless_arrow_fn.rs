#[allow(unused_imports)]
use rust_prettier::PrettyPrinterBuilder;
#[test]
fn test_test_js_format_1_22eb3745() {
    let pretty_printer = PrettyPrinterBuilder::default().build().unwrap();
    let formatted = pretty_printer . format ("const render1 = ({ styles }) => (\n  <div style={styles} key=\"something\">\n    Keep the wrapping parens. Put each key on its own line.\n  </div>\n);\n\nconst render2 = ({ styles }) => <div style={styles} key=\"something\">\n  Create wrapping parens.\n</div>;\n\nconst render3 = ({ styles }) => <div style={styles} key=\"something\">Create wrapping parens.</div>;\n\nconst render4 = ({ styles }) => <div style={styles} key=\"something\">Create wrapping parens and indent <strong>all the things</strong>.</div>;\n\nconst render5 = ({ styles }) => <div>Keep it on one line.</div>;\n\nconst render6 = ({ styles }) => (\n  <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\">\n    <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\" attr4>ddd d dd d d dddd dddd <strong>hello</strong></div>\n    <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\" attr4>ddd d dd d d dddd dddd <strong>hello</strong></div>\n    <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\" attr4>\n      <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\" attr4>ddd d dd d d dddd dddd <strong>hello</strong></div> <strong>hello</strong></div>\n  </div>\n)\n\nconst render7 = () =>\n  <div>\n    <span /><span>Dont break each elem onto its own line.</span> <span />\n    <div /> <div />\n  </div>\n\nconst render7A = () => (\n  <div>\n    <div /><div /><div />\n  </div>\n)\n\nconst render7B = () => (\n  <div>\n    <span> <span/> Dont break plz</span>\n    <span><span/>Dont break plz</span>\n    <span>Dont break plz<span/></span>\n  </div>\n)\n\nconst render8 = (props) => <div>{props.text}</div>\nconst render9 = (props) => <div>{props.looooooooooooooooooooooooooooooong_text}</div>\nconst render10 = (props) => <div>{props.even_looooooooooooooooooooooooooooooooooooooooooonger_contents}</div>\n\nconst notJSX = (aaaaaaaaaaaaaaaaa, bbbbbbbbbbb) => this.someLongCallWithParams(aaaaaa, bbbbbbb).anotherLongCallWithParams(cccccccccccc, dddddddddddddddddddddd)\n\nReact.render(\n  <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\" />\n  , document.querySelector('#react-root')\n)\n\n\nconst renderTernary = (props) =>\n  <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\">\n    {props.showTheThing ?\n      <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\">Hello world</BaseForm>\n      : \"hello \" + \"howdy! \"}\n    {props.showTheThing ?\n      <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\">Hello world</BaseForm>\n      :\n      null\n    }\n    {props.showTheThing ? null :\n      <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\">Hello world</BaseForm>\n    }\n    {props.showTheOtherThing ? <div>I am here</div> : <div attr=\"blah\" />}\n    {props.showTheOtherThing ? <div>I am here!!</div> : null}\n  </BaseForm>") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "const render1 = ({ styles }) => (\n  <div style={styles} key=\"something\">\n    Keep the wrapping parens. Put each key on its own line.\n  </div>\n);\n\nconst render2 = ({ styles }) => (\n  <div style={styles} key=\"something\">\n    Create wrapping parens.\n  </div>\n);\n\nconst render3 = ({ styles }) => (\n  <div style={styles} key=\"something\">\n    Create wrapping parens.\n  </div>\n);\n\nconst render4 = ({ styles }) => (\n  <div style={styles} key=\"something\">\n    Create wrapping parens and indent <strong>all the things</strong>.\n  </div>\n);\n\nconst render5 = ({ styles }) => <div>Keep it on one line.</div>;\n\nconst render6 = ({ styles }) => (\n  <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\">\n    <div\n      attr1=\"aaaaaaaaaaaaaaaaa\"\n      attr2=\"bbbbbbbbbbb\"\n      attr3=\"cccccccccccc\"\n      attr4\n    >\n      ddd d dd d d dddd dddd <strong>hello</strong>\n    </div>\n    <div\n      attr1=\"aaaaaaaaaaaaaaaaa\"\n      attr2=\"bbbbbbbbbbb\"\n      attr3=\"cccccccccccc\"\n      attr4\n    >\n      ddd d dd d d dddd dddd <strong>hello</strong>\n    </div>\n    <div\n      attr1=\"aaaaaaaaaaaaaaaaa\"\n      attr2=\"bbbbbbbbbbb\"\n      attr3=\"cccccccccccc\"\n      attr4\n    >\n      <div\n        attr1=\"aaaaaaaaaaaaaaaaa\"\n        attr2=\"bbbbbbbbbbb\"\n        attr3=\"cccccccccccc\"\n        attr4\n      >\n        ddd d dd d d dddd dddd <strong>hello</strong>\n      </div>{\" \"}\n      <strong>hello</strong>\n    </div>\n  </div>\n);\n\nconst render7 = () => (\n  <div>\n    <span />\n    <span>Dont break each elem onto its own line.</span> <span />\n    <div /> <div />\n  </div>\n);\n\nconst render7A = () => (\n  <div>\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nconst render7B = () => (\n  <div>\n    <span>\n      {\" \"}\n      <span /> Dont break plz\n    </span>\n    <span>\n      <span />\n      Dont break plz\n    </span>\n    <span>\n      Dont break plz\n      <span />\n    </span>\n  </div>\n);\n\nconst render8 = (props) => <div>{props.text}</div>;\nconst render9 = (props) => (\n  <div>{props.looooooooooooooooooooooooooooooong_text}</div>\n);\nconst render10 = (props) => (\n  <div>\n    {props.even_looooooooooooooooooooooooooooooooooooooooooonger_contents}\n  </div>\n);\n\nconst notJSX = (aaaaaaaaaaaaaaaaa, bbbbbbbbbbb) =>\n  this.someLongCallWithParams(aaaaaa, bbbbbbb).anotherLongCallWithParams(\n    cccccccccccc,\n    dddddddddddddddddddddd,\n  );\n\nReact.render(\n  <BaseForm\n    url=\"/auth/google\"\n    method=\"GET\"\n    colour=\"blue\"\n    size=\"large\"\n    submitLabel=\"Sign in with Google\"\n  />,\n  document.querySelector(\"#react-root\"),\n);\n\nconst renderTernary = (props) => (\n  <BaseForm\n    url=\"/auth/google\"\n    method=\"GET\"\n    colour=\"blue\"\n    size=\"large\"\n    submitLabel=\"Sign in with Google\"\n  >\n    {props.showTheThing ? (\n      <BaseForm\n        url=\"/auth/google\"\n        method=\"GET\"\n        colour=\"blue\"\n        size=\"large\"\n        submitLabel=\"Sign in with Google\"\n      >\n        Hello world\n      </BaseForm>\n    ) : (\n      \"hello \" + \"howdy! \"\n    )}\n    {props.showTheThing ? (\n      <BaseForm\n        url=\"/auth/google\"\n        method=\"GET\"\n        colour=\"blue\"\n        size=\"large\"\n        submitLabel=\"Sign in with Google\"\n      >\n        Hello world\n      </BaseForm>\n    ) : null}\n    {props.showTheThing ? null : (\n      <BaseForm\n        url=\"/auth/google\"\n        method=\"GET\"\n        colour=\"blue\"\n        size=\"large\"\n        submitLabel=\"Sign in with Google\"\n      >\n        Hello world\n      </BaseForm>\n    )}\n    {props.showTheOtherThing ? <div>I am here</div> : <div attr=\"blah\" />}\n    {props.showTheOtherThing ? <div>I am here!!</div> : null}\n  </BaseForm>\n);");
}
