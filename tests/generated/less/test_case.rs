#[allow(unused_imports)]
use rust_prettier::{Parsers, PrettyPrinterBuilder};
#[allow(dead_code)]
static INFINITY: usize = usize::MAX;
#[test]
fn test_case_less_format_1_75a9c9bb() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("less")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("// Convention in this test file:\n// - The case should be preserved for things prefixed with \"Keep\".\n// - The case should always be preserved for element names and attribute names\n//   in selectors, as well as function names and property keywords.\n// - Other things should mostly be lowercase.\n// - The \\`/*:*/\\` comments are just to bust the \\`isLikelySCSS\\` check.\n\n@IMPORT Keep;\n\nHTML#KeepId.KeepClass,\na[HREF=KeepAttrValue]:HOVER::FIRST-letter,\nsvg[viewBox] linearGradient,\n:Not(:NTH-child(2N+1)) {\n    COLOR: #AAbbCC;\n    BACKGROUND-image: URL(\"KeepString\");\n    Margin: 5PX .2E10Em;\n    --Keep-custom-Prop: red;\n    background: Var(--Keep-custom-Prop);\n    animation-name: KeepAnimationName;\n    important: something !IMPORTANT;\n    font-family: INITIAL;\n    padding: UNSET;\n    border: INHERIT;\n    all: REVERT;\n    -WEBKIT-USER-SELECT: none;\n    -MOZ-USER-SELECT: none;\n    -MS-USER-SELECT: none;\n    USER-SELECT: none;\n}\n\n@keyframes KeepAnimationName {\n  FROM {\n    prop: val;\n  }\n\n  @{KeepInterpolationVar} {\n    prop: val;\n  }\n\n  TO {\n    prop: val;\n  }\n}\n\n@custom-media --KeepCustomMedia screen and (width >= 768px);\n@media (--KeepCustomMedia) {}\n\n@KeepDetachedRuleset: /*:*/ {\n  BACKGROUND: RED;\n}\n\n%KeepScssPlaceholderSelector {\n  prop: val;\n}\n\n@KeepTopLevelVar: val;\n$KeepScssVar: val;\n\n.Keep(@Keep: 12e03PX) when (@Keep=Case) /*:*/ {\n    @KeepVar: KeepName; /*:*/\n    @{KeepInterpolationVar}: val;\n    $KeepScssVar: val;\n    @extend %KeepScssPlaceholderSelector;\n\n    @{Keep}[@{Keep}][@{Keep}^=@{Keep-1A}]:@{Keep} {\n      prop: val;\n    }\n\n    &Keep & Element {\n      prop: val;\n    }\n\n    @KeepDetachedRuleset();\n\n    &:extend(.Keep ALL);\n    &:EXTEND(.Keep ALL);\n\n    .Keep;\n    .Keep();\n    .Keep(4PX)!IMPORTANT;\n    .Keep() when (@Keep=Keep);\n    .Keep() when (@Keep=12PX);\n    .Keep() when (@Keep=\"12px\");\n    .Keep() when (@Keep=\"12PX\");\n    .Keep() when (@Keep=Keep12PX);\n}\n\n.Keep (@Keep) when (lightness(@Keep) >= 12PX) and (@Keep > 0) {}\n.Keep (@Keep) when (lightness(@Keep) != '12PX') and (@Keep != \"12PX\") {}\n.Keep (@Keep) when (lightness(@Keep) >= Keep12PX) and (@Keep > @Keep12E5) {}\n\n.Keep(@Keep: 12PX; @Keep: @Keep12PX; ...) /*:*/ {}\n.Keep(@Keep: '12PX'; @Keep: \"12PX\"; ...) /*:*/ {}\n\n@MEDIA (MIN-WIDTH: 700PX) /*:*/ {}\n\n@MEDIA (@{Keep}: @{Keep}) {}\n\n@KEYFRAMES identifier {\n  FROM {\n    margin-top: 50px;\n  }\n  50%  {\n    margin-top: 150px;\n  }\n  TO {\n    margin-top: 100px;\n  }\n}\n\n@-WEBKIT-KEYFRAMES float-up {\n  FROM {\n    margin-top: 50px;\n  }\n  50%  {\n    margin-top: 150px;\n  }\n  TO {\n    margin-top: 100px;\n  }\n}\n\n.foo {\n  color: hsl(0.75TURN, 60%, 70%);\n}\n\np:FIRST-CHILD {\n  color: lime;\n  background-color: black;\n  padding: 5px;\n}\n\na::AFTER {\n  content: \"→\";\n}\n\na:AFTER {\n  content: \"→\";\n}\n\n::-WEBKIT-PROGRESS-BAR {\n  background-color: orange;\n}\n\nTABLE {}\n\n.foo { &-KeepSelector {} &-KeepSelector & .KeepClassSelector {} &-100\\\\.200 {} }") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "// Convention in this test file:\n// - The case should be preserved for things prefixed with \"Keep\".\n// - The case should always be preserved for element names and attribute names\n//   in selectors, as well as function names and property keywords.\n// - Other things should mostly be lowercase.\n// - The \\`/*:*/\\` comments are just to bust the \\`isLikelySCSS\\` check.\n\n@import Keep;\n\nHTML#KeepId.KeepClass,\na[HREF=\"KeepAttrValue\"]:hover::first-letter,\nsvg[viewBox] linearGradient,\n:not(:nth-child(2n + 1)) {\n  color: #aabbcc;\n  background-image: URL(\"KeepString\");\n  margin: 5px 0.2e10em;\n  --Keep-custom-Prop: red;\n  background: Var(--Keep-custom-Prop);\n  animation-name: KeepAnimationName;\n  important: something !important;\n  font-family: initial;\n  padding: unset;\n  border: inherit;\n  all: revert;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n@keyframes KeepAnimationName {\n  from {\n    prop: val;\n  }\n\n  @{KeepInterpolationVar} {\n    prop: val;\n  }\n\n  to {\n    prop: val;\n  }\n}\n\n@custom-media --KeepCustomMedia screen and (width >= 768px);\n@media (--KeepCustomMedia) {\n}\n\n@KeepDetachedRuleset: /*:*/ {\n  BACKGROUND: RED;\n};\n\n%KeepScssPlaceholderSelector {\n  prop: val;\n}\n\n@KeepTopLevelVar: val;\n$KeepScssVar: val;\n\n.Keep(@Keep: 12e03PX) when (@Keep=Case) /*:*/ {\n  @KeepVar: KeepName; /*:*/\n  @{KeepInterpolationVar}: val;\n  $KeepScssVar: val;\n  @extend %KeepScssPlaceholderSelector;\n\n  @{Keep}[@{Keep}][@{Keep}^=@{Keep-1A}]:@{Keep} {\n    prop: val;\n  };\n\n  &Keep & Element {\n    prop: val;\n  }\n\n  @KeepDetachedRuleset();\n\n  &:extend(.Keep ALL);\n  &:EXTEND(.Keep ALL);\n\n  .Keep;\n  .Keep();\n  .Keep(4px) !important;\n  .Keep() when (@Keep=Keep);\n  .Keep() when (@Keep=12px);\n  .Keep() when (@Keep=\"12px\");\n  .Keep() when (@Keep=\"12PX\");\n  .Keep() when (@Keep=Keep12PX);\n}\n\n.Keep (@Keep) when (lightness(@Keep) >= 12px) and (@Keep > 0) {\n}\n.Keep (@Keep) when (lightness(@Keep) != \"12PX\") and (@Keep != \"12PX\") {\n}\n.Keep (@Keep) when (lightness(@Keep) >= Keep12PX) and (@Keep > @Keep12E5) {\n}\n\n.Keep(@Keep: 12PX; @Keep: @Keep12PX; ...) /*:*/ {\n}\n.Keep(@Keep: '12PX'; @Keep: \"12PX\"; ...) /*:*/ {\n}\n\n@media (min-width: 700px) /*:*/ {\n}\n\n@media (@{Keep}: @{Keep}) {\n}\n\n@keyframes identifier {\n  from {\n    margin-top: 50px;\n  }\n  50% {\n    margin-top: 150px;\n  }\n  to {\n    margin-top: 100px;\n  }\n}\n\n@-webkit-keyframes float-up {\n  from {\n    margin-top: 50px;\n  }\n  50% {\n    margin-top: 150px;\n  }\n  to {\n    margin-top: 100px;\n  }\n}\n\n.foo {\n  color: hsl(0.75turn, 60%, 70%);\n}\n\np:first-child {\n  color: lime;\n  background-color: black;\n  padding: 5px;\n}\n\na::after {\n  content: \"→\";\n}\n\na:after {\n  content: \"→\";\n}\n\n::-webkit-progress-bar {\n  background-color: orange;\n}\n\nTABLE {\n}\n\n.foo {\n  &-KeepSelector {\n  }\n  &-KeepSelector & .KeepClassSelector {\n  }\n  &-100\\\\.200 {\n  }\n}");
}
#[test]
fn test_variable_less_format_1_16825fed() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("less")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("// Do not change case of property name if inside a variable declaration\n\n@var: {\n  notVar: 0;\n  @notVarNested: {\n    notVar: 1;\n    notVar2: 2;\n  };\n};\n\n@var    :    {\n  preserveCase: 5;\n};\n\n@var:    {\n  preserveCase: 5;\n};\n\n@var    :{\n  preserveCase: 5;\n};\n\n@var /* comment */ : /* comment */ {\n  preserveCase: 5;\n};\n\n@var: /* comment */ {\n  preserveCase: 5;\n};\n\n@var /* comment */ :{\n  preserveCase: 5;\n};\n\n@var // comment\n: // comment\n{\n  /* FIXME: should not change case */\n  preserveCase: 5;\n};\n\n@var: // comment\n{\n  preserveCase: 5;\n};\n\n@var // comment\n:{\n  /* FIXME: should not change case */\n  preserveCase: 5;\n};\n\n// Known css properties\n@var: {\n  COLoR: RED;\n};\n\n@not-var {\n  canChangeCase: @var[@notVarNested][notVar];\n  canChangeCase: @var[    @notVarNested][notVar];\n  canChangeCase: @var[@notVarNested    ][notVar];\n  canChangeCase: @var[    @notVarNested    ][notVar];\n  canChangeCase: @var[@notVarNested][notVar];\n  canChangeCase: @var[@notVarNested][    notVar];\n  canChangeCase: @var[@notVarNested][notVar    ];\n  canChangeCase: @var[@notVarNested][    notVar    ];\n  canChangeCase: @var[notVar];\n  canChangeCase: @var[    notVar];\n  canChangeCase: @var[notVar    ];\n  canChangeCase: @var[    notVar    ];\n}") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "// Do not change case of property name if inside a variable declaration\n\n@var: {\n  notVar: 0;\n  @notVarNested: {\n    notVar: 1;\n    notVar2: 2;\n  };\n};\n\n@var: {\n  preserveCase: 5;\n};\n\n@var: {\n  preserveCase: 5;\n};\n\n@var: {\n  preserveCase: 5;\n};\n\n@var: /* comment */ {\n  preserveCase: 5;\n};\n\n@var: /* comment */ {\n  preserveCase: 5;\n};\n\n@var: {\n  preserveCase: 5;\n};\n\n@var // comment\n: // comment\n{\n  /* FIXME: should not change case */\n  preservecase: 5;\n}\n\n@var: // comment\n{\n  preserveCase: 5;\n};\n\n@var // comment\n: {\n  /* FIXME: should not change case */\n  preservecase: 5;\n}\n\n// Known css properties\n@var: {\n  COLoR: RED;\n};\n\n@not-var {\n  canchangecase: @var[@notVarNested][notVar];\n  canchangecase: @var[@notVarNested][notVar];\n  canchangecase: @var[@notVarNested][notVar];\n  canchangecase: @var[@notVarNested][notVar];\n  canchangecase: @var[@notVarNested][notVar];\n  canchangecase: @var[@notVarNested][notVar];\n  canchangecase: @var[@notVarNested][notVar];\n  canchangecase: @var[@notVarNested][notVar];\n  canchangecase: @var[notVar];\n  canchangecase: @var[notVar];\n  canchangecase: @var[notVar];\n  canchangecase: @var[notVar];\n}");
}
