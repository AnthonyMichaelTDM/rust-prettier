use pretty_assertions::assert_eq;
#[allow(unused_imports)]
use rust_prettier::PrettyPrinterBuilder;
#[allow(dead_code)]
static INFINITY: usize = usize::MAX;
#[test]
fn test_comments_less_format_1_7e5a5dc1() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("less")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("// This comment won't be included in the CSS. \n//This comment won't be included in the CSS.\n//     This comment won't be included in the CSS.     \n\n/* But this comment will, except in compressed mode. */\n/*     But this comment will, except in compressed mode.     */\n/*But this comment will, except in compressed mode.*/\n\n/*! This comment will be included even in compressed mode. */\n\n/// Computes an exponent.\n///// Computes an exponent.") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "// This comment won't be included in the CSS.\n//This comment won't be included in the CSS.\n//     This comment won't be included in the CSS.\n\n/* But this comment will, except in compressed mode. */\n/*     But this comment will, except in compressed mode.     */\n/*But this comment will, except in compressed mode.*/\n\n/*! This comment will be included even in compressed mode. */\n\n/// Computes an exponent.\n///// Computes an exponent.");
}
#[test]
fn test_function_each_less_format_1_82430fa9() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("less")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("// http://lesscss.org/functions/#list-functions-each\n\n@selectors: blue, green, red;\n\neach(@selectors, {\n  .sel-@{value} {\n    a: b;\n  }\n});\n\n\n// TODO: fix this\neach(@selectors, \n{\n  .sel-@{value} {\na: b;\n  }\n});") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "// http://lesscss.org/functions/#list-functions-each\n\n@selectors: blue, green, red;\n\neach(@selectors, {\n  .sel-@{value} {\n    a: b;\n  }\n});\n\n// TODO: fix this\neach(@selectors, \n{\n  .sel-@{value} {\na: b;\n  }\n});");
}
#[test]
fn test_issue_11483_never_append_anything_less_format_1_9afef4b6() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("less")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer.format("@variable: {\n  field: something;\n};");
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq!(formatted, "@variable: {\n  field: something;\n};");
}
#[test]
fn test_less_less_format_1_9ff36876() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("less")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("@nice-blue: #5B83AD;\n@light-blue: @nice-blue + #111;\n\n#header {\n  color: @light-blue;\n}\n\n\n#header {\n  color: #6c94be;\n}\n\n\n.bordered {\n  border-top: dotted 1px black;\n  border-bottom: solid 2px black;\n}\n\n\n#menu a {\n  color: #111;\n  .bordered;\n}\n\n.post a {\n  color: red;\n  .bordered;\n}\n\n\n#header {\n  color: black;\n}\n#header .navigation {\n  font-size: 12px;\n}\n#header .logo {\n  width: 300px;\n}\n\n\n#header {\n  color: black;\n  .navigation {\n    font-size: 12px;\n  }\n  .logo {\n    width: 300px;\n  }\n}\n\n\n.clearfix {\n  display: block;\n  zoom: 1;\n\n  &:after {\n    content: \" \";\n    display: block;\n    font-size: 0;\n    height: 0;\n    clear: both;\n    visibility: hidden;\n  }\n}\n\n\n.screen-color {\n  @media screen {\n    color: green;\n    @media (min-width: 768px) {\n      color: red;\n    }\n  }\n  @media tv {\n    color: black;\n  }\n}\n\n\n@media screen {\n  .screen-color {\n    color: green;\n  }\n}\n@media screen and (min-width: 768px) {\n  .screen-color {\n    color: red;\n  }\n}\n@media tv {\n  .screen-color {\n    color: black;\n  }\n}\n\n\n#a {\n  color: blue;\n  @font-face {\n    src: made-up-url;\n  }\n  padding: 2 2 2 2;\n}\n\n\n#a {\n  color: blue;\n}\n@font-face {\n  src: made-up-url;\n}\n#a {\n  padding: 2 2 2 2;\n}\n\n\n// numbers are converted into the same units\n@conversion-1: 5cm + 10mm; // result is 6cm\n@conversion-2: 2 - 3cm - 5mm; // result is -1.5cm\n\n// conversion is impossible\n@incompatible-units: 2 + 5px - 3cm; // result is 4px\n\n// example with variables\n@base: 5%;\n@filler: @base * 2; // result is 10%\n@other: @base + @filler; // result is 15%\n\n\n@base: 2cm * 3mm; // result is 6cm\n\n\n@color: #224488 / 2; //results in #112244\nbackground-color: #112244 + #111; // result is #223355\n\n\n.weird-element {\n  content: ~\"^//* some horrible but needed css hack\";\n}\n\n\n@base: #f04615;\n@width: 0.5;\n\n.class {\n  width: percentage(@width); // returns \\`50%\\`\n  color: saturate(@base, 5%);\n  background-color: spin(lighten(@base, 25%), 8);\n}\n\n\n#bundle {\n  .button {\n    display: block;\n    border: 1px solid black;\n    background-color: grey;\n    &:hover {\n      background-color: white\n    }\n  }\n  .tab { /* ... */ }\n  .citation { /* ... */ }\n}\n\n\n#header a {\n  color: orange;\n  #bundle > .button;\n}\n\n\n@var: red;\n\n#page {\n  @var: white;\n  #header {\n    color: @var; // white\n  }\n}\n\n\n@var: red;\n\n#page {\n  #header {\n    color: @var; // white\n  }\n  @var: white;\n}\n\n\n/* One hell of a block\nstyle comment! */\n@var: red;\n\n// Get in line!\n@var: white;\n\n\n@import \"library\"; // library.less\n@import \"typo.css\";\n\n\na,\n.link {\n  color: #428bca;\n}\n.widget {\n  color: #fff;\n  background: #428bca;\n}\n\n\n// Variables\n@link-color:        #428bca; // sea blue\n@link-color-hover:  darken(@link-color, 10%);\n\n// Usage\na,\n.link {\n  color: @link-color;\n}\na:hover {\n  color: @link-color-hover;\n}\n.widget {\n  color: #fff;\n  background: @link-color;\n}\n\n\n// Variables\n@my-selector: banner;\n\n// Usage\n.@{my-selector} {\n  font-weight: bold;\n  line-height: 40px;\n  margin: 0 auto;\n}\n\n\n.banner {\n  font-weight: bold;\n  line-height: 40px;\n  margin: 0 auto;\n}\n\n\n// Variables\n@images: \"../img\";\n\n// Usage\nbody {\n  color: #444;\n  width: 100px;\n  background: url('/foo/@{images}/bar');\n  background: url(\"@{images}/white-sand.\\${width}.png\");\n  background: url(@images);\n}\n\n\n// Variables\n@themes: \"../../src/themes\";\n\n// Usage\n@import \"@{themes}/tidal-wave.less\";\n\n\n@property: color;\n\n.widget {\n  @{property}: #0ee;\n  background-@{property}: #999;\n}\n\n\n.widget {\n  color: #0ee;\n  background-color: #999;\n}\n\n\n@fnord:  \"I am fnord.\";\n@var:    \"fnord\";\ncontent: @@var;\n\n\ncontent: \"I am fnord.\";\n\n\n.lazy-eval {\n  width: @var;\n}\n\n@var: @a;\n@a: 9%;\n\n\n.lazy-eval-scope {\n  width: @var;\n  @a: 9%;\n}\n\n@var: @a;\n@a: 100%;\n\n\n.lazy-eval-scope {\n  width: 9%;\n}\n\n\n@var: 0;\n.class {\n  @var: 1;\n  .brass {\n    @var: 2;\n    three: @var;\n    @var: 3;\n  }\n  one: @var;\n}\n\n\n.class {\n  one: 1;\n}\n.class .brass {\n  three: 3;\n}\n\n\n// library\n@base-color: green;\n@dark-color: darken(@base-color, 10%);\n\n// use of library\n@import \"library.less\";\n@base-color: red;\n\n\nnav ul {\n  &:extend(.inline);\n  background: blue;\n}\n\n\nnav ul {\n  &:extend(.inline);\n  background: blue;\n}\n.inline {\n  color: red;\n}\n\n\nnav ul {\n  background: blue;\n}\n.inline,\nnav ul {\n  color: red;\n}\n\n\n.a:extend(.b) {}\n\n// the above block does the same thing as the below block\n.a {\n  &:extend(.b);\n}\n\n\n.c:extend(.d all) {\n  // extends all instances of \".d\" e.g. \".x.d\" or \".d.x\"\n}\n.c:extend(.d) {\n  // extends only instances where the selector will be output as just \".d\"\n}\n\n\n.e:extend(.f) {}\n.e:extend(.g) {}\n\n// the above an the below do the same thing\n.e:extend(.f, .g) {}\n\n\n.big-division,\n.big-bag:extend(.bag),\n.big-bucket:extend(.bucket) {\n  // body\n}\n\n\npre:hover,\n.some-class {\n  &:extend(div pre);\n}\n\n\npre:hover:extend(div pre),\n.some-class:extend(div pre) {}\n\n\n.bucket {\n  tr { // nested ruleset with target selector\n    color: blue;\n  }\n}\n.some-class:extend(.bucket tr) {} // nested ruleset is recognized\n\n\n.bucket tr,\n.some-class {\n  color: blue;\n}\n\n\n.bucket {\n  tr & { // nested ruleset with target selector\n    color: blue;\n  }\n}\n.some-class:extend(tr .bucket) {} // nested ruleset is recognized\n\n\ntr .bucket,\n.some-class {\n  color: blue;\n}\n\n\n.a.class,\n.class.a,\n.class > .a {\n  color: blue;\n}\n.test:extend(.class) {} // this will NOT match the any selectors above\n\n\n*.class {\n  color: blue;\n}\n.noStar:extend(.class) {} // this will NOT match the *.class selector\n\n\n*.class {\n  color: blue;\n}\n\n\nlink:hover:visited {\n  color: blue;\n}\n.selector:extend(link:visited:hover) {}\n\n\nlink:hover:visited {\n  color: blue;\n}\n\n\n:nth-child(1n+3) {\n  color: blue;\n}\n.child:extend(:nth-child(n+3)) {}\n\n\n:nth-child(1n+3) {\n  color: blue;\n}\n\n\n[title=identifier] {\n  color: blue;\n}\n[title='identifier'] {\n  color: blue;\n}\n[title=\"identifier\"] {\n  color: blue;\n}\n\n.noQuote:extend([title=identifier]) {}\n.singleQuote:extend([title='identifier']) {}\n.doubleQuote:extend([title=\"identifier\"]) {}\n\n\n[title=identifier],\n.noQuote,\n.singleQuote,\n.doubleQuote {\n  color: blue;\n}\n\n[title='identifier'],\n.noQuote,\n.singleQuote,\n.doubleQuote {\n  color: blue;\n}\n\n[title=\"identifier\"],\n.noQuote,\n.singleQuote,\n.doubleQuote {\n  color: blue;\n}\n\n\n.a.b.test,\n.test.c {\n  color: orange;\n}\n.test {\n  &:hover {\n    color: green;\n  }\n}\n\n.replacement:extend(.test all) {}\n\n\n.a.b.test,\n.test.c,\n.a.b.replacement,\n.replacement.c {\n  color: orange;\n}\n.test:hover,\n.replacement:hover {\n  color: green;\n}\n\n\n@variable: .bucket;\n@{variable} { // interpolated selector\n  color: blue;\n}\n.some-class:extend(.bucket) {} // does nothing, no match is found\n\n\n.bucket {\n  color: blue;\n}\n.some-class:extend(@{variable}) {} // interpolated selector matches nothing\n@variable: .bucket;\n\n\n.bucket {\n  color: blue;\n}\n\n\n.bucket {\n  color: blue;\n}\n@{variable}:extend(.bucket) {}\n@variable: .selector;\n\n\n.bucket, .selector {\n  color: blue;\n}\n\n\n@media print {\n  .screenClass:extend(.selector) {} // extend inside media\n  .selector { // this will be matched - it is in the same media\n    color: black;\n  }\n}\n.selector { // ruleset on top of style sheet - extend ignores it\n  color: red;\n}\n@media screen {\n  .selector {  // ruleset inside another media - extend ignores it\n    color: blue;\n  }\n}\n\n\n@media print {\n  .selector,\n  .screenClass { /*  ruleset inside the same media was extended */\n    color: black;\n  }\n}\n.selector { /* ruleset on top of style sheet was ignored */\n  color: red;\n}\n@media screen {\n  .selector { /* ruleset inside another media was ignored */\n    color: blue;\n  }\n}\n\n\n@media screen {\n  .screenClass:extend(.selector) {} // extend inside media\n  @media (min-width: 1023px) {\n    .selector {  // ruleset inside nested media - extend ignores it\n      color: blue;\n    }\n  }\n}\n\n\n@media screen and (min-width: 1023px) {\n  .selector { /* ruleset inside another nested media was ignored */\n    color: blue;\n  }\n}\n\n\n@media screen {\n  .selector {  /* ruleset inside nested media - top level extend works */\n    color: blue;\n  }\n  @media (min-width: 1023px) {\n    .selector {  /* ruleset inside nested media - top level extend works */\n      color: blue;\n    }\n  }\n}\n\n.topLevel:extend(.selector) {} /* top level extend matches everything */\n\n\n@media screen {\n  .selector,\n  .topLevel { /* ruleset inside media was extended */\n    color: blue;\n  }\n}\n@media screen and (min-width: 1023px) {\n  .selector,\n  .topLevel { /* ruleset inside nested media was extended */\n    color: blue;\n  }\n}\n\n\n.alert-info,\n.widget {\n  /* declarations */\n}\n\n.alert:extend(.alert-info, .widget) {}\n\n\n.alert-info,\n.widget,\n.alert,\n.alert {\n  /* declarations */\n}\n\n\n.animal {\n  background-color: black;\n  color: white;\n}\n\n\n.animal {\n  background-color: black;\n  color: white;\n}\n.bear {\n  background-color: brown;\n}\n\n.animal {\n  background-color: black;\n  color: white;\n}\n.bear {\n  &:extend(.animal);\n  background-color: brown;\n}\n\n\n.my-inline-block() {\n  display: inline-block;\n  font-size: 0;\n}\n.thing1 {\n  .my-inline-block;\n}\n.thing2 {\n  .my-inline-block;\n}\n\n\n.thing1 {\n  display: inline-block;\n  font-size: 0;\n}\n.thing2 {\n  display: inline-block;\n  font-size: 0;\n}\n\n\n.my-inline-block {\n  display: inline-block;\n  font-size: 0;\n}\n.thing1 {\n  &:extend(.my-inline-block);\n}\n.thing2 {\n  &:extend(.my-inline-block);\n}\n\n\n.my-inline-block,\n.thing1,\n.thing2 {\n  display: inline-block;\n  font-size: 0;\n}\n\n\nli.list > a {\n  // list styles\n}\nbutton.list-style {\n  &:extend(li.list > a); // use the same list styles\n}\n\n\n.a, #b {\n  color: red;\n}\n.mixin-class {\n  .a();\n}\n.mixin-id {\n  #b();\n}\n\n\n.a, #b {\n  color: red;\n}\n.mixin-class {\n  color: red;\n}\n.mixin-id {\n  color: red;\n}\n\n\n// these two statements do the same thing:\n.a();\n.a;\n\n\n.my-mixin {\n  color: black;\n}\n.my-other-mixin() {\n  background: white;\n}\n.class {\n  .my-mixin;\n  .my-other-mixin;\n}\n\n\n.my-mixin {\n  color: black;\n}\n.class {\n  color: black;\n  background: white;\n}\n\n\n.my-hover-mixin() {\n  &:hover {\n    border: 1px solid red;\n  }\n}\nbutton {\n  .my-hover-mixin();\n}\n\n\nbutton:hover {\n  border: 1px solid red;\n}\n\n\n#outer {\n  .inner {\n    color: red;\n  }\n}\n\n.c {\n  #outer > .inner;\n}\n\n\n// all do the same thing\n#outer > .inner;\n#outer > .inner();\n#outer .inner;\n#outer .inner();\n#outer.inner;\n#outer.inner();\n\n\n#my-library {\n  .my-mixin() {\n    color: black;\n  }\n}\n// which can be used like this\n.class {\n  #my-library > .my-mixin();\n}\n\n\n#namespace when (@mode=huge) {\n  .mixin() { /* */ }\n}\n\n#namespace {\n  .mixin() when (@mode=huge) { /* */ }\n}\n\n\n#sp_1 when (default()) {\n  #sp_2 when (default()) {\n    .mixin() when not(default()) { /* */ }\n  }\n}\n\n\n.foo (@bg: #f5f5f5, @color: #900) {\n  background: @bg;\n  color: @color;\n}\n.unimportant {\n  .foo();\n}\n.important {\n  .foo() !important;\n}\n\n\n.unimportant {\n  background: #f5f5f5;\n  color: #900;\n}\n.important {\n  background: #f5f5f5 !important;\n  color: #900 !important;\n}\n\n\n.border-radius(@radius) {\n  -webkit-border-radius: @radius;\n     -moz-border-radius: @radius;\n          border-radius: @radius;\n}\n\n\n#header {\n  .border-radius(4px);\n}\n.button {\n  .border-radius(6px);\n}\n\n\n.border-radius(@radius: 5px) {\n  -webkit-border-radius: @radius;\n     -moz-border-radius: @radius;\n          border-radius: @radius;\n}\n\n\n#header {\n  .border-radius;\n}\n\n\n.wrap() {\n  text-wrap: wrap;\n  white-space: -moz-pre-wrap;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n\npre { .wrap }\n\n\npre {\n  text-wrap: wrap;\n  white-space: -moz-pre-wrap;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n\n\n.mixin(@color) {\n  color-1: @color;\n}\n.mixin(@color; @padding: 2) {\n  color-2: @color;\n  padding-2: @padding;\n}\n.mixin(@color; @padding; @margin: 2) {\n  color-3: @color;\n  padding-3: @padding;\n  margin: @margin @margin @margin @margin;\n}\n.some .selector div {\n  .mixin(#008000);\n}\n\n\n.some .selector div {\n  color-1: #008000;\n  color-2: #008000;\n  padding-2: 2;\n}\n\n\n.mixin(@color: black; @margin: 10px; @padding: 20px) {\n  color: @color;\n  margin: @margin;\n  padding: @padding;\n}\n.class1 {\n  .mixin(@margin: 20px; @color: #33acfe);\n}\n.class2 {\n  .mixin(#efca44; @padding: 40px);\n}\n\n\n.class1 {\n  color: #33acfe;\n  margin: 20px;\n  padding: 20px;\n}\n.class2 {\n  color: #efca44;\n  margin: 10px;\n  padding: 40px;\n}\n\n\n.box-shadow(@x: 0; @y: 0; @blur: 1px; @color: #000) {\n  -webkit-box-shadow: @arguments;\n     -moz-box-shadow: @arguments;\n          box-shadow: @arguments;\n}\n.big-block {\n  .box-shadow(2px; 5px);\n}\n\n\n.big-block {\n  -webkit-box-shadow: 2px 5px 1px #000;\n     -moz-box-shadow: 2px 5px 1px #000;\n          box-shadow: 2px 5px 1px #000;\n}\n\n\n.mixin(/* ... */) {}        // matches 0-N arguments\n.mixin() {}           // matches exactly 0 arguments\n.mixin(@a: 1) {}      // matches 0-1 arguments\n.mixin(@a: 1; /* ... */) {} // matches 0-N arguments\n.mixin(@a; /* ... */) {}    // matches 1-N arguments\n\n\n.mixin(@a; @rest...) {\n   // @rest is bound to arguments after @a\n   // @arguments is bound to all arguments\n}\n\n\n.mixin(@s; @color) { /* ... */ }\n\n.class {\n  .mixin(@switch; #888);\n}\n\n\n.mixin(dark; @color) {\n  color: darken(@color, 10%);\n}\n.mixin(light; @color) {\n  color: lighten(@color, 10%);\n}\n.mixin(@_; @color) {\n  display: block;\n}\n\n\n@switch: light;\n\n.class {\n  .mixin(@switch; #888);\n}\n\n\n.class {\n  color: #a2a2a2;\n  display: block;\n}\n\n\n.mixin(@a) {\n  color: @a;\n}\n.mixin(@a; @b) {\n  color: fade(@a; @b);\n}\n\n\n.mixin() {\n  @width:  100%;\n  @height: 200px;\n}\n\n.caller {\n  .mixin();\n  width:  @width;\n  height: @height;\n}\n\n\n.caller {\n  width:  100%;\n  height: 200px;\n}\n\n\n.average(@x, @y) {\n  @average: ((@x + @y) / 2);\n}\n\ndiv {\n  .average(16px, 50px); // \"call\" the mixin\n  padding: @average;    // use its \"return\" value\n}\n\n\ndiv {\n  padding: 33px;\n}\n\n\n.mixin() {\n  @size: in-mixin;\n  @definedOnlyInMixin: in-mixin;\n}\n\n.class {\n  margin: @size @definedOnlyInMixin;\n  .mixin();\n}\n\n@size: globally-defined-value; // callers parent scope - no protection\n\n\n.class {\n  margin: in-mixin in-mixin;\n}\n\n\n.unlock(@value) { // outer mixin\n  .doSomething() { // nested mixin\n    declaration: @value;\n  }\n}\n\n#namespace {\n  .unlock(5); // unlock doSomething mixin\n  .doSomething(); //nested mixin was copied here and is usable\n}\n\n\n#namespace {\n  declaration: 5;\n}\n\n\n// declare detached ruleset\n@detached-ruleset: { background: red; };\n\n// use detached ruleset\n.top {\n    @detached-ruleset();\n}\n\n\n.top {\n  background: red;\n}\n\n\n.desktop-and-old-ie(@rules) {\n  @media screen and (min-width: 1200px) { @rules(); }\n  html.lt-ie9 &                         { @rules(); }\n}\n\nheader {\n  background-color: blue;\n\n  .desktop-and-old-ie({\n    background-color: red;\n  });\n}\n\n\nheader {\n  background-color: blue;\n}\n@media screen and (min-width: 1200px) {\n  header {\n    background-color: red;\n  }\n}\nhtml.lt-ie9 header {\n  background-color: red;\n}\n\n\n@my-ruleset: {\n    .my-selector {\n      background-color: black;\n    }\n  };\n\n\n@my-ruleset: {\n    .my-selector {\n      @media tv {\n        background-color: black;\n      }\n    }\n  };\n@media (orientation:portrait) {\n    @my-ruleset();\n}\n\n\n@media (orientation: portrait) and tv {\n  .my-selector {\n    background-color: black;\n  }\n}\n\n\n// detached ruleset with a mixin\n@detached-ruleset: {\n    .mixin() {\n        color:blue;\n    }\n};\n// call detached ruleset\n.caller {\n    @detached-ruleset();\n    .mixin();\n}\n\n\n.caller {\n  color: blue;\n}\n\n\n@detached-ruleset: {\n    @color:blue; // this variable is private\n};\n.caller {\n    color: @color; // syntax error\n}\n\n\n@detached-ruleset: {\n  caller-variable: @caller-variable; // variable is undefined here\n  .caller-mixin(); // mixin is undefined here\n};\n\nselector {\n  // use detached ruleset\n  @detached-ruleset();\n\n  // define variable and mixin needed inside the detached ruleset\n  @caller-variable: value;\n  .caller-mixin() {\n    variable: declaration;\n  }\n}\n\n\nselector {\n  caller-variable: value;\n  variable: declaration;\n}\n\n\n@variable: global;\n@detached-ruleset: {\n  // will use global variable, because it is accessible\n  // from detached-ruleset definition\n  variable: @variable;\n};\n\nselector {\n  @detached-ruleset();\n  @variable: value; // variable defined in caller - will be ignored\n}\n\n\nselector {\n  variable: global;\n}\n\n\n@detached-1: { scope-detached: @one @two; };\n.one {\n  @one: visible;\n  .two {\n    @detached-2: @detached-1; // copying/renaming ruleset\n    @two: visible; // ruleset can not see this variable\n  }\n}\n\n.use-place {\n  .one > .two();\n  @detached-2();\n}\n\n\n#space {\n  .importer-1() {\n    @detached: { scope-detached: @variable; }; // define detached ruleset\n  }\n}\n\n.importer-2() {\n  @variable: value; // unlocked detached ruleset CAN see this variable\n  #space > .importer-1(); // unlock/import detached ruleset\n}\n\n.use-place {\n  .importer-2(); // unlock/import detached ruleset second time\n   @detached();\n}\n\n\n.use-place {\n  scope-detached: value;\n}\n\n@my-ruleset:{.my-selector{@media tv{background-color:black;}}};\n\n.foo {\n  background: #900;\n}\n@import \"this-is-valid.less\";\n\n\n@import \"foo\";      // foo.less is imported\n@import \"foo.less\"; // foo.less is imported\n@import \"foo.php\";  // foo.php imported as a less file\n@import \"foo.css\";  // statement left in place, as-is\n\n\n.navbar:extend(.navbar all) {}\n\n\n@import (less) \"foo.css\";\n\n\n@import (css) \"foo.less\";\n\n\n@import \"foo.less\";\n\n\n@import (once) \"foo.less\";\n@import (once) \"foo.less\"; // this statement will be ignored\n\n\n// file: foo.less\n.a {\n  color: green;\n}\n// file: main.less\n@import (multiple) \"foo.less\";\n@import (multiple) \"foo.less\";\n\n\n.a {\n  color: green;\n}\n.a {\n  color: green;\n}\n\n\n.mixin (@a) when (lightness(@a) >= 50%) {\n  background-color: black;\n}\n.mixin (@a) when (lightness(@a) < 50%) {\n  background-color: white;\n}\n.mixin (@a) {\n  color: @a;\n}\n\n\n.class1 { .mixin(#ddd) }\n.class2 { .mixin(#555) }\n\n\n.class1 {\n  background-color: black;\n  color: #ddd;\n}\n.class2 {\n  background-color: white;\n  color: #555;\n}\n\n\n.truth (@a) when (@a) { /* ... */ }\n.truth (@a) when (@a = true) { /* ... */ }\n\n\n.class {\n  .truth(40); // Will not match any of the above definitions.\n}\n\n\n@media: mobile;\n\n.mixin (@a) when (@media = mobile) { /* ... */ }\n.mixin (@a) when (@media = desktop) { /* ... */ }\n\n.max (@a; @b) when (@a > @b) { width: @a }\n.max (@a; @b) when (@a < @b) { width: @b }\n\n\n.mixin (@a) when (isnumber(@a)) and (@a > 0) { /* ... */ }\n\n\n.mixin (@a) when (@a > 10), (@a < -10) { /* ... */ }\n\n\n.mixin (@b) when not (@b > 0) { /* ... */ }\n\n\n.mixin (@a; @b: 0) when (isnumber(@b)) { /* ... */ }\n.mixin (@a; @b: black) when (iscolor(@b)) { /* ... */ }\n\n\n.mixin (@a) when (@a > 0) { /* ... */  }\n.mixin (@a) when (default()) { /* ... */ } // matches only if first mixin does not, i.e. when @a <= 0\n\n\n.my-optional-style() when (@my-option = true) {\n  button {\n    color: white;\n  }\n}\n.my-optional-style();\n\n\nbutton when (@my-option = true) {\n  color: white;\n}\n\n\n& when (@my-option = true) {\n  button {\n    color: white;\n  }\n  a {\n    color: blue;\n  }\n}\n\n\n.loop(@counter) when (@counter > 0) {\n  .loop((@counter - 1));    // next iteration\n  width: (10px * @counter); // code for each iteration\n}\n\ndiv {\n  .loop(5); // launch the loop\n}\n\n\ndiv {\n  width: 10px;\n  width: 20px;\n  width: 30px;\n  width: 40px;\n  width: 50px;\n}\n\n\n.generate-columns(4);\n\n.generate-columns(@n, @i: 1) when (@i =< @n) {\n  .column-@{i} {\n    width: (@i * 100% / @n);\n  }\n  .generate-columns(@n, (@i + 1));\n}\n\n\n.column-1 {\n  width: 25%;\n}\n.column-2 {\n  width: 50%;\n}\n.column-3 {\n  width: 75%;\n}\n.column-4 {\n  width: 100%;\n}\n\n\n.mixin() {\n  box-shadow+: inset 0 0 10px #555;\n}\n.myclass {\n  .mixin();\n  box-shadow+: 0 0 20px black;\n}\n\n\n.myclass {\n  box-shadow: inset 0 0 10px #555, 0 0 20px black;\n}\n\n\n.mixin() {\n  transform+_: scale(2);\n}\n.myclass {\n  .mixin();\n  transform+_: rotate(15deg);\n}\n\n\n.myclass {\n  transform: scale(2) rotate(15deg);\n}\n\n\na {\n  color: blue;\n  &:hover {\n    color: green;\n  }\n}\n\n\na {\n  color: blue;\n}\n\na:hover {\n  color: green;\n}\n\n\n.button {\n  &-ok {\n    background-image: url(\"ok.png\");\n  }\n  &-cancel {\n    background-image: url(\"cancel.png\");\n  }\n\n  &-custom {\n    background-image: url(\"custom.png\");\n  }\n}\n\n\n.button-ok {\n  background-image: url(\"ok.png\");\n}\n.button-cancel {\n  background-image: url(\"cancel.png\");\n}\n.button-custom {\n  background-image: url(\"custom.png\");\n}\n\n\n.link {\n  & + & {\n    color: red;\n  }\n\n  & & {\n    color: green;\n  }\n\n  && {\n    color: blue;\n  }\n\n  &, &ish {\n    color: cyan;\n  }\n}\n\n\n.link + .link {\n  color: red;\n}\n.link .link {\n  color: green;\n}\n.link.link {\n  color: blue;\n}\n.link, .linkish {\n  color: cyan;\n}\n\n\n.grand {\n  .parent {\n    & > & {\n      color: red;\n    }\n\n    & & {\n      color: green;\n    }\n\n    && {\n      color: blue;\n    }\n\n    &, &ish {\n      color: cyan;\n    }\n  }\n}\n\n\n.grand .parent > .grand .parent {\n  color: red;\n}\n.grand .parent .grand .parent {\n  color: green;\n}\n.grand .parent.grand .parent {\n  color: blue;\n}\n.grand .parent,\n.grand .parentish {\n  color: cyan;\n}\n\n\n.header {\n  .menu {\n    border-radius: 5px;\n    .no-borderradius & {\n      background-image: url('images/button-background.png');\n    }\n  }\n}\n\n\n.header .menu {\n  border-radius: 5px;\n}\n.no-borderradius .header .menu {\n  background-image: url('images/button-background.png');\n}\n\n\np, a, ul, li {\n  border-top: 2px dotted #366;\n  & + & {\n    border-top: 0;\n  }\n}\n\n\np,\na,\nul,\nli {\n  border-top: 2px dotted #366;\n}\np + p,\np + a,\np + ul,\np + li,\na + p,\na + a,\na + ul,\na + li,\nul + p,\nul + a,\nul + ul,\nul + li,\nli + p,\nli + a,\nli + ul,\nli + li {\n  border-top: 0;\n}\n\n.foobar {\n  &:extend(.foo);\n}\n\n.thing {\n  &:hover {\n    background-color: blue;\n    .thing-child {}\n  }\n}\n\n.foo,\n  // Comment\n.bar {\n  // Comment\n  color: red; // Comment\n}\n\n// Variables\n@link-color: #428bca; // Comment\n\n[href]:hover &, // Comment'\n[href]:focus &, // Comment\"\n[href]:active & {\n  .tooltip {\n    opacity: 1;\n  }\n}\n\n// Usage\n@import // Comment\n  \"@{themes}/tidal-wave.less\";\n\n// Mixin with escaped /\n.margin-bottom-1\\\\/3() {\n  margin-bottom: 0.8rem;\n}\n\nlabel {\n  .margin-bottom-1\\\\/3;\n}\n\n// whitespace between variable and colon, #2925 #4090\n@FoO : bar;\n\n// should not parse as custom-selector\n@custom-selector     :--icon #id;\n\n// extend #7977\n.class {\n  &:extend(.some-class .some-other-class .some-very-loooooooooooooong-class all);\n}\n.class {\n  &:extend(\n    .some-class .some-other-class .some-very-loooooooooooooong-class all\n  );\n}\n.class {\n  &:extend(.some-class .some-other-class .some-very-loooooooooooooong-class .some-very-loooooooooooooong-class all);\n}\n\n// #8177\n.hello {\n  &:extend(.input:disabled)}") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "@nice-blue: #5b83ad;\n@light-blue: @nice-blue + #111;\n\n#header {\n  color: @light-blue;\n}\n\n#header {\n  color: #6c94be;\n}\n\n.bordered {\n  border-top: dotted 1px black;\n  border-bottom: solid 2px black;\n}\n\n#menu a {\n  color: #111;\n  .bordered;\n}\n\n.post a {\n  color: red;\n  .bordered;\n}\n\n#header {\n  color: black;\n}\n#header .navigation {\n  font-size: 12px;\n}\n#header .logo {\n  width: 300px;\n}\n\n#header {\n  color: black;\n  .navigation {\n    font-size: 12px;\n  }\n  .logo {\n    width: 300px;\n  }\n}\n\n.clearfix {\n  display: block;\n  zoom: 1;\n\n  &:after {\n    content: \" \";\n    display: block;\n    font-size: 0;\n    height: 0;\n    clear: both;\n    visibility: hidden;\n  }\n}\n\n.screen-color {\n  @media screen {\n    color: green;\n    @media (min-width: 768px) {\n      color: red;\n    }\n  }\n  @media tv {\n    color: black;\n  }\n}\n\n@media screen {\n  .screen-color {\n    color: green;\n  }\n}\n@media screen and (min-width: 768px) {\n  .screen-color {\n    color: red;\n  }\n}\n@media tv {\n  .screen-color {\n    color: black;\n  }\n}\n\n#a {\n  color: blue;\n  @font-face {\n    src: made-up-url;\n  }\n  padding: 2 2 2 2;\n}\n\n#a {\n  color: blue;\n}\n@font-face {\n  src: made-up-url;\n}\n#a {\n  padding: 2 2 2 2;\n}\n\n// numbers are converted into the same units\n@conversion-1: 5cm + 10mm; // result is 6cm\n@conversion-2: 2 - 3cm - 5mm; // result is -1.5cm\n\n// conversion is impossible\n@incompatible-units: 2 + 5px - 3cm; // result is 4px\n\n// example with variables\n@base: 5%;\n@filler: @base * 2; // result is 10%\n@other: @base + @filler; // result is 15%\n\n@base: 2cm * 3mm; // result is 6cm\n\n@color: #224488 / 2; //results in #112244\nbackground-color: #112244 + #111; // result is #223355\n\n.weird-element {\n  content: ~\"^//* some horrible but needed css hack\";\n}\n\n@base: #f04615;\n@width: 0.5;\n\n.class {\n  width: percentage(@width); // returns \\`50%\\`\n  color: saturate(@base, 5%);\n  background-color: spin(lighten(@base, 25%), 8);\n}\n\n#bundle {\n  .button {\n    display: block;\n    border: 1px solid black;\n    background-color: grey;\n    &:hover {\n      background-color: white;\n    }\n  }\n  .tab {\n    /* ... */\n  }\n  .citation {\n    /* ... */\n  }\n}\n\n#header a {\n  color: orange;\n  #bundle > .button;\n}\n\n@var: red;\n\n#page {\n  @var: white;\n  #header {\n    color: @var; // white\n  }\n}\n\n@var: red;\n\n#page {\n  #header {\n    color: @var; // white\n  }\n  @var: white;\n}\n\n/* One hell of a block\nstyle comment! */\n@var: red;\n\n// Get in line!\n@var: white;\n\n@import \"library\"; // library.less\n@import \"typo.css\";\n\na,\n.link {\n  color: #428bca;\n}\n.widget {\n  color: #fff;\n  background: #428bca;\n}\n\n// Variables\n@link-color: #428bca; // sea blue\n@link-color-hover: darken(@link-color, 10%);\n\n// Usage\na,\n.link {\n  color: @link-color;\n}\na:hover {\n  color: @link-color-hover;\n}\n.widget {\n  color: #fff;\n  background: @link-color;\n}\n\n// Variables\n@my-selector: banner;\n\n// Usage\n.@{my-selector} {\n  font-weight: bold;\n  line-height: 40px;\n  margin: 0 auto;\n}\n\n.banner {\n  font-weight: bold;\n  line-height: 40px;\n  margin: 0 auto;\n}\n\n// Variables\n@images: \"../img\";\n\n// Usage\nbody {\n  color: #444;\n  width: 100px;\n  background: url(\"/foo/@{images}/bar\");\n  background: url(\"@{images}/white-sand.\\${width}.png\");\n  background: url(@images);\n}\n\n// Variables\n@themes: \"../../src/themes\";\n\n// Usage\n@import \"@{themes}/tidal-wave.less\";\n\n@property: color;\n\n.widget {\n  @{property}: #0ee;\n  background-@{property}: #999;\n}\n\n.widget {\n  color: #0ee;\n  background-color: #999;\n}\n\n@fnord: \"I am fnord.\";\n@var: \"fnord\";\ncontent: @@var;\n\ncontent: \"I am fnord.\";\n\n.lazy-eval {\n  width: @var;\n}\n\n@var: @a;\n@a: 9%;\n\n.lazy-eval-scope {\n  width: @var;\n  @a: 9%;\n}\n\n@var: @a;\n@a: 100%;\n\n.lazy-eval-scope {\n  width: 9%;\n}\n\n@var: 0;\n.class {\n  @var: 1;\n  .brass {\n    @var: 2;\n    three: @var;\n    @var: 3;\n  }\n  one: @var;\n}\n\n.class {\n  one: 1;\n}\n.class .brass {\n  three: 3;\n}\n\n// library\n@base-color: green;\n@dark-color: darken(@base-color, 10%);\n\n// use of library\n@import \"library.less\";\n@base-color: red;\n\nnav ul {\n  &:extend(.inline);\n  background: blue;\n}\n\nnav ul {\n  &:extend(.inline);\n  background: blue;\n}\n.inline {\n  color: red;\n}\n\nnav ul {\n  background: blue;\n}\n.inline,\nnav ul {\n  color: red;\n}\n\n.a:extend(.b) {\n}\n\n// the above block does the same thing as the below block\n.a {\n  &:extend(.b);\n}\n\n.c:extend(.d all) {\n  // extends all instances of \".d\" e.g. \".x.d\" or \".d.x\"\n}\n.c:extend(.d) {\n  // extends only instances where the selector will be output as just \".d\"\n}\n\n.e:extend(.f) {\n}\n.e:extend(.g) {\n}\n\n// the above an the below do the same thing\n.e:extend(.f, .g) {\n}\n\n.big-division,\n.big-bag:extend(.bag),\n.big-bucket:extend(.bucket) {\n  // body\n}\n\npre:hover,\n.some-class {\n  &:extend(div pre);\n}\n\npre:hover:extend(div pre),\n.some-class:extend(div pre) {\n}\n\n.bucket {\n  tr {\n    // nested ruleset with target selector\n    color: blue;\n  }\n}\n.some-class:extend(.bucket tr) {\n} // nested ruleset is recognized\n\n.bucket tr,\n.some-class {\n  color: blue;\n}\n\n.bucket {\n  tr & {\n    // nested ruleset with target selector\n    color: blue;\n  }\n}\n.some-class:extend(tr .bucket) {\n} // nested ruleset is recognized\n\ntr .bucket,\n.some-class {\n  color: blue;\n}\n\n.a.class,\n.class.a,\n.class > .a {\n  color: blue;\n}\n.test:extend(.class) {\n} // this will NOT match the any selectors above\n\n*.class {\n  color: blue;\n}\n.noStar:extend(.class) {\n} // this will NOT match the *.class selector\n\n*.class {\n  color: blue;\n}\n\nlink:hover:visited {\n  color: blue;\n}\n.selector:extend(link:visited:hover) {\n}\n\nlink:hover:visited {\n  color: blue;\n}\n\n:nth-child(1n + 3) {\n  color: blue;\n}\n.child:extend(:nth-child(n + 3)) {\n}\n\n:nth-child(1n + 3) {\n  color: blue;\n}\n\n[title=\"identifier\"] {\n  color: blue;\n}\n[title=\"identifier\"] {\n  color: blue;\n}\n[title=\"identifier\"] {\n  color: blue;\n}\n\n.noQuote:extend([title=\"identifier\"]) {\n}\n.singleQuote:extend([title=\"identifier\"]) {\n}\n.doubleQuote:extend([title=\"identifier\"]) {\n}\n\n[title=\"identifier\"],\n.noQuote,\n.singleQuote,\n.doubleQuote {\n  color: blue;\n}\n\n[title=\"identifier\"],\n.noQuote,\n.singleQuote,\n.doubleQuote {\n  color: blue;\n}\n\n[title=\"identifier\"],\n.noQuote,\n.singleQuote,\n.doubleQuote {\n  color: blue;\n}\n\n.a.b.test,\n.test.c {\n  color: orange;\n}\n.test {\n  &:hover {\n    color: green;\n  }\n}\n\n.replacement:extend(.test all) {\n}\n\n.a.b.test,\n.test.c,\n.a.b.replacement,\n.replacement.c {\n  color: orange;\n}\n.test:hover,\n.replacement:hover {\n  color: green;\n}\n\n@variable: .bucket;\n@{variable} {\n  // interpolated selector\n  color: blue;\n}\n.some-class:extend(.bucket) {\n} // does nothing, no match is found\n\n.bucket {\n  color: blue;\n}\n.some-class:extend(@{variable}) {\n} // interpolated selector matches nothing\n@variable: .bucket;\n\n.bucket {\n  color: blue;\n}\n\n.bucket {\n  color: blue;\n}\n@{variable}:extend(.bucket) {\n}\n@variable: .selector;\n\n.bucket,\n.selector {\n  color: blue;\n}\n\n@media print {\n  .screenClass:extend(.selector) {\n  } // extend inside media\n  .selector {\n    // this will be matched - it is in the same media\n    color: black;\n  }\n}\n.selector {\n  // ruleset on top of style sheet - extend ignores it\n  color: red;\n}\n@media screen {\n  .selector {\n    // ruleset inside another media - extend ignores it\n    color: blue;\n  }\n}\n\n@media print {\n  .selector,\n  .screenClass {\n    /*  ruleset inside the same media was extended */\n    color: black;\n  }\n}\n.selector {\n  /* ruleset on top of style sheet was ignored */\n  color: red;\n}\n@media screen {\n  .selector {\n    /* ruleset inside another media was ignored */\n    color: blue;\n  }\n}\n\n@media screen {\n  .screenClass:extend(.selector) {\n  } // extend inside media\n  @media (min-width: 1023px) {\n    .selector {\n      // ruleset inside nested media - extend ignores it\n      color: blue;\n    }\n  }\n}\n\n@media screen and (min-width: 1023px) {\n  .selector {\n    /* ruleset inside another nested media was ignored */\n    color: blue;\n  }\n}\n\n@media screen {\n  .selector {\n    /* ruleset inside nested media - top level extend works */\n    color: blue;\n  }\n  @media (min-width: 1023px) {\n    .selector {\n      /* ruleset inside nested media - top level extend works */\n      color: blue;\n    }\n  }\n}\n\n.topLevel:extend(.selector) {\n} /* top level extend matches everything */\n\n@media screen {\n  .selector,\n  .topLevel {\n    /* ruleset inside media was extended */\n    color: blue;\n  }\n}\n@media screen and (min-width: 1023px) {\n  .selector,\n  .topLevel {\n    /* ruleset inside nested media was extended */\n    color: blue;\n  }\n}\n\n.alert-info,\n.widget {\n  /* declarations */\n}\n\n.alert:extend(.alert-info, .widget) {\n}\n\n.alert-info,\n.widget,\n.alert,\n.alert {\n  /* declarations */\n}\n\n.animal {\n  background-color: black;\n  color: white;\n}\n\n.animal {\n  background-color: black;\n  color: white;\n}\n.bear {\n  background-color: brown;\n}\n\n.animal {\n  background-color: black;\n  color: white;\n}\n.bear {\n  &:extend(.animal);\n  background-color: brown;\n}\n\n.my-inline-block() {\n  display: inline-block;\n  font-size: 0;\n}\n.thing1 {\n  .my-inline-block;\n}\n.thing2 {\n  .my-inline-block;\n}\n\n.thing1 {\n  display: inline-block;\n  font-size: 0;\n}\n.thing2 {\n  display: inline-block;\n  font-size: 0;\n}\n\n.my-inline-block {\n  display: inline-block;\n  font-size: 0;\n}\n.thing1 {\n  &:extend(.my-inline-block);\n}\n.thing2 {\n  &:extend(.my-inline-block);\n}\n\n.my-inline-block,\n.thing1,\n.thing2 {\n  display: inline-block;\n  font-size: 0;\n}\n\nli.list > a {\n  // list styles\n}\nbutton.list-style {\n  &:extend(li.list > a); // use the same list styles\n}\n\n.a,\n#b {\n  color: red;\n}\n.mixin-class {\n  .a();\n}\n.mixin-id {\n  #b();\n}\n\n.a,\n#b {\n  color: red;\n}\n.mixin-class {\n  color: red;\n}\n.mixin-id {\n  color: red;\n}\n\n// these two statements do the same thing:\n.a();\n.a;\n\n.my-mixin {\n  color: black;\n}\n.my-other-mixin() {\n  background: white;\n}\n.class {\n  .my-mixin;\n  .my-other-mixin;\n}\n\n.my-mixin {\n  color: black;\n}\n.class {\n  color: black;\n  background: white;\n}\n\n.my-hover-mixin() {\n  &:hover {\n    border: 1px solid red;\n  }\n}\nbutton {\n  .my-hover-mixin();\n}\n\nbutton:hover {\n  border: 1px solid red;\n}\n\n#outer {\n  .inner {\n    color: red;\n  }\n}\n\n.c {\n  #outer > .inner;\n}\n\n// all do the same thing\n#outer > .inner;\n#outer > .inner();\n#outer .inner;\n#outer .inner();\n#outer.inner;\n#outer.inner();\n\n#my-library {\n  .my-mixin() {\n    color: black;\n  }\n}\n// which can be used like this\n.class {\n  #my-library > .my-mixin();\n}\n\n#namespace when (@mode=huge) {\n  .mixin() {\n    /* */\n  }\n}\n\n#namespace {\n  .mixin() when (@mode=huge) {\n    /* */\n  }\n}\n\n#sp_1 when (default()) {\n  #sp_2 when (default()) {\n    .mixin() when not(default()) {\n      /* */\n    }\n  }\n}\n\n.foo (@bg: #f5f5f5, @color: #900) {\n  background: @bg;\n  color: @color;\n}\n.unimportant {\n  .foo();\n}\n.important {\n  .foo() !important;\n}\n\n.unimportant {\n  background: #f5f5f5;\n  color: #900;\n}\n.important {\n  background: #f5f5f5 !important;\n  color: #900 !important;\n}\n\n.border-radius(@radius) {\n  -webkit-border-radius: @radius;\n  -moz-border-radius: @radius;\n  border-radius: @radius;\n}\n\n#header {\n  .border-radius(4px);\n}\n.button {\n  .border-radius(6px);\n}\n\n.border-radius(@radius: 5px) {\n  -webkit-border-radius: @radius;\n  -moz-border-radius: @radius;\n  border-radius: @radius;\n}\n\n#header {\n  .border-radius;\n}\n\n.wrap() {\n  text-wrap: wrap;\n  white-space: -moz-pre-wrap;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n\npre {\n  .wrap;\n}\n\npre {\n  text-wrap: wrap;\n  white-space: -moz-pre-wrap;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n\n.mixin(@color) {\n  color-1: @color;\n}\n.mixin(@color; @padding: 2) {\n  color-2: @color;\n  padding-2: @padding;\n}\n.mixin(@color; @padding; @margin: 2) {\n  color-3: @color;\n  padding-3: @padding;\n  margin: @margin @margin @margin @margin;\n}\n.some .selector div {\n  .mixin(#008000);\n}\n\n.some .selector div {\n  color-1: #008000;\n  color-2: #008000;\n  padding-2: 2;\n}\n\n.mixin(@color: black; @margin: 10px; @padding: 20px) {\n  color: @color;\n  margin: @margin;\n  padding: @padding;\n}\n.class1 {\n  .mixin(@margin: 20px; @color: #33acfe);\n}\n.class2 {\n  .mixin(#efca44; @padding: 40px);\n}\n\n.class1 {\n  color: #33acfe;\n  margin: 20px;\n  padding: 20px;\n}\n.class2 {\n  color: #efca44;\n  margin: 10px;\n  padding: 40px;\n}\n\n.box-shadow(@x: 0; @y: 0; @blur: 1px; @color: #000) {\n  -webkit-box-shadow: @arguments;\n  -moz-box-shadow: @arguments;\n  box-shadow: @arguments;\n}\n.big-block {\n  .box-shadow(2px; 5px);\n}\n\n.big-block {\n  -webkit-box-shadow: 2px 5px 1px #000;\n  -moz-box-shadow: 2px 5px 1px #000;\n  box-shadow: 2px 5px 1px #000;\n}\n\n.mixin(/* ... */) {\n} // matches 0-N arguments\n.mixin() {\n} // matches exactly 0 arguments\n.mixin(@a: 1) {\n} // matches 0-1 arguments\n.mixin(@a: 1; /* ... */) {\n} // matches 0-N arguments\n.mixin(@a; /* ... */) {\n} // matches 1-N arguments\n\n.mixin(@a; @rest...) {\n  // @rest is bound to arguments after @a\n  // @arguments is bound to all arguments\n}\n\n.mixin(@s; @color) {\n  /* ... */\n}\n\n.class {\n  .mixin(@switch; #888);\n}\n\n.mixin(dark; @color) {\n  color: darken(@color, 10%);\n}\n.mixin(light; @color) {\n  color: lighten(@color, 10%);\n}\n.mixin(@_; @color) {\n  display: block;\n}\n\n@switch: light;\n\n.class {\n  .mixin(@switch; #888);\n}\n\n.class {\n  color: #a2a2a2;\n  display: block;\n}\n\n.mixin(@a) {\n  color: @a;\n}\n.mixin(@a; @b) {\n  color: fade(@a; @b);\n}\n\n.mixin() {\n  @width: 100%;\n  @height: 200px;\n}\n\n.caller {\n  .mixin();\n  width: @width;\n  height: @height;\n}\n\n.caller {\n  width: 100%;\n  height: 200px;\n}\n\n.average(@x, @y) {\n  @average: ((@x + @y) / 2);\n}\n\ndiv {\n  .average(16px, 50px); // \"call\" the mixin\n  padding: @average; // use its \"return\" value\n}\n\ndiv {\n  padding: 33px;\n}\n\n.mixin() {\n  @size: in-mixin;\n  @definedOnlyInMixin: in-mixin;\n}\n\n.class {\n  margin: @size @definedOnlyInMixin;\n  .mixin();\n}\n\n@size: globally-defined-value; // callers parent scope - no protection\n\n.class {\n  margin: in-mixin in-mixin;\n}\n\n.unlock(@value) {\n  // outer mixin\n  .doSomething() {\n    // nested mixin\n    declaration: @value;\n  }\n}\n\n#namespace {\n  .unlock(5); // unlock doSomething mixin\n  .doSomething(); //nested mixin was copied here and is usable\n}\n\n#namespace {\n  declaration: 5;\n}\n\n// declare detached ruleset\n@detached-ruleset: {\n  background: red;\n};\n\n// use detached ruleset\n.top {\n  @detached-ruleset();\n}\n\n.top {\n  background: red;\n}\n\n.desktop-and-old-ie(@rules) {\n  @media screen and (min-width: 1200px) {\n    @rules();\n  }\n  html.lt-ie9 & {\n    @rules();\n  }\n}\n\nheader {\n  background-color: blue;\n\n  .desktop-and-old-ie({\n    background-color: red;\n  });\n}\n\nheader {\n  background-color: blue;\n}\n@media screen and (min-width: 1200px) {\n  header {\n    background-color: red;\n  }\n}\nhtml.lt-ie9 header {\n  background-color: red;\n}\n\n@my-ruleset: {\n  .my-selector {\n    background-color: black;\n  }\n};\n\n@my-ruleset: {\n  .my-selector {\n    @media tv {\n      background-color: black;\n    }\n  }\n};\n@media (orientation: portrait) {\n  @my-ruleset();\n}\n\n@media (orientation: portrait) and tv {\n  .my-selector {\n    background-color: black;\n  }\n}\n\n// detached ruleset with a mixin\n@detached-ruleset: {\n  .mixin() {\n    color: blue;\n  }\n};\n// call detached ruleset\n.caller {\n  @detached-ruleset();\n  .mixin();\n}\n\n.caller {\n  color: blue;\n}\n\n@detached-ruleset: {\n  @color: blue; // this variable is private\n};\n.caller {\n  color: @color; // syntax error\n}\n\n@detached-ruleset: {\n  caller-variable: @caller-variable; // variable is undefined here\n  .caller-mixin(); // mixin is undefined here\n};\n\nselector {\n  // use detached ruleset\n  @detached-ruleset();\n\n  // define variable and mixin needed inside the detached ruleset\n  @caller-variable: value;\n  .caller-mixin() {\n    variable: declaration;\n  }\n}\n\nselector {\n  caller-variable: value;\n  variable: declaration;\n}\n\n@variable: global;\n@detached-ruleset: {\n  // will use global variable, because it is accessible\n  // from detached-ruleset definition\n  variable: @variable;\n};\n\nselector {\n  @detached-ruleset();\n  @variable: value; // variable defined in caller - will be ignored\n}\n\nselector {\n  variable: global;\n}\n\n@detached-1: {\n  scope-detached: @one @two;\n};\n.one {\n  @one: visible;\n  .two {\n    @detached-2: @detached-1; // copying/renaming ruleset\n    @two: visible; // ruleset can not see this variable\n  }\n}\n\n.use-place {\n  .one > .two();\n  @detached-2();\n}\n\n#space {\n  .importer-1() {\n    @detached: {\n      scope-detached: @variable;\n    }; // define detached ruleset\n  }\n}\n\n.importer-2() {\n  @variable: value; // unlocked detached ruleset CAN see this variable\n  #space > .importer-1(); // unlock/import detached ruleset\n}\n\n.use-place {\n  .importer-2(); // unlock/import detached ruleset second time\n  @detached();\n}\n\n.use-place {\n  scope-detached: value;\n}\n\n@my-ruleset: {\n  .my-selector {\n    @media tv {\n      background-color: black;\n    }\n  }\n};\n\n.foo {\n  background: #900;\n}\n@import \"this-is-valid.less\";\n\n@import \"foo\"; // foo.less is imported\n@import \"foo.less\"; // foo.less is imported\n@import \"foo.php\"; // foo.php imported as a less file\n@import \"foo.css\"; // statement left in place, as-is\n\n.navbar:extend(.navbar all) {\n}\n\n@import (less) \"foo.css\";\n\n@import (css) \"foo.less\";\n\n@import \"foo.less\";\n\n@import (once) \"foo.less\";\n@import (once) \"foo.less\"; // this statement will be ignored\n\n// file: foo.less\n.a {\n  color: green;\n}\n// file: main.less\n@import (multiple) \"foo.less\";\n@import (multiple) \"foo.less\";\n\n.a {\n  color: green;\n}\n.a {\n  color: green;\n}\n\n.mixin (@a) when (lightness(@a) >= 50%) {\n  background-color: black;\n}\n.mixin (@a) when (lightness(@a) < 50%) {\n  background-color: white;\n}\n.mixin (@a) {\n  color: @a;\n}\n\n.class1 {\n  .mixin(#ddd);\n}\n.class2 {\n  .mixin(#555);\n}\n\n.class1 {\n  background-color: black;\n  color: #ddd;\n}\n.class2 {\n  background-color: white;\n  color: #555;\n}\n\n.truth (@a) when (@a) {\n  /* ... */\n}\n.truth (@a) when (@a = true) {\n  /* ... */\n}\n\n.class {\n  .truth(40); // Will not match any of the above definitions.\n}\n\n@media: mobile;\n\n.mixin (@a) when (@media = mobile) {\n  /* ... */\n}\n.mixin (@a) when (@media = desktop) {\n  /* ... */\n}\n\n.max (@a; @b) when (@a > @b) {\n  width: @a;\n}\n.max (@a; @b) when (@a < @b) {\n  width: @b;\n}\n\n.mixin (@a) when (isnumber(@a)) and (@a > 0) {\n  /* ... */\n}\n\n.mixin (@a) when (@a > 10), (@a < -10) {\n  /* ... */\n}\n\n.mixin (@b) when not (@b > 0) {\n  /* ... */\n}\n\n.mixin (@a; @b: 0) when (isnumber(@b)) {\n  /* ... */\n}\n.mixin (@a; @b: black) when (iscolor(@b)) {\n  /* ... */\n}\n\n.mixin (@a) when (@a > 0) {\n  /* ... */\n}\n.mixin (@a) when (default()) {\n  /* ... */\n} // matches only if first mixin does not, i.e. when @a <= 0\n\n.my-optional-style() when (@my-option = true) {\n  button {\n    color: white;\n  }\n}\n.my-optional-style();\n\nbutton when (@my-option = true) {\n  color: white;\n}\n\n& when (@my-option = true) {\n  button {\n    color: white;\n  }\n  a {\n    color: blue;\n  }\n}\n\n.loop(@counter) when (@counter > 0) {\n  .loop((@counter - 1)); // next iteration\n  width: (10px * @counter); // code for each iteration\n}\n\ndiv {\n  .loop(5); // launch the loop\n}\n\ndiv {\n  width: 10px;\n  width: 20px;\n  width: 30px;\n  width: 40px;\n  width: 50px;\n}\n\n.generate-columns(4);\n\n.generate-columns(@n, @i: 1) when (@i =< @n) {\n  .column-@{i} {\n    width: (@i * 100% / @n);\n  }\n  .generate-columns(@n, (@i + 1));\n}\n\n.column-1 {\n  width: 25%;\n}\n.column-2 {\n  width: 50%;\n}\n.column-3 {\n  width: 75%;\n}\n.column-4 {\n  width: 100%;\n}\n\n.mixin() {\n  box-shadow+: inset 0 0 10px #555;\n}\n.myclass {\n  .mixin();\n  box-shadow+: 0 0 20px black;\n}\n\n.myclass {\n  box-shadow:\n    inset 0 0 10px #555,\n    0 0 20px black;\n}\n\n.mixin() {\n  transform+_: scale(2);\n}\n.myclass {\n  .mixin();\n  transform+_: rotate(15deg);\n}\n\n.myclass {\n  transform: scale(2) rotate(15deg);\n}\n\na {\n  color: blue;\n  &:hover {\n    color: green;\n  }\n}\n\na {\n  color: blue;\n}\n\na:hover {\n  color: green;\n}\n\n.button {\n  &-ok {\n    background-image: url(\"ok.png\");\n  }\n  &-cancel {\n    background-image: url(\"cancel.png\");\n  }\n\n  &-custom {\n    background-image: url(\"custom.png\");\n  }\n}\n\n.button-ok {\n  background-image: url(\"ok.png\");\n}\n.button-cancel {\n  background-image: url(\"cancel.png\");\n}\n.button-custom {\n  background-image: url(\"custom.png\");\n}\n\n.link {\n  & + & {\n    color: red;\n  }\n\n  & & {\n    color: green;\n  }\n\n  && {\n    color: blue;\n  }\n\n  &,\n  &ish {\n    color: cyan;\n  }\n}\n\n.link + .link {\n  color: red;\n}\n.link .link {\n  color: green;\n}\n.link.link {\n  color: blue;\n}\n.link,\n.linkish {\n  color: cyan;\n}\n\n.grand {\n  .parent {\n    & > & {\n      color: red;\n    }\n\n    & & {\n      color: green;\n    }\n\n    && {\n      color: blue;\n    }\n\n    &,\n    &ish {\n      color: cyan;\n    }\n  }\n}\n\n.grand .parent > .grand .parent {\n  color: red;\n}\n.grand .parent .grand .parent {\n  color: green;\n}\n.grand .parent.grand .parent {\n  color: blue;\n}\n.grand .parent,\n.grand .parentish {\n  color: cyan;\n}\n\n.header {\n  .menu {\n    border-radius: 5px;\n    .no-borderradius & {\n      background-image: url(\"images/button-background.png\");\n    }\n  }\n}\n\n.header .menu {\n  border-radius: 5px;\n}\n.no-borderradius .header .menu {\n  background-image: url(\"images/button-background.png\");\n}\n\np,\na,\nul,\nli {\n  border-top: 2px dotted #366;\n  & + & {\n    border-top: 0;\n  }\n}\n\np,\na,\nul,\nli {\n  border-top: 2px dotted #366;\n}\np + p,\np + a,\np + ul,\np + li,\na + p,\na + a,\na + ul,\na + li,\nul + p,\nul + a,\nul + ul,\nul + li,\nli + p,\nli + a,\nli + ul,\nli + li {\n  border-top: 0;\n}\n\n.foobar {\n  &:extend(.foo);\n}\n\n.thing {\n  &:hover {\n    background-color: blue;\n    .thing-child {\n    }\n  }\n}\n\n.foo,\n  // Comment\n.bar {\n  // Comment\n  color: red; // Comment\n}\n\n// Variables\n@link-color: #428bca; // Comment\n\n[href]:hover &, // Comment'\n[href]:focus &, // Comment\"\n[href]:active & {\n  .tooltip {\n    opacity: 1;\n  }\n}\n\n// Usage\n@import // Comment\n  \"@{themes}/tidal-wave.less\";\n\n// Mixin with escaped /\n.margin-bottom-1\\\\/3() {\n  margin-bottom: 0.8rem;\n}\n\nlabel {\n  .margin-bottom-1\\\\/3;\n}\n\n// whitespace between variable and colon, #2925 #4090\n@FoO: bar;\n\n// should not parse as custom-selector\n@custom-selector: --icon #id;\n\n// extend #7977\n.class {\n  &:extend(.some-class\n    .some-other-class\n    .some-very-loooooooooooooong-class\n    all);\n}\n.class {\n  &:extend(.some-class\n    .some-other-class\n    .some-very-loooooooooooooong-class\n    all);\n}\n.class {\n  &:extend(.some-class\n    .some-other-class\n    .some-very-loooooooooooooong-class\n    .some-very-loooooooooooooong-class\n    all);\n}\n\n// #8177\n.hello {\n  &:extend(.input:disabled);\n}");
}
#[test]
fn test_quotes_in_comments_less_format_1_547071eb() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parser("less")
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("// Animation   \n// '\n.a { color: red }\n\n.aa:hover::after { content: \"\\\\\"\"; } // \"\n    \n    \n.b { background:url(http://example.com); }   .b::after { content: \"a\"; }\n\n.bb { background:url('http://example.com/(foo)bar'); }   .bb::after { content: \"'a\"; } // \"\"\"\n\n// Animation   !\n.c { color:red    }\n\n.d { color: red /* // */ }  .d::after { content: \"'\"; }\n\n/*        fff\n   //   */     .d:hover::after {\n     // qw'erty \n    content: \"'''\"; }\n   \n[href]:active  {\n  opacity:   // '!' \"?\"\n    1;\n") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "// Animation\n// '\n.a {\n  color: red;\n}\n\n.aa:hover::after {\n  content: '\"';\n} // \"\n\n.b {\n  background: url(http://example.com);\n}\n.b::after {\n  content: \"a\";\n}\n\n.bb {\n  background: url(\"http://example.com/(foo)bar\");\n}\n.bb::after {\n  content: \"'a\";\n} // \"\"\"\n\n// Animation   !\n.c {\n  color: red;\n}\n\n.d {\n  color: red; /* // */\n}\n.d::after {\n  content: \"'\";\n}\n\n/*        fff\n   //   */\n.d:hover::after {\n  // qw'erty\n  content: \"'''\";\n}\n\n[href]:active {\n  opacity: // '!' \"?\"\n    1;\n}");
}
