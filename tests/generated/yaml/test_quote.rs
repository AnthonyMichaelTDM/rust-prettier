#[allow(unused_imports)]
use rust_prettier::PrettyPrinterBuilder;
#[allow(dead_code)]
static INFINITY: usize = usize::MAX;
#[test]
fn test_multiline_yml_prose_wrapalways_format_1_cdcda6a8() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parsers(vec!["yaml"])
        .print_width(80)
        .prose_wrap("always")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("a: \"   \n  123123123123123123123123123   \n       123123123123123123123123123   \n         123123123123123123123123123\t\t\t\t\n    123123123123123123123123123   \n      123123123123123123123123123   \n  123123123123123123123123123   \n            123123123123123123123123123\t\t\t\t\n         \n         123123123123123123123123123   \n         \n         \n         123123123123123123123123123      \n         \n         \n         \n         \n         123123123123123123123123123  \n    \"\nb: '   \n  123123123123123123123123123   \n       123123123123123123123123123   \n         123123123123123123123123123\t\t\t\t\n    123123123123123123123123123   \n      123123123123123123123123123   \n  123123123123123123123123123   \n            123123123123123123123123123\t\t\t\t\n         \n         123123123123123123123123123   \n         \n         \n         123123123123123123123123123      \n         \n         \n         \n         \n         123123123123123123123123123  \n    '") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "a: \"\n  123123123123123123123123123 123123123123123123123123123\n  123123123123123123123123123 123123123123123123123123123\n  123123123123123123123123123 123123123123123123123123123\n  123123123123123123123123123\n\n  123123123123123123123123123\n\n\n  123123123123123123123123123\n\n\n\n\n  123123123123123123123123123\n  \"\nb: \"\n  123123123123123123123123123 123123123123123123123123123\n  123123123123123123123123123 123123123123123123123123123\n  123123123123123123123123123 123123123123123123123123123\n  123123123123123123123123123\n\n  123123123123123123123123123\n\n\n  123123123123123123123123123\n\n\n\n\n  123123123123123123123123123\n  \"");
}
#[test]
fn test_multiline_yml_prose_wrapnever_format_1_cdcda6a8() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parsers(vec!["yaml"])
        .print_width(80)
        .prose_wrap("never")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("a: \"   \n  123123123123123123123123123   \n       123123123123123123123123123   \n         123123123123123123123123123\t\t\t\t\n    123123123123123123123123123   \n      123123123123123123123123123   \n  123123123123123123123123123   \n            123123123123123123123123123\t\t\t\t\n         \n         123123123123123123123123123   \n         \n         \n         123123123123123123123123123      \n         \n         \n         \n         \n         123123123123123123123123123  \n    \"\nb: '   \n  123123123123123123123123123   \n       123123123123123123123123123   \n         123123123123123123123123123\t\t\t\t\n    123123123123123123123123123   \n      123123123123123123123123123   \n  123123123123123123123123123   \n            123123123123123123123123123\t\t\t\t\n         \n         123123123123123123123123123   \n         \n         \n         123123123123123123123123123      \n         \n         \n         \n         \n         123123123123123123123123123  \n    '") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "a: \"\n  123123123123123123123123123 123123123123123123123123123 123123123123123123123123123 123123123123123123123123123 123123123123123123123123123 123123123123123123123123123 123123123123123123123123123\n\n  123123123123123123123123123\n\n\n  123123123123123123123123123\n\n\n\n\n  123123123123123123123123123\n  \"\nb: \"\n  123123123123123123123123123 123123123123123123123123123 123123123123123123123123123 123123123123123123123123123 123123123123123123123123123 123123123123123123123123123 123123123123123123123123123\n\n  123123123123123123123123123\n\n\n  123123123123123123123123123\n\n\n\n\n  123123123123123123123123123\n  \"");
}
#[test]
fn test_multiline_yml_single_quotetrue_format_1_cdcda6a8() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parsers(vec!["yaml"])
        .print_width(80)
        .single_quote(true)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("a: \"   \n  123123123123123123123123123   \n       123123123123123123123123123   \n         123123123123123123123123123\t\t\t\t\n    123123123123123123123123123   \n      123123123123123123123123123   \n  123123123123123123123123123   \n            123123123123123123123123123\t\t\t\t\n         \n         123123123123123123123123123   \n         \n         \n         123123123123123123123123123      \n         \n         \n         \n         \n         123123123123123123123123123  \n    \"\nb: '   \n  123123123123123123123123123   \n       123123123123123123123123123   \n         123123123123123123123123123\t\t\t\t\n    123123123123123123123123123   \n      123123123123123123123123123   \n  123123123123123123123123123   \n            123123123123123123123123123\t\t\t\t\n         \n         123123123123123123123123123   \n         \n         \n         123123123123123123123123123      \n         \n         \n         \n         \n         123123123123123123123123123  \n    '") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "a: '\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n\n  123123123123123123123123123\n\n\n  123123123123123123123123123\n\n\n\n\n  123123123123123123123123123\n  '\nb: '\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n\n  123123123123123123123123123\n\n\n  123123123123123123123123123\n\n\n\n\n  123123123123123123123123123\n  '");
}
#[test]
fn test_multiline_yml_format_1_cdcda6a8() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parsers(vec!["yaml"])
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("a: \"   \n  123123123123123123123123123   \n       123123123123123123123123123   \n         123123123123123123123123123\t\t\t\t\n    123123123123123123123123123   \n      123123123123123123123123123   \n  123123123123123123123123123   \n            123123123123123123123123123\t\t\t\t\n         \n         123123123123123123123123123   \n         \n         \n         123123123123123123123123123      \n         \n         \n         \n         \n         123123123123123123123123123  \n    \"\nb: '   \n  123123123123123123123123123   \n       123123123123123123123123123   \n         123123123123123123123123123\t\t\t\t\n    123123123123123123123123123   \n      123123123123123123123123123   \n  123123123123123123123123123   \n            123123123123123123123123123\t\t\t\t\n         \n         123123123123123123123123123   \n         \n         \n         123123123123123123123123123      \n         \n         \n         \n         \n         123123123123123123123123123  \n    '") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "a: \"\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n\n  123123123123123123123123123\n\n\n  123123123123123123123123123\n\n\n\n\n  123123123123123123123123123\n  \"\nb: \"\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n  123123123123123123123123123\n\n  123123123123123123123123123\n\n\n  123123123123123123123123123\n\n\n\n\n  123123123123123123123123123\n  \"");
}
#[test]
fn test_quote_yml_prose_wrapalways_format_1_0e8d34df() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parsers(vec!["yaml"])
        .print_width(80)
        .prose_wrap("always")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("- \"123\"\n- '123'\n- \"''\"\n- '\"\"'\n- ''''\n- \"\\\\\"\\\\\"\"\n- '\\\\n123'\n- \"\\\\n123\"\n- \"'a\\\\\"b\"") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "- \"123\"\n- \"123\"\n- \"''\"\n- '\"\"'\n- \"'\"\n- '\"\"'\n- '\\\\n123'\n- \"\\\\n123\"\n- '''a\"b'");
}
#[test]
fn test_quote_yml_prose_wrapnever_format_1_0e8d34df() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parsers(vec!["yaml"])
        .print_width(80)
        .prose_wrap("never")
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("- \"123\"\n- '123'\n- \"''\"\n- '\"\"'\n- ''''\n- \"\\\\\"\\\\\"\"\n- '\\\\n123'\n- \"\\\\n123\"\n- \"'a\\\\\"b\"") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "- \"123\"\n- \"123\"\n- \"''\"\n- '\"\"'\n- \"'\"\n- '\"\"'\n- '\\\\n123'\n- \"\\\\n123\"\n- '''a\"b'");
}
#[test]
fn test_quote_yml_single_quotetrue_format_1_0e8d34df() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parsers(vec!["yaml"])
        .print_width(80)
        .single_quote(true)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("- \"123\"\n- '123'\n- \"''\"\n- '\"\"'\n- ''''\n- \"\\\\\"\\\\\"\"\n- '\\\\n123'\n- \"\\\\n123\"\n- \"'a\\\\\"b\"") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "- '123'\n- '123'\n- \"''\"\n- '\"\"'\n- \"'\"\n- '\"\"'\n- '\\\\n123'\n- \"\\\\n123\"\n- '''a\"b'");
}
#[test]
fn test_quote_yml_format_1_0e8d34df() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parsers(vec!["yaml"])
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("- \"123\"\n- '123'\n- \"''\"\n- '\"\"'\n- ''''\n- \"\\\\\"\\\\\"\"\n- '\\\\n123'\n- \"\\\\n123\"\n- \"'a\\\\\"b\"") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "- \"123\"\n- \"123\"\n- \"''\"\n- '\"\"'\n- \"'\"\n- '\"\"'\n- '\\\\n123'\n- \"\\\\n123\"\n- '''a\"b'");
}
