#[allow(unused_imports)]
use rust_prettier::PrettyPrinterBuilder;
#[allow(dead_code)]
static INFINITY: usize = usize::MAX;
#[test]
fn test_documents_yml_format_1_17d1806a() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parsers(vec!["yaml"])
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer.format("---\n123\n...\n---\n456");
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq!(formatted, "---\n123\n---\n456");
}
#[test]
fn test_documents_with_directive_yml_format_1_acbbba49() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parsers(vec!["yaml"])
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer.format("---\n123\n...\n%YAML 1.2\n---\n456");
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq!(formatted, "---\n123\n...\n%YAML 1.2\n---\n456");
}
#[test]
fn test_empty_yml_format_1_68b329da() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parsers(vec!["yaml"])
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer.format("");
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq!(formatted, "");
}
#[test]
fn test_example_yml_format_1_2f95c2b6() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .print_width(80)
        .parsers(vec!["yaml"])
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("---\n# Collection Types #############################################################\n################################################################################\n\n# http://yaml.org/type/map.html -----------------------------------------------#\n\nmap:\n  # Unordered set of key: value pairs.\n  Block style: !!map\n    Clark : Evans\n    Ingy  : döt Net\n    Oren  : Ben-Kiki\n  Flow style: !!map { Clark: Evans, Ingy: döt Net, Oren: Ben-Kiki }\n\n# http://yaml.org/type/omap.html ----------------------------------------------#\n\nomap:\n  # Explicitly typed ordered map (dictionary).\n  Bestiary: !!omap\n    - aardvark: African pig-like ant eater. Ugly.\n    - anteater: South-American ant eater. Two species.\n    - anaconda: South-American constrictor snake. Scaly.\n    # Etc.\n  # Flow style\n  Numbers: !!omap [ one: 1, two: 2, three : 3 ]\n\n# http://yaml.org/type/pairs.html ---------------------------------------------#\n\npairs:\n  # Explicitly typed pairs.\n  Block tasks: !!pairs\n    - meeting: with team.\n    - meeting: with boss.\n    - break: lunch.\n    - meeting: with client.\n  Flow tasks: !!pairs [ meeting: with team, meeting: with boss ]\n\n# http://yaml.org/type/set.html -----------------------------------------------#\n\nset:\n  # Explicitly typed set.\n  baseball players: !!set\n    ? Mark McGwire\n    ? Sammy Sosa\n    ? Ken Griffey\n  # Flow style\n  baseball teams: !!set { Boston Red Sox, Detroit Tigers, New York Yankees }\n\n# http://yaml.org/type/seq.html -----------------------------------------------#\n\nseq:\n  # Ordered sequence of nodes\n  Block style: !!seq\n  - Mercury   # Rotates - no light/dark sides.\n  - Venus     # Deadliest. Aptly named.\n  - Earth     # Mostly dirt.\n  - Mars      # Seems empty.\n  - Jupiter   # The king.\n  - Saturn    # Pretty.\n  - Uranus    # Where the sun hardly shines.\n  - Neptune   # Boring. No rings.\n  - Pluto     # You call this a planet?\n  Flow style: !!seq [ Mercury, Venus, Earth, Mars,      # Rocks\n                      Jupiter, Saturn, Uranus, Neptune, # Gas\n                      Pluto ]                           # Overrated\n\n\n# Scalar Types #################################################################\n################################################################################\n\n# http://yaml.org/type/bool.html ----------------------------------------------#\n\nbool:\n  - true\n  - True\n  - TRUE\n  - false\n  - False\n  - FALSE\n\n# http://yaml.org/type/float.html ---------------------------------------------#\n\nfloat:\n  canonical: 6.8523015e+5\n  exponentioal: 685.230_15e+03\n  fixed: 685_230.15\n  sexagesimal: 190:20:30.15\n  negative infinity: -.inf\n  not a number: .NaN\n\n# http://yaml.org/type/int.html -----------------------------------------------#\n\nint:\n  canonical: 685230\n  decimal: +685_230\n  octal: 02472256\n  hexadecimal: 0x_0A_74_AE\n  binary: 0b1010_0111_0100_1010_1110\n  sexagesimal: 190:20:30\n\n# http://yaml.org/type/merge.html ---------------------------------------------#\n\nmerge:\n  - &CENTER { x: 1, y: 2 }\n  - &LEFT { x: 0, y: 2 }\n  - &BIG { r: 10 }\n  - &SMALL { r: 1 }\n  \n  # All the following maps are equal:\n  \n  - # Explicit keys\n    x: 1\n    y: 2\n    r: 10\n    label: nothing\n  \n  - # Merge one map\n    << : *CENTER\n    r: 10\n    label: center\n  \n  - # Merge multiple maps\n    << : [ *CENTER, *BIG ]\n    label: center/big\n  \n  - # Override\n    << : [ *BIG, *LEFT, *SMALL ]\n    x: 1\n    label: big/left/small\n\n# http://yaml.org/type/null.html ----------------------------------------------#\n\nnull:\n  # This mapping has four keys,\n  # one has a value.\n  empty:\n  canonical: ~\n  english: null\n  ~: null key\n  # This sequence has five\n  # entries, two have values.\n  sparse:\n    - ~\n    - 2nd entry\n    -\n    - 4th entry\n    - Null\n\n# http://yaml.org/type/str.html -----------------------------------------------#\n\nstring: abcd\n\n# http://yaml.org/type/timestamp.html -----------------------------------------#\n\ntimestamp:\n  canonical:        2001-12-15T02:59:43.1Z\n  valid iso8601:    2001-12-14t21:59:43.10-05:00\n  space separated:  2001-12-14 21:59:43.10 -5\n  no time zone (Z): 2001-12-15 2:59:43.10\n  date (00:00:00Z): 2002-12-14\n\n\n# JavaScript Specific Types ####################################################\n################################################################################\n\n# https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/RegExp\n\nregexp:\n  simple: !!js/regexp      foobar\n  modifiers: !!js/regexp   /foobar/mi\n\n# https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/undefined\n\nundefined: !!js/undefined ~\n\n# https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\n\nfunction: !!js/function >\n  function foobar() {\n    return 'Wow! JS-YAML Rocks!';\n  }\n\n\n# Custom types #################################################################\n################################################################################\n\n\n# JS-YAML allows you to specify a custom YAML types for your structures.\n# This is a simple example of custom constructor defined in \\`js/demo.js\\` for\n# custom \\`!sexy\\` type:\n#\n# var SexyYamlType = new jsyaml.Type('!sexy', {\n#   kind: 'sequence',\n#   construct: function (data) {\n#     return data.map(function (string) { return 'sexy ' + string; });\n#   }\n# });\n#\n# var SEXY_SCHEMA = jsyaml.Schema.create([ SexyYamlType ]);\n#\n# result = jsyaml.load(yourData, { schema: SEXY_SCHEMA });\n\nfoobar: !sexy\n  - bunny\n  - chocolate") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "---\n# Collection Types #############################################################\n################################################################################\n\n# http://yaml.org/type/map.html -----------------------------------------------#\n\nmap:\n  # Unordered set of key: value pairs.\n  Block style: !!map\n    Clark: Evans\n    Ingy: döt Net\n    Oren: Ben-Kiki\n  Flow style: !!map { Clark: Evans, Ingy: döt Net, Oren: Ben-Kiki }\n\n# http://yaml.org/type/omap.html ----------------------------------------------#\n\nomap:\n  # Explicitly typed ordered map (dictionary).\n  Bestiary: !!omap\n    - aardvark: African pig-like ant eater. Ugly.\n    - anteater: South-American ant eater. Two species.\n    - anaconda: South-American constrictor snake. Scaly.\n    # Etc.\n  # Flow style\n  Numbers: !!omap [one: 1, two: 2, three: 3]\n\n# http://yaml.org/type/pairs.html ---------------------------------------------#\n\npairs:\n  # Explicitly typed pairs.\n  Block tasks: !!pairs\n    - meeting: with team.\n    - meeting: with boss.\n    - break: lunch.\n    - meeting: with client.\n  Flow tasks: !!pairs [meeting: with team, meeting: with boss]\n\n# http://yaml.org/type/set.html -----------------------------------------------#\n\nset:\n  # Explicitly typed set.\n  baseball players: !!set\n    ? Mark McGwire\n    ? Sammy Sosa\n    ? Ken Griffey\n  # Flow style\n  baseball teams: !!set { Boston Red Sox, Detroit Tigers, New York Yankees }\n\n# http://yaml.org/type/seq.html -----------------------------------------------#\n\nseq:\n  # Ordered sequence of nodes\n  Block style: !!seq\n    - Mercury # Rotates - no light/dark sides.\n    - Venus # Deadliest. Aptly named.\n    - Earth # Mostly dirt.\n    - Mars # Seems empty.\n    - Jupiter # The king.\n    - Saturn # Pretty.\n    - Uranus # Where the sun hardly shines.\n    - Neptune # Boring. No rings.\n    - Pluto # You call this a planet?\n  Flow style: !!seq [\n      Mercury,\n      Venus,\n      Earth,\n      Mars, # Rocks\n      Jupiter,\n      Saturn,\n      Uranus,\n      Neptune, # Gas\n      Pluto,\n    ] # Overrated\n\n# Scalar Types #################################################################\n################################################################################\n\n# http://yaml.org/type/bool.html ----------------------------------------------#\n\nbool:\n  - true\n  - True\n  - TRUE\n  - false\n  - False\n  - FALSE\n\n# http://yaml.org/type/float.html ---------------------------------------------#\n\nfloat:\n  canonical: 6.8523015e+5\n  exponentioal: 685.230_15e+03\n  fixed: 685_230.15\n  sexagesimal: 190:20:30.15\n  negative infinity: -.inf\n  not a number: .NaN\n\n# http://yaml.org/type/int.html -----------------------------------------------#\n\nint:\n  canonical: 685230\n  decimal: +685_230\n  octal: 02472256\n  hexadecimal: 0x_0A_74_AE\n  binary: 0b1010_0111_0100_1010_1110\n  sexagesimal: 190:20:30\n\n# http://yaml.org/type/merge.html ---------------------------------------------#\n\nmerge:\n  - &CENTER { x: 1, y: 2 }\n  - &LEFT { x: 0, y: 2 }\n  - &BIG { r: 10 }\n  - &SMALL { r: 1 }\n\n  # All the following maps are equal:\n\n  - # Explicit keys\n    x: 1\n    y: 2\n    r: 10\n    label: nothing\n\n  - # Merge one map\n    <<: *CENTER\n    r: 10\n    label: center\n\n  - # Merge multiple maps\n    <<: [*CENTER, *BIG]\n    label: center/big\n\n  - # Override\n    <<: [*BIG, *LEFT, *SMALL]\n    x: 1\n    label: big/left/small\n\n# http://yaml.org/type/null.html ----------------------------------------------#\n\nnull:\n  # This mapping has four keys,\n  # one has a value.\n  empty:\n  canonical: ~\n  english: null\n  ~: null key\n  # This sequence has five\n  # entries, two have values.\n  sparse:\n    - ~\n    - 2nd entry\n    -\n    - 4th entry\n    - Null\n\n# http://yaml.org/type/str.html -----------------------------------------------#\n\nstring: abcd\n\n# http://yaml.org/type/timestamp.html -----------------------------------------#\n\ntimestamp:\n  canonical: 2001-12-15T02:59:43.1Z\n  valid iso8601: 2001-12-14t21:59:43.10-05:00\n  space separated: 2001-12-14 21:59:43.10 -5\n  no time zone (Z): 2001-12-15 2:59:43.10\n  date (00:00:00Z): 2002-12-14\n\n# JavaScript Specific Types ####################################################\n################################################################################\n\n# https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/RegExp\n\nregexp:\n  simple: !!js/regexp foobar\n  modifiers: !!js/regexp /foobar/mi\n\n# https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/undefined\n\nundefined: !!js/undefined ~\n\n# https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\n\nfunction: !!js/function >\n  function foobar() {\n    return 'Wow! JS-YAML Rocks!';\n  }\n\n# Custom types #################################################################\n################################################################################\n\n# JS-YAML allows you to specify a custom YAML types for your structures.\n# This is a simple example of custom constructor defined in \\`js/demo.js\\` for\n# custom \\`!sexy\\` type:\n#\n# var SexyYamlType = new jsyaml.Type('!sexy', {\n#   kind: 'sequence',\n#   construct: function (data) {\n#     return data.map(function (string) { return 'sexy ' + string; });\n#   }\n# });\n#\n# var SEXY_SCHEMA = jsyaml.Schema.create([ SexyYamlType ]);\n#\n# result = jsyaml.load(yourData, { schema: SEXY_SCHEMA });\n\nfoobar: !sexy\n  - bunny\n  - chocolate");
}
