#[allow(unused_imports)]
use rust_prettier::PrettyPrinterBuilder;
#[test]
fn test_test_js_format_1_e559558d() {
    let pretty_printer = PrettyPrinterBuilder::default().build().unwrap();
    let formatted = pretty_printer . format ("/* @flow */\n\n/* EXAMPLES NOT IN A CONDITIONAL */\n\n//\"Sketchy\" checks excused by the default pattern (Not errors)\n\nvar x1: ?boolean = null;\nx1 = x1 || false;\n\nvar y1: ?number = null;\ny1 = y1 || 0;\n\nvar z1: ?string = null;\nz1 = z1 || '';\n\n//These checks aren't excused because they aren't the same as a null check\n//(Errors: one per line)\n\nvar x2: ?boolean = null;\nx2 = x2 || true;\n\nvar y2: ?number = null;\ny2 = y2 || 1;\n\nvar z2: ?string = null;\nz2 = z2 || 'foo';\n\n//The default pattern doesn't excuse all sketchy null checks, just\n//sound ones. (Errors: two per line)\n\nvar a1: boolean | number | string | null = null;\na1 = a1 || false;\n\nvar b1: boolean | number | string | null = null;\nb1 = b1 || 0;\n\nvar c1: boolean | number | string | null = null;\nc1 = c1 || '';\n\n\n/* EXAMPLES IN A CONDITIONAL */\n\n//\"Sketchy\" checks excused by the default pattern (Not errors)\n\nvar x3: ?boolean = null;\nif (x3 || false) {}\n\nvar y3: ?number = null;\nif (y3 || 0) {}\n\nvar z3: ?string = null;\nif (z3 || '') {}\n\n//These checks aren't excused because they aren't the same as a null check\n//(Errors: one per line)\n\nvar x4: ?boolean = null;\nif (x4 || true) {}\n\nvar y4: ?number = null;\nif (y4 || false) {}\n\nvar z4: ?string = null;\nif (z4 || 'foo') {}\n\n//The default pattern doesn't excuse all sketchy null checks, just\n//sound ones. (Errors: two per line)\n\nvar a2: boolean | number | string | null = null;\nif (a2 || false) {}\n\nvar b2: boolean | number | string | null = null;\nif (b2 || 0) {}\n\nvar c2: boolean | number | string | null = null;\nif (c2 || '') {}\n\n//Compound sketchy null checks\n\nvar d1: ?boolean = null;\nvar e1: ?boolean = true;\nd1 = (d1 || e1) || false; //Both checks are sketchy. (This is how it gets parsed without the parentheses)\n\nvar d2: ?boolean = null;\nvar e2: ?boolean = true;\nd2 = d2 || (e2 || false); //Only d2 is sketchy; e2 matches the default pattern.") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "/* @flow */\n\n/* EXAMPLES NOT IN A CONDITIONAL */\n\n//\"Sketchy\" checks excused by the default pattern (Not errors)\n\nvar x1: ?boolean = null;\nx1 = x1 || false;\n\nvar y1: ?number = null;\ny1 = y1 || 0;\n\nvar z1: ?string = null;\nz1 = z1 || \"\";\n\n//These checks aren't excused because they aren't the same as a null check\n//(Errors: one per line)\n\nvar x2: ?boolean = null;\nx2 = x2 || true;\n\nvar y2: ?number = null;\ny2 = y2 || 1;\n\nvar z2: ?string = null;\nz2 = z2 || \"foo\";\n\n//The default pattern doesn't excuse all sketchy null checks, just\n//sound ones. (Errors: two per line)\n\nvar a1: boolean | number | string | null = null;\na1 = a1 || false;\n\nvar b1: boolean | number | string | null = null;\nb1 = b1 || 0;\n\nvar c1: boolean | number | string | null = null;\nc1 = c1 || \"\";\n\n/* EXAMPLES IN A CONDITIONAL */\n\n//\"Sketchy\" checks excused by the default pattern (Not errors)\n\nvar x3: ?boolean = null;\nif (x3 || false) {\n}\n\nvar y3: ?number = null;\nif (y3 || 0) {\n}\n\nvar z3: ?string = null;\nif (z3 || \"\") {\n}\n\n//These checks aren't excused because they aren't the same as a null check\n//(Errors: one per line)\n\nvar x4: ?boolean = null;\nif (x4 || true) {\n}\n\nvar y4: ?number = null;\nif (y4 || false) {\n}\n\nvar z4: ?string = null;\nif (z4 || \"foo\") {\n}\n\n//The default pattern doesn't excuse all sketchy null checks, just\n//sound ones. (Errors: two per line)\n\nvar a2: boolean | number | string | null = null;\nif (a2 || false) {\n}\n\nvar b2: boolean | number | string | null = null;\nif (b2 || 0) {\n}\n\nvar c2: boolean | number | string | null = null;\nif (c2 || \"\") {\n}\n\n//Compound sketchy null checks\n\nvar d1: ?boolean = null;\nvar e1: ?boolean = true;\nd1 = d1 || e1 || false; //Both checks are sketchy. (This is how it gets parsed without the parentheses)\n\nvar d2: ?boolean = null;\nvar e2: ?boolean = true;\nd2 = d2 || e2 || false; //Only d2 is sketchy; e2 matches the default pattern.");
}
