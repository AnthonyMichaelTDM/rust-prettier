#[allow(unused_imports)]
use rust_prettier::PrettyPrinterBuilder;
#[allow(dead_code)]
static INFINITY: usize = usize::MAX;
#[test]
fn test_logical_js_format_1_72e88c29() {
    let pretty_printer = PrettyPrinterBuilder::default()
        .parsers(vec!["flow"])
        .print_width(80)
        .build()
        .unwrap();
    let formatted = pretty_printer . format ("/* @flow */\n\n/**\n * A falsy variable on the left side of &&\n */\nfunction logical1a(): number { // expected \\`: boolean\\`\n    var x = false;\n    return x && '123';\n}\n\n/**\n * A truthy variable on the left side of &&\n */\nfunction logical1b(): string {\n    var x = true;\n    return x && '123';\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2a(): number { // expected \\`: boolean\\`\n    return false && '123';\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2b(): number {\n    return 0 && '123';\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2c(): string {\n    return \"\" && 123;\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2d(): string {\n    return true && '123';\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2e(): number {\n    return 'foo' && 123;\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2f(): string {\n    return 123 && 'foo';\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2g(): string {\n    return [1,2,3] && 'foo';\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2h(x: {a: number}): string {\n    return x && 'foo';\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2i(x: Object): string {\n    return x && 'foo';\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2j(x: (a: number) => number): string {\n    return x && 'foo';\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2k(x: Function): string {\n    return x && 'foo';\n}\n\n/**\n * An expression on the left side of &&\n */\nfunction logical3a(): string { // expected \\`: boolean\\`\n    var x: ?number = null;\n    return x != null && x > 10;\n}\n\n/**\n * An expression on the left side of &&\n */\nfunction logical3b(): number { // expected \\`: boolean | number\\`\n    var x: ?number = null;\n    return x != null && x;\n}\n\n/**\n * An expression on the left side of &&\n */\nfunction logical3c(): ?number { // expected \\`: boolean | ?number\\`\n    var x: ?number = null;\n    return x != undefined && x;\n}\n\n/**\n * Maybe truthy returns both types\n */\nfunction logical4(x: boolean): string { // expected \\`: boolean | string\\`\n    return x && '123';\n}\n\n/**\n * A falsy variable on the left side of ||\n */\nfunction logical5a(): number {\n    var x = false;\n    return x || 0;\n}\n\n/**\n * A maybe variable on the left side of ||\n */\nfunction logical5b(): number {\n    var x: ?number = null;\n    return x || 0;\n}\n\n/**\n * A truthy variable on the left side of ||\n */\nfunction logical5c(): string { // expected \\`: boolean\\`\n    var x = true;\n    return x || 0;\n}\n\n/**\n * A literal on the left side of ||\n */\nfunction logical6a(): string {\n    return false || '123';\n}\n\n/**\n * A literal on the left side of ||\n */\nfunction logical6b(): string {\n    return 0 || '123';\n}\n\n/**\n * A literal on the left side of ||\n */\nfunction logical6c(): number {\n    return \"\" || 123;\n}\n\n/**\n * A literal on the left side of ||\n */\nfunction logical6d(): number { // expected \\`: boolean\\`\n    return true || '123';\n}\n\n/**\n * A literal on the left side of ||\n */\nfunction logical6e(): string {\n    return 'foo' || 123;\n}\n\n/**\n * A literal on the left side of ||\n */\nfunction logical6f(): number {\n    return 123 || 'foo';\n}\n\n/**\n * A composite && and ||\n */\nfunction logical7a(): number {\n    var x: ?number = null;\n    return x != null && x || 0;\n}\n\n/**\n * A composite && and || where the truthiness is unknown\n */\nfunction logical7b(x: boolean, y: number): number {\n    return x && y || 0;\n}\n\n/**\n * A composite && and ||\n */\nfunction logical7c(x: string): number {\n    return x && 1 || 0;\n}\n\n/**\n * A composite && and ||\n */\nfunction logical7d(x: number): string {\n    return x && 'foo' || 'bar';\n}\n\n/**\n * A composite && and ||\n */\nfunction logical7e(x: number): string {\n    return false && x || 'bar';\n}\n\n/**\n * A composite || and &&\n *\n * \\`x || 0\\` always returns a number (never a boolean) and then short\n * circuits the && because 0 is falsy, so this should just return number.\n */\nfunction logical8a(): number {\n    var x = false;\n    return (x || 0) && 'foo';\n}\n\n/**\n * A composite || and &&\n *\n * \\`x || 1\\` always returns something truthy, so this returns a string\n */\nfunction logical8b(): string {\n    var x = false;\n    return (x || 1) && 'foo';\n}\n\n/**\n * A composite || and &&\n *\n * \\`x\\` is always truthy, so this returns a string\n */\nfunction logical8c(): string {\n    var x = true;\n    return (x || 1) && 'foo';\n}\n\n/**\n * A composite || and &&\n */\nfunction logical8d(): number {\n    var x = false;\n    return x || (0 && 'foo');\n}\n\n/**\n * A composite || and &&\n */\nfunction logical8e(): string {\n    var x = false;\n    return x || (1 && 'foo');\n}\n\n/**\n * A composite || and &&\n */\nfunction logical8f(): string { // expected \\`: boolean\\`\n    var x = true;\n    return x || (1 && 'foo');\n}\n\n/**\n * A composite || and ||\n */\nfunction logical9a(\n    x: number,\n    y: string\n): number | string { // expected \\`: number | string | boolean\\`\n    return x || y || false;\n}\n\n/**\n * A composite || and ||\n */\nfunction logical9b(x: number, y: string): number | string {\n    return false || x || y;\n}\n\n/**\n * A composite || and ||\n */\nfunction logical9c(x: number, y: boolean): string {\n    return 'a' || x || y;\n}\n\n/**\n * A composite && and &&\n */\nfunction logical10a(\n    x: number,\n    y: string\n): number | string { // expected \\`: number | string | boolean\\`\n    return x && y && false;\n}\n\n/**\n * A composite && and &&\n */\nfunction logical10b(x: number, y: string): Array<any> { // expected \\`: boolean\\`\n    return false && x && y;\n}\n\n/**\n * A composite && and &&\n */\nfunction logical10c(x: number, y: string): Array<any> { // expected \\`number | boolean\\`\n    return x && false && y;\n}\n\n/**\n * || in a loop\n */\nfunction logical11a(): number {\n    var y = 1;\n    for (var x = 0; x < 5; x++) {\n        y = y || true;\n    }\n    return y;\n}\n\n/**\n * || in a loop\n */\nfunction logical11b(y: number): number {\n    for (var x = 0; x < 5; x++) {\n        y = y || true; // expected a number\n    }\n    return y;\n}\n\n/**\n * && in a loop\n */\nfunction logical12a(): number {\n    var y = 1;\n    var z = true;\n    for (var x = 0; x < 5; x++) {\n        y = z && y;\n        z = false;\n    }\n    return y;\n}\n\n/**\n * && in a loop\n */\nfunction logical12b(y: number): number {\n    for (var x = 0; x < 5; x++) {\n        y = y && true; // expected a number\n    }\n    return y;\n}\n\n/**\n * Complex &&\n */\nfunction logical13(x: number): Array<{x: string}> {\n    return [\n        {x: x && \"bar\"},\n        {x: true && \"bar\"},\n        {x: true && false},\n        {x: false && false},\n        {x: 1 && \"bar\"},\n        {x: \"foo\" && \"bar\"},\n        {x: \"foo\" && \"bar\"},\n        {x: \"foo\" && \"bar\"},\n    ];\n}\n\n/**\n * Complex ||\n */\nfunction logical14(x: number): Array<{x: string}> {\n    return [\n        {x: x || \"bar\"},\n        {x: false || \"bar\"},\n        {x: false || true},\n        {x: true || false},\n        {x: 0 || \"bar\"},\n        {x: \"foo\" || \"bar\"},\n        {x: \"foo\" || \"bar\"},\n        {x: \"foo\" || \"bar\"},\n    ];\n}\n\n/**\n * || in an addition\n */\nfunction logical15a(x: number): number {\n    return 5 + (x || 7);\n}\n\n/**\n * || in an addition\n */\nfunction logical15b(x: number): number {\n    return (x || 7) + 5;\n}\n\n/**\n * && in an addition\n */\nfunction logical15c(x: number): number {\n    return 5 + (x && 7);\n}\n\n/**\n * && in an addition\n */\nfunction logical15d(x: number): number {\n    return (x && 7) + 5;\n}\n\n/**\n * || in a comparison\n */\nfunction logical16a(x: number): boolean {\n    return 5 < (x || 7);\n}\n\n/**\n * || in a comparison\n */\nfunction logical16b(x: number): boolean {\n    return (x || 7) < 5;\n}\n\n/**\n * && in a comparison\n */\nfunction logical16c(x: number): boolean {\n    return 5 < (x && 7);\n}\n\n/**\n * && in a comparison\n */\nfunction logical16d(x: number): boolean {\n    return (x && 7) < 5;\n}\n\n/**\n * || in an equality\n */\nfunction logical17a(x: number): boolean {\n    return 5 == (x || 7);\n}\n\n/**\n * || in an equality\n */\nfunction logical17b(x: number): boolean {\n    return (x || 7) == 5;\n}\n\n/**\n * && in an equality\n */\nfunction logical17c(x: number): boolean {\n    return 5 == (x && 7);\n}\n\n/**\n * && in an equality\n */\nfunction logical17d(x: number): boolean {\n    return (x && 7) == 5;\n}\n\n/**\n * Expressions on each side that return truthy things\n */\nfunction logical18a(x: number, y: number): number {\n    return x - 1 || y - 1;\n}\n\n/**\n * Sentinel properties should not interfere\n */\nfunction logical18b(x: {a: number}, y: {b: number}): number {\n    return x.a - 1 || y.b - 1;\n}\n\n/**\n * Layer of indirection in the LHS (get prop)\n */\nfunction logical19a(x: { y: string, z: boolean }): boolean {\n  return (x.y && x.z); // error: x.y is a string\n}\nfunction logical19b(x: { y: string, z: boolean }): boolean {\n  return (x.y || x.z); // error: x.y is a string\n}") ;
    assert!(formatted.is_ok());
    let formatted = formatted.unwrap();
    assert_eq ! (formatted , "/* @flow */\n\n/**\n * A falsy variable on the left side of &&\n */\nfunction logical1a(): number {\n  // expected \\`: boolean\\`\n  var x = false;\n  return x && \"123\";\n}\n\n/**\n * A truthy variable on the left side of &&\n */\nfunction logical1b(): string {\n  var x = true;\n  return x && \"123\";\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2a(): number {\n  // expected \\`: boolean\\`\n  return false && \"123\";\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2b(): number {\n  return 0 && \"123\";\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2c(): string {\n  return \"\" && 123;\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2d(): string {\n  return true && \"123\";\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2e(): number {\n  return \"foo\" && 123;\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2f(): string {\n  return 123 && \"foo\";\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2g(): string {\n  return [1, 2, 3] && \"foo\";\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2h(x: { a: number }): string {\n  return x && \"foo\";\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2i(x: Object): string {\n  return x && \"foo\";\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2j(x: (a: number) => number): string {\n  return x && \"foo\";\n}\n\n/**\n * A literal on the left side of &&\n */\nfunction logical2k(x: Function): string {\n  return x && \"foo\";\n}\n\n/**\n * An expression on the left side of &&\n */\nfunction logical3a(): string {\n  // expected \\`: boolean\\`\n  var x: ?number = null;\n  return x != null && x > 10;\n}\n\n/**\n * An expression on the left side of &&\n */\nfunction logical3b(): number {\n  // expected \\`: boolean | number\\`\n  var x: ?number = null;\n  return x != null && x;\n}\n\n/**\n * An expression on the left side of &&\n */\nfunction logical3c(): ?number {\n  // expected \\`: boolean | ?number\\`\n  var x: ?number = null;\n  return x != undefined && x;\n}\n\n/**\n * Maybe truthy returns both types\n */\nfunction logical4(x: boolean): string {\n  // expected \\`: boolean | string\\`\n  return x && \"123\";\n}\n\n/**\n * A falsy variable on the left side of ||\n */\nfunction logical5a(): number {\n  var x = false;\n  return x || 0;\n}\n\n/**\n * A maybe variable on the left side of ||\n */\nfunction logical5b(): number {\n  var x: ?number = null;\n  return x || 0;\n}\n\n/**\n * A truthy variable on the left side of ||\n */\nfunction logical5c(): string {\n  // expected \\`: boolean\\`\n  var x = true;\n  return x || 0;\n}\n\n/**\n * A literal on the left side of ||\n */\nfunction logical6a(): string {\n  return false || \"123\";\n}\n\n/**\n * A literal on the left side of ||\n */\nfunction logical6b(): string {\n  return 0 || \"123\";\n}\n\n/**\n * A literal on the left side of ||\n */\nfunction logical6c(): number {\n  return \"\" || 123;\n}\n\n/**\n * A literal on the left side of ||\n */\nfunction logical6d(): number {\n  // expected \\`: boolean\\`\n  return true || \"123\";\n}\n\n/**\n * A literal on the left side of ||\n */\nfunction logical6e(): string {\n  return \"foo\" || 123;\n}\n\n/**\n * A literal on the left side of ||\n */\nfunction logical6f(): number {\n  return 123 || \"foo\";\n}\n\n/**\n * A composite && and ||\n */\nfunction logical7a(): number {\n  var x: ?number = null;\n  return (x != null && x) || 0;\n}\n\n/**\n * A composite && and || where the truthiness is unknown\n */\nfunction logical7b(x: boolean, y: number): number {\n  return (x && y) || 0;\n}\n\n/**\n * A composite && and ||\n */\nfunction logical7c(x: string): number {\n  return (x && 1) || 0;\n}\n\n/**\n * A composite && and ||\n */\nfunction logical7d(x: number): string {\n  return (x && \"foo\") || \"bar\";\n}\n\n/**\n * A composite && and ||\n */\nfunction logical7e(x: number): string {\n  return (false && x) || \"bar\";\n}\n\n/**\n * A composite || and &&\n *\n * \\`x || 0\\` always returns a number (never a boolean) and then short\n * circuits the && because 0 is falsy, so this should just return number.\n */\nfunction logical8a(): number {\n  var x = false;\n  return (x || 0) && \"foo\";\n}\n\n/**\n * A composite || and &&\n *\n * \\`x || 1\\` always returns something truthy, so this returns a string\n */\nfunction logical8b(): string {\n  var x = false;\n  return (x || 1) && \"foo\";\n}\n\n/**\n * A composite || and &&\n *\n * \\`x\\` is always truthy, so this returns a string\n */\nfunction logical8c(): string {\n  var x = true;\n  return (x || 1) && \"foo\";\n}\n\n/**\n * A composite || and &&\n */\nfunction logical8d(): number {\n  var x = false;\n  return x || (0 && \"foo\");\n}\n\n/**\n * A composite || and &&\n */\nfunction logical8e(): string {\n  var x = false;\n  return x || (1 && \"foo\");\n}\n\n/**\n * A composite || and &&\n */\nfunction logical8f(): string {\n  // expected \\`: boolean\\`\n  var x = true;\n  return x || (1 && \"foo\");\n}\n\n/**\n * A composite || and ||\n */\nfunction logical9a(x: number, y: string): number | string {\n  // expected \\`: number | string | boolean\\`\n  return x || y || false;\n}\n\n/**\n * A composite || and ||\n */\nfunction logical9b(x: number, y: string): number | string {\n  return false || x || y;\n}\n\n/**\n * A composite || and ||\n */\nfunction logical9c(x: number, y: boolean): string {\n  return \"a\" || x || y;\n}\n\n/**\n * A composite && and &&\n */\nfunction logical10a(x: number, y: string): number | string {\n  // expected \\`: number | string | boolean\\`\n  return x && y && false;\n}\n\n/**\n * A composite && and &&\n */\nfunction logical10b(x: number, y: string): Array<any> {\n  // expected \\`: boolean\\`\n  return false && x && y;\n}\n\n/**\n * A composite && and &&\n */\nfunction logical10c(x: number, y: string): Array<any> {\n  // expected \\`number | boolean\\`\n  return x && false && y;\n}\n\n/**\n * || in a loop\n */\nfunction logical11a(): number {\n  var y = 1;\n  for (var x = 0; x < 5; x++) {\n    y = y || true;\n  }\n  return y;\n}\n\n/**\n * || in a loop\n */\nfunction logical11b(y: number): number {\n  for (var x = 0; x < 5; x++) {\n    y = y || true; // expected a number\n  }\n  return y;\n}\n\n/**\n * && in a loop\n */\nfunction logical12a(): number {\n  var y = 1;\n  var z = true;\n  for (var x = 0; x < 5; x++) {\n    y = z && y;\n    z = false;\n  }\n  return y;\n}\n\n/**\n * && in a loop\n */\nfunction logical12b(y: number): number {\n  for (var x = 0; x < 5; x++) {\n    y = y && true; // expected a number\n  }\n  return y;\n}\n\n/**\n * Complex &&\n */\nfunction logical13(x: number): Array<{ x: string }> {\n  return [\n    { x: x && \"bar\" },\n    { x: true && \"bar\" },\n    { x: true && false },\n    { x: false && false },\n    { x: 1 && \"bar\" },\n    { x: \"foo\" && \"bar\" },\n    { x: \"foo\" && \"bar\" },\n    { x: \"foo\" && \"bar\" },\n  ];\n}\n\n/**\n * Complex ||\n */\nfunction logical14(x: number): Array<{ x: string }> {\n  return [\n    { x: x || \"bar\" },\n    { x: false || \"bar\" },\n    { x: false || true },\n    { x: true || false },\n    { x: 0 || \"bar\" },\n    { x: \"foo\" || \"bar\" },\n    { x: \"foo\" || \"bar\" },\n    { x: \"foo\" || \"bar\" },\n  ];\n}\n\n/**\n * || in an addition\n */\nfunction logical15a(x: number): number {\n  return 5 + (x || 7);\n}\n\n/**\n * || in an addition\n */\nfunction logical15b(x: number): number {\n  return (x || 7) + 5;\n}\n\n/**\n * && in an addition\n */\nfunction logical15c(x: number): number {\n  return 5 + (x && 7);\n}\n\n/**\n * && in an addition\n */\nfunction logical15d(x: number): number {\n  return (x && 7) + 5;\n}\n\n/**\n * || in a comparison\n */\nfunction logical16a(x: number): boolean {\n  return 5 < (x || 7);\n}\n\n/**\n * || in a comparison\n */\nfunction logical16b(x: number): boolean {\n  return (x || 7) < 5;\n}\n\n/**\n * && in a comparison\n */\nfunction logical16c(x: number): boolean {\n  return 5 < (x && 7);\n}\n\n/**\n * && in a comparison\n */\nfunction logical16d(x: number): boolean {\n  return (x && 7) < 5;\n}\n\n/**\n * || in an equality\n */\nfunction logical17a(x: number): boolean {\n  return 5 == (x || 7);\n}\n\n/**\n * || in an equality\n */\nfunction logical17b(x: number): boolean {\n  return (x || 7) == 5;\n}\n\n/**\n * && in an equality\n */\nfunction logical17c(x: number): boolean {\n  return 5 == (x && 7);\n}\n\n/**\n * && in an equality\n */\nfunction logical17d(x: number): boolean {\n  return (x && 7) == 5;\n}\n\n/**\n * Expressions on each side that return truthy things\n */\nfunction logical18a(x: number, y: number): number {\n  return x - 1 || y - 1;\n}\n\n/**\n * Sentinel properties should not interfere\n */\nfunction logical18b(x: { a: number }, y: { b: number }): number {\n  return x.a - 1 || y.b - 1;\n}\n\n/**\n * Layer of indirection in the LHS (get prop)\n */\nfunction logical19a(x: { y: string, z: boolean }): boolean {\n  return x.y && x.z; // error: x.y is a string\n}\nfunction logical19b(x: { y: string, z: boolean }): boolean {\n  return x.y || x.z; // error: x.y is a string\n}");
}
